From 84073f4a757dd8813e761bc192e1a846ce984620 Mon Sep 17 00:00:00 2001
From: yoution <zhuyan207@gmail.com>
Date: Sun, 7 Feb 2021 20:39:23 +0800
Subject: [PATCH] Automated E2E Testing with Postman Part

---
 Poc-test.md                                   |   36 +
 README.md                                     |    2 +
 config/default.js                             |    2 +-
 package-lock.json                             | 1027 +++-
 package.json                                  |    4 +-
 .../ChallengeTimelineTemplateController.js    |    6 +-
 src/init-db.js                                |    4 +
 src/models/Challenge.js                       |    4 +-
 src/models/Phase.js                           |    4 +-
 .../Challenge-API.postman_collection.json     | 5003 +++++++++++++++++
 .../Challenge-API.postman_environment.json    |   49 +
 test/postman/newman.js                        |  347 ++
 .../create-challenge-phase-by-admin.json      |   14 +
 ...create-challenge-phase-by-error-field.json |   10 +
 ...eate-challenge-phase-by-invalid-token.json |   22 +
 ...lete-challenge-phase-by-invalid-token.json |   22 +
 ...fully-update-challenge-phase-by-admin.json |    9 +
 ...update-challenge-phase-by-error-field.json |   12 +
 ...date-challenge-phase-by-invalid-token.json |   22 +
 ...ially-update-challenge-phase-by-admin.json |   10 +
 ...update-challenge-phase-by-error-field.json |   13 +
 ...date-challenge-phase-by-invalid-token.json |   22 +
 ...-challenge-timeline-template-by-admin.json |    8 +
 ...enge-timeline-template-by-error-field.json |    7 +
 ...ge-timeline-template-by-invalid-token.json |   22 +
 ...ge-timeline-template-by-invalid-token.json |   22 +
 ...-challenge-timeline-template-by-admin.json |    6 +
 ...enge-timeline-template-by-error-field.json |    9 +
 ...ge-timeline-template-by-invalid-token.json |   22 +
 .../create-challenge-track-by-admin.json      |   26 +
 ...create-challenge-track-by-error-field.json |   22 +
 ...eate-challenge-track-by-invalid-token.json |   22 +
 ...fully-update-challenge-track-by-admin.json |   10 +
 ...update-challenge-track-by-error-field.json |   24 +
 ...date-challenge-track-by-invalid-token.json |   22 +
 ...ially-update-challenge-track-by-admin.json |   12 +
 ...update-challenge-track-by-error-field.json |   25 +
 ...date-challenge-track-by-invalid-token.json |   22 +
 .../create-challenge-type-by-admin.json       |   26 +
 .../create-challenge-type-by-error-field.json |   20 +
 ...reate-challenge-type-by-invalid-token.json |   22 +
 .../fully-update-challenge-type-by-admin.json |   10 +
 ...-update-challenge-type-by-error-field.json |   20 +
 ...pdate-challenge-type-by-invalid-token.json |   22 +
 ...tially-update-challenge-type-by-admin.json |   10 +
 ...-update-challenge-type-by-error-field.json |   20 +
 ...pdate-challenge-type-by-invalid-token.json |   22 +
 ...create-dependency-with-invalid-tokens.json |   26 +
 .../create-dependency.json                    |   17 +
 ...delete-dependency-with-invalid-tokens.json |   26 +
 .../get-dependency-with-invalid-tokens.json   |   26 +
 ...update-dependency-with-invalid-tokens.json |   26 +
 .../update-dependency.json                    |   17 +
 .../create-resource-role-by-admin.json        |   55 +
 .../create-resource-role-by-m2m.json          |   55 +
 ...ate-resource-role-with-invalid-tokens.json |   26 +
 .../update-resource-role-by-admin.json        |   48 +
 .../update-resource-role-by-m2m.json          |   48 +
 ...ate-resource-role-with-invalid-tokens.json |   26 +
 .../create-timeline-template-by-admin.json    |   14 +
 ...eate-timeline-template-by-error-field.json |   11 +
 ...te-timeline-template-by-invalid-token.json |   22 +
 ...te-timeline-template-by-invalid-token.json |   22 +
 ...lly-update-timeline-template-by-admin.json |    9 +
 ...date-timeline-template-by-error-field.json |   12 +
 ...te-timeline-template-by-invalid-token.json |   22 +
 ...lly-update-timeline-template-by-admin.json |   10 +
 ...date-timeline-template-by-error-field.json |   10 +
 ...te-timeline-template-by-invalid-token.json |   22 +
 69 files changed, 7637 insertions(+), 10 deletions(-)
 create mode 100644 Poc-test.md
 create mode 100644 test/postman/Challenge-API.postman_collection.json
 create mode 100644 test/postman/Challenge-API.postman_environment.json
 create mode 100644 test/postman/newman.js
 create mode 100644 test/postman/testData/challenge-phase/create-challenge-phase-by-admin.json
 create mode 100644 test/postman/testData/challenge-phase/create-challenge-phase-by-error-field.json
 create mode 100644 test/postman/testData/challenge-phase/create-challenge-phase-by-invalid-token.json
 create mode 100644 test/postman/testData/challenge-phase/delete-challenge-phase-by-invalid-token.json
 create mode 100644 test/postman/testData/challenge-phase/fully-update-challenge-phase-by-admin.json
 create mode 100644 test/postman/testData/challenge-phase/fully-update-challenge-phase-by-error-field.json
 create mode 100644 test/postman/testData/challenge-phase/fully-update-challenge-phase-by-invalid-token.json
 create mode 100644 test/postman/testData/challenge-phase/partially-update-challenge-phase-by-admin.json
 create mode 100644 test/postman/testData/challenge-phase/partially-update-challenge-phase-by-error-field.json
 create mode 100644 test/postman/testData/challenge-phase/partially-update-challenge-phase-by-invalid-token.json
 create mode 100644 test/postman/testData/challenge-timeline-template/create-challenge-timeline-template-by-admin.json
 create mode 100644 test/postman/testData/challenge-timeline-template/create-challenge-timeline-template-by-error-field.json
 create mode 100644 test/postman/testData/challenge-timeline-template/create-challenge-timeline-template-by-invalid-token.json
 create mode 100644 test/postman/testData/challenge-timeline-template/delete-challenge-timeline-template-by-invalid-token.json
 create mode 100644 test/postman/testData/challenge-timeline-template/fully-update-challenge-timeline-template-by-admin.json
 create mode 100644 test/postman/testData/challenge-timeline-template/fully-update-challenge-timeline-template-by-error-field.json
 create mode 100644 test/postman/testData/challenge-timeline-template/fully-update-challenge-timeline-template-by-invalid-token.json
 create mode 100644 test/postman/testData/challenge-track/create-challenge-track-by-admin.json
 create mode 100644 test/postman/testData/challenge-track/create-challenge-track-by-error-field.json
 create mode 100644 test/postman/testData/challenge-track/create-challenge-track-by-invalid-token.json
 create mode 100644 test/postman/testData/challenge-track/fully-update-challenge-track-by-admin.json
 create mode 100644 test/postman/testData/challenge-track/fully-update-challenge-track-by-error-field.json
 create mode 100644 test/postman/testData/challenge-track/fully-update-challenge-track-by-invalid-token.json
 create mode 100644 test/postman/testData/challenge-track/partially-update-challenge-track-by-admin.json
 create mode 100644 test/postman/testData/challenge-track/partially-update-challenge-track-by-error-field.json
 create mode 100644 test/postman/testData/challenge-track/partially-update-challenge-track-by-invalid-token.json
 create mode 100644 test/postman/testData/challenge-type/create-challenge-type-by-admin.json
 create mode 100644 test/postman/testData/challenge-type/create-challenge-type-by-error-field.json
 create mode 100644 test/postman/testData/challenge-type/create-challenge-type-by-invalid-token.json
 create mode 100644 test/postman/testData/challenge-type/fully-update-challenge-type-by-admin.json
 create mode 100644 test/postman/testData/challenge-type/fully-update-challenge-type-by-error-field.json
 create mode 100644 test/postman/testData/challenge-type/fully-update-challenge-type-by-invalid-token.json
 create mode 100644 test/postman/testData/challenge-type/partially-update-challenge-type-by-admin.json
 create mode 100644 test/postman/testData/challenge-type/partially-update-challenge-type-by-error-field.json
 create mode 100644 test/postman/testData/challenge-type/partially-update-challenge-type-by-invalid-token.json
 create mode 100644 test/postman/testData/resource-role-phase-dependency/create-dependency-with-invalid-tokens.json
 create mode 100644 test/postman/testData/resource-role-phase-dependency/create-dependency.json
 create mode 100644 test/postman/testData/resource-role-phase-dependency/delete-dependency-with-invalid-tokens.json
 create mode 100644 test/postman/testData/resource-role-phase-dependency/get-dependency-with-invalid-tokens.json
 create mode 100644 test/postman/testData/resource-role-phase-dependency/update-dependency-with-invalid-tokens.json
 create mode 100644 test/postman/testData/resource-role-phase-dependency/update-dependency.json
 create mode 100644 test/postman/testData/resource-role/create-resource-role-by-admin.json
 create mode 100644 test/postman/testData/resource-role/create-resource-role-by-m2m.json
 create mode 100644 test/postman/testData/resource-role/create-resource-role-with-invalid-tokens.json
 create mode 100644 test/postman/testData/resource-role/update-resource-role-by-admin.json
 create mode 100644 test/postman/testData/resource-role/update-resource-role-by-m2m.json
 create mode 100644 test/postman/testData/resource-role/update-resource-role-with-invalid-tokens.json
 create mode 100644 test/postman/testData/timeline-template/create-timeline-template-by-admin.json
 create mode 100644 test/postman/testData/timeline-template/create-timeline-template-by-error-field.json
 create mode 100644 test/postman/testData/timeline-template/create-timeline-template-by-invalid-token.json
 create mode 100644 test/postman/testData/timeline-template/delete-timeline-template-by-invalid-token.json
 create mode 100644 test/postman/testData/timeline-template/fully-update-timeline-template-by-admin.json
 create mode 100644 test/postman/testData/timeline-template/fully-update-timeline-template-by-error-field.json
 create mode 100644 test/postman/testData/timeline-template/fully-update-timeline-template-by-invalid-token.json
 create mode 100644 test/postman/testData/timeline-template/partially-update-timeline-template-by-admin.json
 create mode 100644 test/postman/testData/timeline-template/partially-update-timeline-template-by-error-field.json
 create mode 100644 test/postman/testData/timeline-template/partially-update-timeline-template-by-invalid-token.json

diff --git a/Poc-test.md b/Poc-test.md
new file mode 100644
index 0000000..89e9005
--- /dev/null
+++ b/Poc-test.md
@@ -0,0 +1,36 @@
+# Postman PoC test
+## Prerequisite
+- start db and es:
+  ```bash
+  $ cd challenge-api/local
+  $ docker-compose up
+  ```
+- create tables:
+  ```bash
+  $ cd challenge-api 
+
+    # NOTE:
+    # if tables and data already exist, please run first
+
+    # $ npm run drop-tables
+
+    # to drop data and tables
+
+  $ npm run create-tables
+  ```
+- start app
+  ```bash
+  $ cd challenge-api 
+  $ source env.sh            # set env variables
+  $ NODE_ENV=test npm start
+  ```
+
+## newman test
+  ```bash
+  $ npm run test:newman
+  ```
+
+
+## Postman mock server
+E2E tests use nock to mock `BUSAPI_URL`, where postman mock server could be used to replace nock.
+Please refer to: https://drive.google.com/file/d/1GXMzyqpzwix-LDBwieiRFfpJlJxrTIgI/view?usp=sharing
diff --git a/README.md b/README.md
index 13f5f4e..c9c2480 100644
--- a/README.md
+++ b/README.md
@@ -180,6 +180,8 @@ To run integration tests with coverage report
 ```bash
 npm run e2e:cov
 ```
+### Running Postman PoC test
+Refer to the PoC test document [**PoC-test.md**](PoC-test.md)
 
 ## Verification
 Refer to the verification document `Verification.md`
diff --git a/config/default.js b/config/default.js
index bd64f4e..6767ed4 100644
--- a/config/default.js
+++ b/config/default.js
@@ -30,7 +30,7 @@ module.exports = {
     // AWS_SECRET_ACCESS_KEY: process.env.AWS_FAKE_KEY || 'FAKE_SECRET_ACCESS_KEY',
     AWS_REGION: process.env.AWS_REGION || 'ap-northeast-1',
     IS_LOCAL_DB: process.env.IS_LOCAL_DB || true,
-    DYNAMODB_URL: process.env.DYNAMODB_URL || 'http://localhost:7777',
+    DYNAMODB_URL: process.env.DYNAMODB_URL || 'http://localhost:8000',
     S3_API_VERSION: process.env.S3_API_VERSION || '2006-03-01',
     BUCKET_WHITELIST: process.env.BUCKET_WHITELIST || 'topcoder_01, topcoder_02'
   },
diff --git a/package-lock.json b/package-lock.json
index 346fb80..96d90d5 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -159,6 +159,37 @@
         "to-fast-properties": "^2.0.0"
       }
     },
+    "@postman/form-data": {
+      "version": "3.1.1",
+      "resolved": "https://registry.npmjs.org/@postman/form-data/-/form-data-3.1.1.tgz",
+      "integrity": "sha512-vjh8Q2a8S6UCm/KKs31XFJqEEgmbjBmpPNVV2eVav6905wyFAwaUOBGA1NPBI4ERH9MMZc6w0umFgM6WbEPMdg==",
+      "dev": true,
+      "requires": {
+        "asynckit": "^0.4.0",
+        "combined-stream": "^1.0.8",
+        "mime-types": "^2.1.12"
+      },
+      "dependencies": {
+        "combined-stream": {
+          "version": "1.0.8",
+          "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
+          "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
+          "dev": true,
+          "requires": {
+            "delayed-stream": "~1.0.0"
+          }
+        }
+      }
+    },
+    "@postman/tunnel-agent": {
+      "version": "0.6.3",
+      "resolved": "https://registry.npmjs.org/@postman/tunnel-agent/-/tunnel-agent-0.6.3.tgz",
+      "integrity": "sha512-k57fzmAZ2PJGxfOA4SGR05ejorHbVAa/84Hxh/2nAztjNXc4ZjOm9NUIk6/Z6LCrBvJZqjRZbN8e/nROVUPVdg==",
+      "dev": true,
+      "requires": {
+        "safe-buffer": "^5.0.1"
+      }
+    },
     "@types/body-parser": {
       "version": "1.19.0",
       "resolved": "https://registry.npmjs.org/@types/body-parser/-/body-parser-1.19.0.tgz",
@@ -371,6 +402,12 @@
         "es-abstract": "^1.7.0"
       }
     },
+    "array-uniq": {
+      "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/array-uniq/-/array-uniq-1.0.3.tgz",
+      "integrity": "sha1-r2rId6Jcx/dOBYiUdThY39sk/bY=",
+      "dev": true
+    },
     "asn1": {
       "version": "0.2.4",
       "resolved": "https://registry.npmjs.org/asn1/-/asn1-0.2.4.tgz",
@@ -546,6 +583,15 @@
         "concat-map": "0.0.1"
       }
     },
+    "brotli": {
+      "version": "1.3.2",
+      "resolved": "https://registry.npmjs.org/brotli/-/brotli-1.3.2.tgz",
+      "integrity": "sha1-UlqcrU/LqWR119OI9q7LE+7VL0Y=",
+      "dev": true,
+      "requires": {
+        "base64-js": "^1.1.2"
+      }
+    },
     "browser-stdout": {
       "version": "1.3.1",
       "resolved": "http://registry.npm.taobao.org/browser-stdout/download/browser-stdout-1.3.1.tgz",
@@ -676,6 +722,12 @@
       "integrity": "sha1-tUc7M9yXxCTl2Y3IfVXU2KKci/I=",
       "dev": true
     },
+    "charset": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/charset/-/charset-1.0.1.tgz",
+      "integrity": "sha512-6dVyOOYjpfFcL1Y4qChrAoQLRHvj2ziyhcm0QJlhOcAhykL/k1kTUPbeo+87MNRTRdk2OIIsIXbuF3x2wi5EXg==",
+      "dev": true
+    },
     "check-error": {
       "version": "1.0.2",
       "resolved": "http://registry.npm.taobao.org/check-error/download/check-error-1.0.2.tgz",
@@ -697,6 +749,107 @@
         "restore-cursor": "^2.0.0"
       }
     },
+    "cli-progress": {
+      "version": "3.8.2",
+      "resolved": "https://registry.npmjs.org/cli-progress/-/cli-progress-3.8.2.tgz",
+      "integrity": "sha512-qRwBxLldMSfxB+YGFgNRaj5vyyHe1yMpVeDL79c+7puGujdKJHQHydgqXDcrkvQgJ5U/d3lpf6vffSoVVUftVQ==",
+      "dev": true,
+      "requires": {
+        "colors": "^1.1.2",
+        "string-width": "^4.2.0"
+      },
+      "dependencies": {
+        "ansi-regex": {
+          "version": "5.0.0",
+          "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.0.tgz",
+          "integrity": "sha512-bY6fj56OUQ0hU1KjFNDQuJFezqKdrAyFdIevADiqrWHwSlbmBNMHp5ak2f40Pm8JTFyM2mqxkG6ngkHO11f/lg==",
+          "dev": true
+        },
+        "emoji-regex": {
+          "version": "8.0.0",
+          "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
+          "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
+          "dev": true
+        },
+        "is-fullwidth-code-point": {
+          "version": "3.0.0",
+          "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
+          "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
+          "dev": true
+        },
+        "string-width": {
+          "version": "4.2.0",
+          "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.0.tgz",
+          "integrity": "sha512-zUz5JD+tgqtuDjMhwIg5uFVV3dtqZ9yQJlZVfq4I01/K5Paj5UHj7VyrQOJvzawSVlKpObApbfD0Ed6yJc+1eg==",
+          "dev": true,
+          "requires": {
+            "emoji-regex": "^8.0.0",
+            "is-fullwidth-code-point": "^3.0.0",
+            "strip-ansi": "^6.0.0"
+          }
+        },
+        "strip-ansi": {
+          "version": "6.0.0",
+          "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.0.tgz",
+          "integrity": "sha512-AuvKTrTfQNYNIctbR1K/YGTR1756GycPsg7b9bdV9Duqur4gv6aKqHXah67Z8ImS7WEz5QVcOtlfW2rZEugt6w==",
+          "dev": true,
+          "requires": {
+            "ansi-regex": "^5.0.0"
+          }
+        }
+      }
+    },
+    "cli-table3": {
+      "version": "0.6.0",
+      "resolved": "https://registry.npmjs.org/cli-table3/-/cli-table3-0.6.0.tgz",
+      "integrity": "sha512-gnB85c3MGC7Nm9I/FkiasNBOKjOiO1RNuXXarQms37q4QMpWdlbBgD/VnOStA2faG1dpXMv31RFApjX1/QdgWQ==",
+      "dev": true,
+      "requires": {
+        "colors": "^1.1.2",
+        "object-assign": "^4.1.0",
+        "string-width": "^4.2.0"
+      },
+      "dependencies": {
+        "ansi-regex": {
+          "version": "5.0.0",
+          "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.0.tgz",
+          "integrity": "sha512-bY6fj56OUQ0hU1KjFNDQuJFezqKdrAyFdIevADiqrWHwSlbmBNMHp5ak2f40Pm8JTFyM2mqxkG6ngkHO11f/lg==",
+          "dev": true
+        },
+        "emoji-regex": {
+          "version": "8.0.0",
+          "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
+          "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
+          "dev": true
+        },
+        "is-fullwidth-code-point": {
+          "version": "3.0.0",
+          "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
+          "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
+          "dev": true
+        },
+        "string-width": {
+          "version": "4.2.0",
+          "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.0.tgz",
+          "integrity": "sha512-zUz5JD+tgqtuDjMhwIg5uFVV3dtqZ9yQJlZVfq4I01/K5Paj5UHj7VyrQOJvzawSVlKpObApbfD0Ed6yJc+1eg==",
+          "dev": true,
+          "requires": {
+            "emoji-regex": "^8.0.0",
+            "is-fullwidth-code-point": "^3.0.0",
+            "strip-ansi": "^6.0.0"
+          }
+        },
+        "strip-ansi": {
+          "version": "6.0.0",
+          "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.0.tgz",
+          "integrity": "sha512-AuvKTrTfQNYNIctbR1K/YGTR1756GycPsg7b9bdV9Duqur4gv6aKqHXah67Z8ImS7WEz5QVcOtlfW2rZEugt6w==",
+          "dev": true,
+          "requires": {
+            "ansi-regex": "^5.0.0"
+          }
+        }
+      }
+    },
     "cli-width": {
       "version": "2.2.0",
       "resolved": "https://registry.npmjs.org/cli-width/-/cli-width-2.2.0.tgz",
@@ -939,6 +1092,12 @@
       "resolved": "https://registry.npmjs.org/cssfilter/-/cssfilter-0.0.10.tgz",
       "integrity": "sha1-xtJnJjKi5cg+AT5oZKQs6N79IK4="
     },
+    "csv-parse": {
+      "version": "4.14.2",
+      "resolved": "https://registry.npmjs.org/csv-parse/-/csv-parse-4.14.2.tgz",
+      "integrity": "sha512-YE2xlTKtM035/94llhgsp9qFQxGi47EkQJ1pZ+mLT/98GpIsbjkMGAb7Rmu9hNxVfYFOLf10hP+rPVqnoccLgw==",
+      "dev": true
+    },
     "dashdash": {
       "version": "1.14.1",
       "resolved": "https://registry.npmjs.org/dashdash/-/dashdash-1.14.1.tgz",
@@ -947,6 +1106,12 @@
         "assert-plus": "^1.0.0"
       }
     },
+    "dbug": {
+      "version": "0.4.2",
+      "resolved": "https://registry.npmjs.org/dbug/-/dbug-0.4.2.tgz",
+      "integrity": "sha1-MrSzEF6IYQQ6b5rHVdgOVC02WzE=",
+      "dev": true
+    },
     "debug": {
       "version": "3.1.0",
       "resolved": "http://registry.npm.taobao.org/debug/download/debug-3.1.0.tgz",
@@ -1089,6 +1254,55 @@
         "esutils": "^2.0.2"
       }
     },
+    "dom-serializer": {
+      "version": "0.2.2",
+      "resolved": "https://registry.npmjs.org/dom-serializer/-/dom-serializer-0.2.2.tgz",
+      "integrity": "sha512-2/xPb3ORsQ42nHYiSunXkDjPLBaEj/xTwUO4B7XCZQTRk7EBtTOPaygh10YAAh2OI1Qrp6NWfpAhzswj0ydt9g==",
+      "dev": true,
+      "requires": {
+        "domelementtype": "^2.0.1",
+        "entities": "^2.0.0"
+      },
+      "dependencies": {
+        "domelementtype": {
+          "version": "2.1.0",
+          "resolved": "https://registry.npmjs.org/domelementtype/-/domelementtype-2.1.0.tgz",
+          "integrity": "sha512-LsTgx/L5VpD+Q8lmsXSHW2WpA+eBlZ9HPf3erD1IoPF00/3JKHZ3BknUVA2QGDNu69ZNmyFmCWBSO45XjYKC5w==",
+          "dev": true
+        },
+        "entities": {
+          "version": "2.2.0",
+          "resolved": "https://registry.npmjs.org/entities/-/entities-2.2.0.tgz",
+          "integrity": "sha512-p92if5Nz619I0w+akJrLZH0MX0Pb5DX39XOwQTtXSdQQOaYH03S1uIQp4mhOZtAXrxq4ViO67YTiLBo2638o9A==",
+          "dev": true
+        }
+      }
+    },
+    "domelementtype": {
+      "version": "1.3.1",
+      "resolved": "https://registry.npmjs.org/domelementtype/-/domelementtype-1.3.1.tgz",
+      "integrity": "sha512-BSKB+TSpMpFI/HOxCNr1O8aMOTZ8hT3pM3GQ0w/mWRmkhEDSFJkkyzz4XQsBV44BChwGkrDfMyjVD0eA2aFV3w==",
+      "dev": true
+    },
+    "domhandler": {
+      "version": "2.4.2",
+      "resolved": "https://registry.npmjs.org/domhandler/-/domhandler-2.4.2.tgz",
+      "integrity": "sha512-JiK04h0Ht5u/80fdLMCEmV4zkNh2BcoMFBmZ/91WtYZ8qVXSKjiw7fXMgFPnHcSZgOo3XdinHvmnDUeMf5R4wA==",
+      "dev": true,
+      "requires": {
+        "domelementtype": "1"
+      }
+    },
+    "domutils": {
+      "version": "1.7.0",
+      "resolved": "https://registry.npmjs.org/domutils/-/domutils-1.7.0.tgz",
+      "integrity": "sha512-Lgd2XcJ/NjEw+7tFvfKxOzCYKZsdct5lczQ2ZaQY8Djz7pfAD3Gbp8ySJWtreII/vDlMVmxwa6pHmdxIYgttDg==",
+      "dev": true,
+      "requires": {
+        "dom-serializer": "0",
+        "domelementtype": "1"
+      }
+    },
     "dtrace-provider": {
       "version": "0.8.8",
       "resolved": "https://registry.npmjs.org/dtrace-provider/-/dtrace-provider-0.8.8.tgz",
@@ -1210,6 +1424,12 @@
         "once": "^1.4.0"
       }
     },
+    "entities": {
+      "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/entities/-/entities-1.1.2.tgz",
+      "integrity": "sha512-f2LZMYl1Fzu7YSBKg+RoROelpOaNrcGmE9AZubeDfrCEia483oW4MI4VyFd5VNHIgQ/7qm1I0wUHK1eJnn2y2w==",
+      "dev": true
+    },
     "env-variable": {
       "version": "0.0.5",
       "resolved": "http://registry.npm.taobao.org/env-variable/download/env-variable-0.0.5.tgz",
@@ -1763,6 +1983,12 @@
       "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
       "integrity": "sha1-Qa4u62XvpiJorr/qg6x9eSmbCIc="
     },
+    "eventemitter3": {
+      "version": "4.0.7",
+      "resolved": "https://registry.npmjs.org/eventemitter3/-/eventemitter3-4.0.7.tgz",
+      "integrity": "sha512-8guHBZCwKnFhYdHr2ysuRWErTwhoN2X8XELRlrRwpmfeY2jjuUN4taQMsULKUVo1K4DvZl+0pgfyoysHxvmvEw==",
+      "dev": true
+    },
     "events": {
       "version": "1.1.1",
       "resolved": "https://registry.npmjs.org/events/-/events-1.1.1.tgz",
@@ -1877,6 +2103,12 @@
       "resolved": "https://registry.npmjs.org/extsprintf/-/extsprintf-1.3.0.tgz",
       "integrity": "sha1-lpGEQOMEGnpBT4xS48V06zw+HgU="
     },
+    "faker": {
+      "version": "5.1.0",
+      "resolved": "https://registry.npmjs.org/faker/-/faker-5.1.0.tgz",
+      "integrity": "sha512-RrWKFSSA/aNLP0g3o2WW1Zez7/MnMr7xkiZmoCfAGZmdkDQZ6l2KtuXHN5XjdvpRjDl8+3vf+Rrtl06Z352+Mw==",
+      "dev": true
+    },
     "fast-deep-equal": {
       "version": "2.0.1",
       "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-2.0.1.tgz",
@@ -1922,6 +2154,18 @@
         "object-assign": "^4.0.1"
       }
     },
+    "file-type": {
+      "version": "3.9.0",
+      "resolved": "https://registry.npmjs.org/file-type/-/file-type-3.9.0.tgz",
+      "integrity": "sha1-JXoHg4TR24CHvESdEH1SpSZyuek=",
+      "dev": true
+    },
+    "filesize": {
+      "version": "6.1.0",
+      "resolved": "https://registry.npmjs.org/filesize/-/filesize-6.1.0.tgz",
+      "integrity": "sha512-LpCHtPQ3sFx67z+uh2HnSyWSLLu5Jxo21795uRDuar/EOuYWXib5EmPaGIBuSnRqH2IODiKA2k5re/K9OnN/Yg==",
+      "dev": true
+    },
     "finalhandler": {
       "version": "1.1.2",
       "resolved": "https://registry.npm.taobao.org/finalhandler/download/finalhandler-1.1.2.tgz",
@@ -2018,6 +2262,12 @@
         }
       }
     },
+    "flatted": {
+      "version": "3.1.0",
+      "resolved": "https://registry.npmjs.org/flatted/-/flatted-3.1.0.tgz",
+      "integrity": "sha512-tW+UkmtNg/jv9CSofAKvgVcO7c2URjhTdW1ZTkcAritblu8tajiYy7YisnIflEwtKssCtOxpnBRoCB7iap0/TA==",
+      "dev": true
+    },
     "follow-redirects": {
       "version": "1.5.10",
       "resolved": "https://registry.npm.taobao.org/follow-redirects/download/follow-redirects-1.5.10.tgz",
@@ -2273,6 +2523,20 @@
       "integrity": "sha1-l/I2l3vW4SVAiTD/bePuxigewEc=",
       "dev": true
     },
+    "htmlparser2": {
+      "version": "3.10.1",
+      "resolved": "https://registry.npmjs.org/htmlparser2/-/htmlparser2-3.10.1.tgz",
+      "integrity": "sha512-IgieNijUMbkDovyoKObU1DUhm1iwNYE/fuifEoEHfd1oZKZDaONBSkal7Y01shxsM49R4XaMdGez3WnF9UfiCQ==",
+      "dev": true,
+      "requires": {
+        "domelementtype": "^1.3.1",
+        "domhandler": "^2.3.0",
+        "domutils": "^1.5.1",
+        "entities": "^1.1.1",
+        "inherits": "^2.0.1",
+        "readable-stream": "^3.1.1"
+      }
+    },
     "http-aws-es": {
       "version": "6.0.0",
       "resolved": "https://registry.npmjs.org/http-aws-es/-/http-aws-es-6.0.0.tgz",
@@ -2290,6 +2554,12 @@
         "toidentifier": "1.0.0"
       }
     },
+    "http-reasons": {
+      "version": "0.1.0",
+      "resolved": "https://registry.npmjs.org/http-reasons/-/http-reasons-0.1.0.tgz",
+      "integrity": "sha1-qVPKZwB4Zp3eFCzomUAbnW6F07Q=",
+      "dev": true
+    },
     "http-signature": {
       "version": "1.2.0",
       "resolved": "https://registry.npmjs.org/http-signature/-/http-signature-1.2.0.tgz",
@@ -2305,6 +2575,22 @@
       "resolved": "https://registry.npmjs.org/http-status-codes/-/http-status-codes-1.4.0.tgz",
       "integrity": "sha512-JrT3ua+WgH8zBD3HEJYbeEgnuQaAnUeRRko/YojPAJjGmIfGD3KPU/asLdsLwKjfxOmQe5nXMQ0pt/7MyapVbQ=="
     },
+    "httpntlm": {
+      "version": "1.7.6",
+      "resolved": "https://registry.npmjs.org/httpntlm/-/httpntlm-1.7.6.tgz",
+      "integrity": "sha1-aZHoNSg2AH1nEBuD247Q+RX5BtA=",
+      "dev": true,
+      "requires": {
+        "httpreq": ">=0.4.22",
+        "underscore": "~1.7.0"
+      }
+    },
+    "httpreq": {
+      "version": "0.4.24",
+      "resolved": "https://registry.npmjs.org/httpreq/-/httpreq-0.4.24.tgz",
+      "integrity": "sha1-QzX/2CzZaWaKOUZckprGHWOTYn8=",
+      "dev": true
+    },
     "humanize-ms": {
       "version": "1.2.1",
       "resolved": "https://registry.npmjs.org/humanize-ms/-/humanize-ms-1.2.1.tgz",
@@ -2432,6 +2718,20 @@
         }
       }
     },
+    "intel": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/intel/-/intel-1.2.0.tgz",
+      "integrity": "sha1-EdEUfraz9Fgr31M3s31UFYTp5B4=",
+      "dev": true,
+      "requires": {
+        "chalk": "^1.1.0",
+        "dbug": "~0.4.2",
+        "stack-trace": "~0.0.9",
+        "strftime": "~0.10.0",
+        "symbol": "~0.3.1",
+        "utcstring": "~0.1.0"
+      }
+    },
     "invert-kv": {
       "version": "2.0.0",
       "resolved": "http://registry.npm.taobao.org/invert-kv/download/invert-kv-2.0.0.tgz",
@@ -2705,6 +3005,12 @@
       "resolved": "https://registry.npmjs.org/js-cookie/-/js-cookie-2.2.1.tgz",
       "integrity": "sha512-HvdH2LzI/EAZcUwA8+0nKNtWHqS+ZmijLA30RwZA0bo7ToCckjK5MkGhjED9KoRcXO6BaGI3I9UIzSA1FKFPOQ=="
     },
+    "js-sha512": {
+      "version": "0.8.0",
+      "resolved": "https://registry.npmjs.org/js-sha512/-/js-sha512-0.8.0.tgz",
+      "integrity": "sha512-PWsmefG6Jkodqt+ePTvBZCSMFgN7Clckjd0O7su3I0+BW2QWUTJNzjktHsztGLhncP2h8mcF9V9Y2Ha59pAViQ==",
+      "dev": true
+    },
     "js-tokens": {
       "version": "4.0.0",
       "resolved": "http://registry.npm.taobao.org/js-tokens/download/js-tokens-4.0.0.tgz",
@@ -2924,6 +3230,12 @@
       "resolved": "https://registry.npmjs.org/limiter/-/limiter-1.1.5.tgz",
       "integrity": "sha512-FWWMIEOxz3GwUI4Ts/IvgVy6LPvoMPgjMdQ185nN6psJyBJ4yOpzqm695/h5umdLJg2vW3GR5iG11MAkR2AzJA=="
     },
+    "liquid-json": {
+      "version": "0.3.1",
+      "resolved": "https://registry.npmjs.org/liquid-json/-/liquid-json-0.3.1.tgz",
+      "integrity": "sha1-kVWhgTbYprJhXl8W+aJEira1Duo=",
+      "dev": true
+    },
     "load-json-file": {
       "version": "4.0.0",
       "resolved": "http://registry.npm.taobao.org/load-json-file/download/load-json-file-4.0.0.tgz",
@@ -2964,6 +3276,12 @@
       "resolved": "https://registry.npmjs.org/lodash.clonedeep/-/lodash.clonedeep-4.5.0.tgz",
       "integrity": "sha1-4j8/nE+Pvd6HJSnBBxhXoIblzO8="
     },
+    "lodash.escaperegexp": {
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/lodash.escaperegexp/-/lodash.escaperegexp-4.1.2.tgz",
+      "integrity": "sha1-ZHYsSGGAglGKw99Mz11YhtriA0c=",
+      "dev": true
+    },
     "lodash.flattendeep": {
       "version": "4.4.0",
       "resolved": "https://registry.npm.taobao.org/lodash.flattendeep/download/lodash.flattendeep-4.4.0.tgz",
@@ -3000,6 +3318,12 @@
       "resolved": "https://registry.npmjs.org/lodash.isstring/-/lodash.isstring-4.0.1.tgz",
       "integrity": "sha1-1SfftUVuynzJu5XV2ur4i6VKVFE="
     },
+    "lodash.mergewith": {
+      "version": "4.6.2",
+      "resolved": "https://registry.npmjs.org/lodash.mergewith/-/lodash.mergewith-4.6.2.tgz",
+      "integrity": "sha512-GK3g5RPZWTRSeLSpgP8Xhra+pnjBC56q9FZYe1d5RN3TJ35dbkGy3YqBSMbyCrlbi+CM9Z3Jk5yTL7RCsqboyQ==",
+      "dev": true
+    },
     "lodash.once": {
       "version": "4.1.1",
       "resolved": "https://registry.npmjs.org/lodash.once/-/lodash.once-4.1.1.tgz",
@@ -3110,6 +3434,12 @@
         "p-defer": "^1.0.0"
       }
     },
+    "marked": {
+      "version": "1.2.7",
+      "resolved": "https://registry.npmjs.org/marked/-/marked-1.2.7.tgz",
+      "integrity": "sha512-No11hFYcXr/zkBvL6qFmAp1z6BKY3zqLMHny/JN/ey+al7qwCM2+CMBL9BOgqMxZU36fz4cCWfn2poWIf7QRXA==",
+      "dev": true
+    },
     "media-typer": {
       "version": "0.3.0",
       "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
@@ -3168,6 +3498,15 @@
       "resolved": "https://registry.npm.taobao.org/mime-db/download/mime-db-1.40.0.tgz",
       "integrity": "sha1-plBX6ZjbCQ9zKmj2wnbTh9QSbDI="
     },
+    "mime-format": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/mime-format/-/mime-format-2.0.0.tgz",
+      "integrity": "sha1-4p+IkeKE14JwJG8AUNaDS9u+EzI=",
+      "dev": true,
+      "requires": {
+        "charset": "^1.0.0"
+      }
+    },
     "mime-types": {
       "version": "2.1.24",
       "resolved": "https://registry.npm.taobao.org/mime-types/download/mime-types-2.1.24.tgz",
@@ -3367,6 +3706,120 @@
       "integrity": "sha1-D73PPhP+SZR4EoBST4uWsM3/nGE=",
       "dev": true
     },
+    "newman": {
+      "version": "5.2.2",
+      "resolved": "https://registry.npmjs.org/newman/-/newman-5.2.2.tgz",
+      "integrity": "sha512-aRkh8eeRkKBlwxwBSdYQFZVLvSNMfRDmwPUfddlYR6PwZVKwukmoJmo9QTkRmo6vehgMmt2RTVkfwIIp73X1gg==",
+      "dev": true,
+      "requires": {
+        "async": "3.2.0",
+        "chardet": "1.3.0",
+        "cli-progress": "3.8.2",
+        "cli-table3": "0.6.0",
+        "colors": "1.4.0",
+        "commander": "6.2.1",
+        "csv-parse": "4.14.2",
+        "eventemitter3": "4.0.7",
+        "filesize": "6.1.0",
+        "lodash": "4.17.20",
+        "mkdirp": "1.0.4",
+        "postman-collection": "3.6.9",
+        "postman-collection-transformer": "4.0.0",
+        "postman-request": "2.88.1-postman.28",
+        "postman-runtime": "7.26.10",
+        "pretty-ms": "7.0.1",
+        "semver": "7.3.4",
+        "serialised-error": "1.1.3",
+        "tough-cookie": "3.0.1",
+        "word-wrap": "1.2.3",
+        "xmlbuilder": "15.1.1"
+      },
+      "dependencies": {
+        "async": {
+          "version": "3.2.0",
+          "resolved": "https://registry.npmjs.org/async/-/async-3.2.0.tgz",
+          "integrity": "sha512-TR2mEZFVOj2pLStYxLht7TyfuRzaydfpxr3k9RpHIzMgw7A64dzsdqCxH1WJyQdoe8T10nDXd9wnEigmiuHIZw==",
+          "dev": true
+        },
+        "chardet": {
+          "version": "1.3.0",
+          "resolved": "https://registry.npmjs.org/chardet/-/chardet-1.3.0.tgz",
+          "integrity": "sha512-cyTQGGptIjIT+CMGT5J/0l9c6Fb+565GCFjjeUTKxUO7w3oR+FcNCMEKTn5xtVKaLFmladN7QF68IiQsv5Fbdw==",
+          "dev": true
+        },
+        "colors": {
+          "version": "1.4.0",
+          "resolved": "https://registry.npmjs.org/colors/-/colors-1.4.0.tgz",
+          "integrity": "sha512-a+UqTh4kgZg/SlGvfbzDHpgRu7AAQOmmqRHJnxhRZICKFUT91brVhNNt58CMWU9PsBbv3PDCZUHbVxuDiH2mtA==",
+          "dev": true
+        },
+        "commander": {
+          "version": "6.2.1",
+          "resolved": "https://registry.npmjs.org/commander/-/commander-6.2.1.tgz",
+          "integrity": "sha512-U7VdrJFnJgo4xjrHpTzu0yrHPGImdsmD95ZlgYSEajAn2JKzDhDTPG9kBTefmObL2w/ngeZnilk+OV9CG3d7UA==",
+          "dev": true
+        },
+        "lodash": {
+          "version": "4.17.20",
+          "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.20.tgz",
+          "integrity": "sha512-PlhdFcillOINfeV7Ni6oF1TAEayyZBoZ8bcshTHqOYJYlrqzRK5hagpagky5o4HfCzzd1TRkXPMFq6cKk9rGmA==",
+          "dev": true
+        },
+        "lru-cache": {
+          "version": "6.0.0",
+          "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-6.0.0.tgz",
+          "integrity": "sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==",
+          "dev": true,
+          "requires": {
+            "yallist": "^4.0.0"
+          }
+        },
+        "mkdirp": {
+          "version": "1.0.4",
+          "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-1.0.4.tgz",
+          "integrity": "sha512-vVqVZQyf3WLx2Shd0qJ9xuvqgAyKPLAiqITEtqW0oIUjzo3PePDd6fW9iFz30ef7Ysp/oiWqbhszeGWW2T6Gzw==",
+          "dev": true
+        },
+        "punycode": {
+          "version": "2.1.1",
+          "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.1.1.tgz",
+          "integrity": "sha512-XRsRjdf+j5ml+y/6GKHPZbrF/8p2Yga0JPtdqTIY2Xe5ohJPD9saDJJLPvp9+NSBprVvevdXZybnj2cv8OEd0A==",
+          "dev": true
+        },
+        "semver": {
+          "version": "7.3.4",
+          "resolved": "https://registry.npmjs.org/semver/-/semver-7.3.4.tgz",
+          "integrity": "sha512-tCfb2WLjqFAtXn4KEdxIhalnRtoKFN7nAwj0B3ZXCbQloV2tq5eDbcTmT68JJD3nRJq24/XgxtQKFIpQdtvmVw==",
+          "dev": true,
+          "requires": {
+            "lru-cache": "^6.0.0"
+          }
+        },
+        "tough-cookie": {
+          "version": "3.0.1",
+          "resolved": "https://registry.npmjs.org/tough-cookie/-/tough-cookie-3.0.1.tgz",
+          "integrity": "sha512-yQyJ0u4pZsv9D4clxO69OEjLWYw+jbgspjTue4lTQZLfV0c5l1VmK2y1JK8E9ahdpltPOaAThPcp5nKPUgSnsg==",
+          "dev": true,
+          "requires": {
+            "ip-regex": "^2.1.0",
+            "psl": "^1.1.28",
+            "punycode": "^2.1.1"
+          }
+        },
+        "xmlbuilder": {
+          "version": "15.1.1",
+          "resolved": "https://registry.npmjs.org/xmlbuilder/-/xmlbuilder-15.1.1.tgz",
+          "integrity": "sha512-yMqGBqtXyeN1e3TGYvgNgDVZ3j84W4cwkOXQswghol6APgZWaff9lnbvN7MHYJOiXsvGPXtjTYJEiC9J2wv9Eg==",
+          "dev": true
+        },
+        "yallist": {
+          "version": "4.0.0",
+          "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
+          "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==",
+          "dev": true
+        }
+      }
+    },
     "nice-try": {
       "version": "1.0.5",
       "resolved": "http://registry.npm.taobao.org/nice-try/download/nice-try-1.0.5.tgz",
@@ -3383,6 +3836,12 @@
         "semver": "^5.7.0"
       }
     },
+    "node-oauth1": {
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/node-oauth1/-/node-oauth1-1.3.0.tgz",
+      "integrity": "sha512-0yggixNfrA1KcBwvh/Hy2xAS1Wfs9dcg6TdFf2zN7gilcAigMdrtZ4ybrBSXBgLvGDw9V1p2MRnGBMq7XjTWLg==",
+      "dev": true
+    },
     "normalize-package-data": {
       "version": "2.5.0",
       "resolved": "http://registry.npm.taobao.org/normalize-package-data/download/normalize-package-data-2.5.0.tgz",
@@ -3478,6 +3937,12 @@
       "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
       "integrity": "sha1-IQmtx5ZYh8/AXLvUQsrIv7s2CGM="
     },
+    "object-hash": {
+      "version": "1.3.1",
+      "resolved": "https://registry.npmjs.org/object-hash/-/object-hash-1.3.1.tgz",
+      "integrity": "sha512-OSuu/pU4ENM9kmREg0BdNrUDIl1heYa4mBZacJc+vVWz4GtAwu7jO8s4AIt2aGRUTqxykpWzI3Oqnsm13tTMDA==",
+      "dev": true
+    },
     "object-keys": {
       "version": "1.1.1",
       "resolved": "https://registry.npm.taobao.org/object-keys/download/object-keys-1.1.1.tgz",
@@ -3658,6 +4123,12 @@
         "json-parse-better-errors": "^1.0.1"
       }
     },
+    "parse-ms": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/parse-ms/-/parse-ms-2.1.0.tgz",
+      "integrity": "sha512-kHt7kzLoS9VBZfUsiKjv43mr91ea+U05EyKkEtqp7vNbHxmaVuEqN7XxeEVnGrMtYOAxGrDElSi96K7EgO1zCA==",
+      "dev": true
+    },
     "parseurl": {
       "version": "1.3.3",
       "resolved": "https://registry.npm.taobao.org/parseurl/download/parseurl-1.3.3.tgz",
@@ -3812,6 +4283,383 @@
       "integrity": "sha1-KYuJ34uTsCIdv0Ia0rGx6iP8Z3c=",
       "dev": true
     },
+    "postcss": {
+      "version": "7.0.35",
+      "resolved": "https://registry.npmjs.org/postcss/-/postcss-7.0.35.tgz",
+      "integrity": "sha512-3QT8bBJeX/S5zKTTjTCIjRF3If4avAT6kqxcASlTWEtAFCb9NH0OUxNDfgZSWdP5fJnBYCMEWkIFfWeugjzYMg==",
+      "dev": true,
+      "requires": {
+        "chalk": "^2.4.2",
+        "source-map": "^0.6.1",
+        "supports-color": "^6.1.0"
+      },
+      "dependencies": {
+        "ansi-styles": {
+          "version": "3.2.1",
+          "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz",
+          "integrity": "sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==",
+          "dev": true,
+          "requires": {
+            "color-convert": "^1.9.0"
+          }
+        },
+        "chalk": {
+          "version": "2.4.2",
+          "resolved": "https://registry.npmjs.org/chalk/-/chalk-2.4.2.tgz",
+          "integrity": "sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==",
+          "dev": true,
+          "requires": {
+            "ansi-styles": "^3.2.1",
+            "escape-string-regexp": "^1.0.5",
+            "supports-color": "^5.3.0"
+          },
+          "dependencies": {
+            "supports-color": {
+              "version": "5.5.0",
+              "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
+              "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
+              "dev": true,
+              "requires": {
+                "has-flag": "^3.0.0"
+              }
+            }
+          }
+        },
+        "source-map": {
+          "version": "0.6.1",
+          "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
+          "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
+          "dev": true
+        },
+        "supports-color": {
+          "version": "6.1.0",
+          "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-6.1.0.tgz",
+          "integrity": "sha512-qe1jfm1Mg7Nq/NSh6XE24gPXROEVsWHxC1LIx//XNlD9iw7YZQGjZNjYN7xGaEG6iKdA8EtNFW6R0gjnVXp+wQ==",
+          "dev": true,
+          "requires": {
+            "has-flag": "^3.0.0"
+          }
+        }
+      }
+    },
+    "postman-collection": {
+      "version": "3.6.9",
+      "resolved": "https://registry.npmjs.org/postman-collection/-/postman-collection-3.6.9.tgz",
+      "integrity": "sha512-R3A4tM/Ll6ekkfsXqqefR2r/jSyubXc9Pa/DQSbocEUKzdT3QMMb0QR5SHNjDuR1qE+bywC5dyD2FO2+DFXJ6w==",
+      "dev": true,
+      "requires": {
+        "escape-html": "1.0.3",
+        "faker": "5.1.0",
+        "file-type": "3.9.0",
+        "http-reasons": "0.1.0",
+        "iconv-lite": "0.6.2",
+        "liquid-json": "0.3.1",
+        "lodash": "4.17.20",
+        "marked": "1.2.7",
+        "mime-format": "2.0.0",
+        "mime-types": "2.1.28",
+        "postman-url-encoder": "3.0.1",
+        "sanitize-html": "1.20.1",
+        "semver": "7.3.4",
+        "uuid": "3.4.0"
+      },
+      "dependencies": {
+        "iconv-lite": {
+          "version": "0.6.2",
+          "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.6.2.tgz",
+          "integrity": "sha512-2y91h5OpQlolefMPmUlivelittSWy0rP+oYVpn6A7GwVHNE8AWzoYOBNmlwks3LobaJxgHCYZAnyNo2GgpNRNQ==",
+          "dev": true,
+          "requires": {
+            "safer-buffer": ">= 2.1.2 < 3.0.0"
+          }
+        },
+        "lodash": {
+          "version": "4.17.20",
+          "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.20.tgz",
+          "integrity": "sha512-PlhdFcillOINfeV7Ni6oF1TAEayyZBoZ8bcshTHqOYJYlrqzRK5hagpagky5o4HfCzzd1TRkXPMFq6cKk9rGmA==",
+          "dev": true
+        },
+        "lru-cache": {
+          "version": "6.0.0",
+          "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-6.0.0.tgz",
+          "integrity": "sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==",
+          "dev": true,
+          "requires": {
+            "yallist": "^4.0.0"
+          }
+        },
+        "mime-db": {
+          "version": "1.45.0",
+          "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.45.0.tgz",
+          "integrity": "sha512-CkqLUxUk15hofLoLyljJSrukZi8mAtgd+yE5uO4tqRZsdsAJKv0O+rFMhVDRJgozy+yG6md5KwuXhD4ocIoP+w==",
+          "dev": true
+        },
+        "mime-types": {
+          "version": "2.1.28",
+          "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.28.tgz",
+          "integrity": "sha512-0TO2yJ5YHYr7M2zzT7gDU1tbwHxEUWBCLt0lscSNpcdAfFyJOVEpRYNS7EXVcTLNj/25QO8gulHC5JtTzSE2UQ==",
+          "dev": true,
+          "requires": {
+            "mime-db": "1.45.0"
+          }
+        },
+        "semver": {
+          "version": "7.3.4",
+          "resolved": "https://registry.npmjs.org/semver/-/semver-7.3.4.tgz",
+          "integrity": "sha512-tCfb2WLjqFAtXn4KEdxIhalnRtoKFN7nAwj0B3ZXCbQloV2tq5eDbcTmT68JJD3nRJq24/XgxtQKFIpQdtvmVw==",
+          "dev": true,
+          "requires": {
+            "lru-cache": "^6.0.0"
+          }
+        },
+        "uuid": {
+          "version": "3.4.0",
+          "resolved": "https://registry.npmjs.org/uuid/-/uuid-3.4.0.tgz",
+          "integrity": "sha512-HjSDRw6gZE5JMggctHBcjVak08+KEVhSIiDzFnT9S9aegmp85S/bReBVTb4QTFaRNptJ9kuYaNhnbNEOkbKb/A==",
+          "dev": true
+        },
+        "yallist": {
+          "version": "4.0.0",
+          "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
+          "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==",
+          "dev": true
+        }
+      }
+    },
+    "postman-collection-transformer": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/postman-collection-transformer/-/postman-collection-transformer-4.0.0.tgz",
+      "integrity": "sha512-AGNGiSvMR7uJpuf2PpYbteYTsE/xsutyuUTaIRCcBhw8h0PS4vyQHua15uNB+PRaNsV8wKFm30T6z23yUg0rKg==",
+      "dev": true,
+      "requires": {
+        "commander": "6.2.0",
+        "inherits": "2.0.4",
+        "intel": "1.2.0",
+        "lodash": "4.17.20",
+        "semver": "7.3.4",
+        "strip-json-comments": "3.1.1"
+      },
+      "dependencies": {
+        "commander": {
+          "version": "6.2.0",
+          "resolved": "https://registry.npmjs.org/commander/-/commander-6.2.0.tgz",
+          "integrity": "sha512-zP4jEKbe8SHzKJYQmq8Y9gYjtO/POJLgIdKgV7B9qNmABVFVc+ctqSX6iXh4mCpJfRBOabiZ2YKPg8ciDw6C+Q==",
+          "dev": true
+        },
+        "inherits": {
+          "version": "2.0.4",
+          "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
+          "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
+          "dev": true
+        },
+        "lodash": {
+          "version": "4.17.20",
+          "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.20.tgz",
+          "integrity": "sha512-PlhdFcillOINfeV7Ni6oF1TAEayyZBoZ8bcshTHqOYJYlrqzRK5hagpagky5o4HfCzzd1TRkXPMFq6cKk9rGmA==",
+          "dev": true
+        },
+        "lru-cache": {
+          "version": "6.0.0",
+          "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-6.0.0.tgz",
+          "integrity": "sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==",
+          "dev": true,
+          "requires": {
+            "yallist": "^4.0.0"
+          }
+        },
+        "semver": {
+          "version": "7.3.4",
+          "resolved": "https://registry.npmjs.org/semver/-/semver-7.3.4.tgz",
+          "integrity": "sha512-tCfb2WLjqFAtXn4KEdxIhalnRtoKFN7nAwj0B3ZXCbQloV2tq5eDbcTmT68JJD3nRJq24/XgxtQKFIpQdtvmVw==",
+          "dev": true,
+          "requires": {
+            "lru-cache": "^6.0.0"
+          }
+        },
+        "strip-json-comments": {
+          "version": "3.1.1",
+          "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
+          "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
+          "dev": true
+        },
+        "yallist": {
+          "version": "4.0.0",
+          "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
+          "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==",
+          "dev": true
+        }
+      }
+    },
+    "postman-request": {
+      "version": "2.88.1-postman.28",
+      "resolved": "https://registry.npmjs.org/postman-request/-/postman-request-2.88.1-postman.28.tgz",
+      "integrity": "sha512-QjhC9tIuHZTlYJafzCz7u+Nq57NgtOhJmt94RjcNyzpIts1QbihmAgYm0OhNoqcOIU91sNi2aYw2PCyAJR3kcQ==",
+      "dev": true,
+      "requires": {
+        "@postman/form-data": "~3.1.1",
+        "@postman/tunnel-agent": "^0.6.3",
+        "aws-sign2": "~0.7.0",
+        "aws4": "^1.8.0",
+        "brotli": "~1.3.2",
+        "caseless": "~0.12.0",
+        "combined-stream": "~1.0.6",
+        "extend": "~3.0.2",
+        "forever-agent": "~0.6.1",
+        "har-validator": "~5.1.3",
+        "http-signature": "~1.3.1",
+        "is-typedarray": "~1.0.0",
+        "isstream": "~0.1.2",
+        "json-stringify-safe": "~5.0.1",
+        "mime-types": "~2.1.19",
+        "oauth-sign": "~0.9.0",
+        "performance-now": "^2.1.0",
+        "qs": "~6.5.2",
+        "safe-buffer": "^5.1.2",
+        "stream-length": "^1.0.2",
+        "tough-cookie": "~2.5.0",
+        "uuid": "^3.3.2"
+      },
+      "dependencies": {
+        "http-signature": {
+          "version": "1.3.5",
+          "resolved": "https://registry.npmjs.org/http-signature/-/http-signature-1.3.5.tgz",
+          "integrity": "sha512-NwoTQYSJoFt34jSBbwzDHDofoA61NGXzu6wXh95o1Ry62EnmKjXb/nR/RknLeZ3G/uGwrlKNY2z7uPt+Cdl7Tw==",
+          "dev": true,
+          "requires": {
+            "assert-plus": "^1.0.0",
+            "jsprim": "^1.2.2",
+            "sshpk": "^1.14.1"
+          }
+        },
+        "qs": {
+          "version": "6.5.2",
+          "resolved": "https://registry.npmjs.org/qs/-/qs-6.5.2.tgz",
+          "integrity": "sha512-N5ZAX4/LxJmF+7wN74pUD6qAh9/wnvdQcjq9TZjevvXzSUo7bfmw91saqMjzGS2xq91/odN2dW/WOl7qQHNDGA==",
+          "dev": true
+        }
+      }
+    },
+    "postman-runtime": {
+      "version": "7.26.10",
+      "resolved": "https://registry.npmjs.org/postman-runtime/-/postman-runtime-7.26.10.tgz",
+      "integrity": "sha512-rYrSF/G0FoWHvOfbEuKVAgKYU8Nl6ow4+iYfdpRfJuTNcrHmfsdumzzdRJ8n0ZY0awAyrrtcAUr/NvSfdof3qA==",
+      "dev": true,
+      "requires": {
+        "async": "2.6.3",
+        "aws4": "1.11.0",
+        "eventemitter3": "4.0.7",
+        "handlebars": "4.7.6",
+        "http-reasons": "0.1.0",
+        "httpntlm": "1.7.6",
+        "inherits": "2.0.4",
+        "js-sha512": "0.8.0",
+        "lodash": "4.17.20",
+        "node-oauth1": "1.3.0",
+        "performance-now": "2.1.0",
+        "postman-collection": "3.6.9",
+        "postman-request": "2.88.1-postman.28",
+        "postman-sandbox": "4.0.1",
+        "postman-url-encoder": "3.0.1",
+        "resolve-from": "5.0.0",
+        "serialised-error": "1.1.3",
+        "tough-cookie": "3.0.1",
+        "uuid": "3.4.0"
+      },
+      "dependencies": {
+        "async": {
+          "version": "2.6.3",
+          "resolved": "https://registry.npmjs.org/async/-/async-2.6.3.tgz",
+          "integrity": "sha512-zflvls11DCy+dQWzTW2dzuilv8Z5X/pjfmZOWba6TNIVDm+2UDaJmXSOXlasHKfNBs8oo3M0aT50fDEWfKZjXg==",
+          "dev": true,
+          "requires": {
+            "lodash": "^4.17.14"
+          }
+        },
+        "aws4": {
+          "version": "1.11.0",
+          "resolved": "https://registry.npmjs.org/aws4/-/aws4-1.11.0.tgz",
+          "integrity": "sha512-xh1Rl34h6Fi1DC2WWKfxUTVqRsNnr6LsKz2+hfwDxQJWmrx8+c7ylaqBMcHfl1U1r2dsifOvKX3LQuLNZ+XSvA==",
+          "dev": true
+        },
+        "inherits": {
+          "version": "2.0.4",
+          "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
+          "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
+          "dev": true
+        },
+        "lodash": {
+          "version": "4.17.20",
+          "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.20.tgz",
+          "integrity": "sha512-PlhdFcillOINfeV7Ni6oF1TAEayyZBoZ8bcshTHqOYJYlrqzRK5hagpagky5o4HfCzzd1TRkXPMFq6cKk9rGmA==",
+          "dev": true
+        },
+        "punycode": {
+          "version": "2.1.1",
+          "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.1.1.tgz",
+          "integrity": "sha512-XRsRjdf+j5ml+y/6GKHPZbrF/8p2Yga0JPtdqTIY2Xe5ohJPD9saDJJLPvp9+NSBprVvevdXZybnj2cv8OEd0A==",
+          "dev": true
+        },
+        "resolve-from": {
+          "version": "5.0.0",
+          "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-5.0.0.tgz",
+          "integrity": "sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==",
+          "dev": true
+        },
+        "tough-cookie": {
+          "version": "3.0.1",
+          "resolved": "https://registry.npmjs.org/tough-cookie/-/tough-cookie-3.0.1.tgz",
+          "integrity": "sha512-yQyJ0u4pZsv9D4clxO69OEjLWYw+jbgspjTue4lTQZLfV0c5l1VmK2y1JK8E9ahdpltPOaAThPcp5nKPUgSnsg==",
+          "dev": true,
+          "requires": {
+            "ip-regex": "^2.1.0",
+            "psl": "^1.1.28",
+            "punycode": "^2.1.1"
+          }
+        },
+        "uuid": {
+          "version": "3.4.0",
+          "resolved": "https://registry.npmjs.org/uuid/-/uuid-3.4.0.tgz",
+          "integrity": "sha512-HjSDRw6gZE5JMggctHBcjVak08+KEVhSIiDzFnT9S9aegmp85S/bReBVTb4QTFaRNptJ9kuYaNhnbNEOkbKb/A==",
+          "dev": true
+        }
+      }
+    },
+    "postman-sandbox": {
+      "version": "4.0.1",
+      "resolved": "https://registry.npmjs.org/postman-sandbox/-/postman-sandbox-4.0.1.tgz",
+      "integrity": "sha512-m0Jw95y5kzSdCY3yWf/hZlkqYxRyBG5sxqiI2D/48nKiHnYLkyMSHErRDJbMj7K4tjXBXn+BKWpWnRsf+iBdlw==",
+      "dev": true,
+      "requires": {
+        "lodash": "4.17.20",
+        "teleport-javascript": "1.0.0",
+        "uvm": "2.0.1"
+      },
+      "dependencies": {
+        "lodash": {
+          "version": "4.17.20",
+          "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.20.tgz",
+          "integrity": "sha512-PlhdFcillOINfeV7Ni6oF1TAEayyZBoZ8bcshTHqOYJYlrqzRK5hagpagky5o4HfCzzd1TRkXPMFq6cKk9rGmA==",
+          "dev": true
+        }
+      }
+    },
+    "postman-url-encoder": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/postman-url-encoder/-/postman-url-encoder-3.0.1.tgz",
+      "integrity": "sha512-dMPqXnkDlstM2Eya+Gw4MIGWEan8TzldDcUKZIhZUsJ/G5JjubfQPhFhVWKzuATDMvwvrWbSjF+8VmAvbu6giw==",
+      "dev": true,
+      "requires": {
+        "punycode": "^2.1.1"
+      },
+      "dependencies": {
+        "punycode": {
+          "version": "2.1.1",
+          "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.1.1.tgz",
+          "integrity": "sha512-XRsRjdf+j5ml+y/6GKHPZbrF/8p2Yga0JPtdqTIY2Xe5ohJPD9saDJJLPvp9+NSBprVvevdXZybnj2cv8OEd0A==",
+          "dev": true
+        }
+      }
+    },
     "precond": {
       "version": "0.2.3",
       "resolved": "https://registry.npmjs.org/precond/-/precond-0.2.3.tgz",
@@ -3823,6 +4671,15 @@
       "integrity": "sha1-IZMqVJ9eUv/ZqCf1cOBL5iqX2lQ=",
       "dev": true
     },
+    "pretty-ms": {
+      "version": "7.0.1",
+      "resolved": "https://registry.npmjs.org/pretty-ms/-/pretty-ms-7.0.1.tgz",
+      "integrity": "sha512-973driJZvxiGOQ5ONsFhOF/DtzPMOMtgC11kCpUrPGMTgqp2q/1gwzCquocrN33is0VZ5GFHXZYMM9l6h67v2Q==",
+      "dev": true,
+      "requires": {
+        "parse-ms": "^2.1.0"
+      }
+    },
     "process-nextick-args": {
       "version": "2.0.0",
       "resolved": "http://registry.npm.taobao.org/process-nextick-args/download/process-nextick-args-2.0.0.tgz",
@@ -3962,6 +4819,17 @@
         "read-pkg": "^3.0.0"
       }
     },
+    "readable-stream": {
+      "version": "3.6.0",
+      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.0.tgz",
+      "integrity": "sha512-BViHy7LKeTz4oNnkcLJ+lVSL6vpiFeX6/d3oSH8zCW7UxP2onchk+vTGB143xuFjHS3deTgkKoXXymXqymiIdA==",
+      "dev": true,
+      "requires": {
+        "inherits": "^2.0.3",
+        "string_decoder": "^1.1.1",
+        "util-deprecate": "^1.0.1"
+      }
+    },
     "reconnect-core": {
       "version": "1.3.0",
       "resolved": "https://registry.npmjs.org/reconnect-core/-/reconnect-core-1.3.0.tgz",
@@ -4123,6 +4991,55 @@
       "resolved": "http://registry.npm.taobao.org/safer-buffer/download/safer-buffer-2.1.2.tgz",
       "integrity": "sha1-RPoWGwGHuVSd2Eu5GAL5vYOFzWo="
     },
+    "sanitize-html": {
+      "version": "1.20.1",
+      "resolved": "https://registry.npmjs.org/sanitize-html/-/sanitize-html-1.20.1.tgz",
+      "integrity": "sha512-txnH8TQjaQvg2Q0HY06G6CDJLVYCpbnxrdO0WN8gjCKaU5J0KbyGYhZxx5QJg3WLZ1lB7XU9kDkfrCXUozqptA==",
+      "dev": true,
+      "requires": {
+        "chalk": "^2.4.1",
+        "htmlparser2": "^3.10.0",
+        "lodash.clonedeep": "^4.5.0",
+        "lodash.escaperegexp": "^4.1.2",
+        "lodash.isplainobject": "^4.0.6",
+        "lodash.isstring": "^4.0.1",
+        "lodash.mergewith": "^4.6.1",
+        "postcss": "^7.0.5",
+        "srcset": "^1.0.0",
+        "xtend": "^4.0.1"
+      },
+      "dependencies": {
+        "ansi-styles": {
+          "version": "3.2.1",
+          "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz",
+          "integrity": "sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==",
+          "dev": true,
+          "requires": {
+            "color-convert": "^1.9.0"
+          }
+        },
+        "chalk": {
+          "version": "2.4.2",
+          "resolved": "https://registry.npmjs.org/chalk/-/chalk-2.4.2.tgz",
+          "integrity": "sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==",
+          "dev": true,
+          "requires": {
+            "ansi-styles": "^3.2.1",
+            "escape-string-regexp": "^1.0.5",
+            "supports-color": "^5.3.0"
+          }
+        },
+        "supports-color": {
+          "version": "5.5.0",
+          "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
+          "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
+          "dev": true,
+          "requires": {
+            "has-flag": "^3.0.0"
+          }
+        }
+      }
+    },
     "sax": {
       "version": "1.2.1",
       "resolved": "https://registry.npmjs.org/sax/-/sax-1.2.1.tgz",
@@ -4175,6 +5092,25 @@
         }
       }
     },
+    "serialised-error": {
+      "version": "1.1.3",
+      "resolved": "https://registry.npmjs.org/serialised-error/-/serialised-error-1.1.3.tgz",
+      "integrity": "sha512-vybp3GItaR1ZtO2nxZZo8eOo7fnVaNtP3XE2vJKgzkKR2bagCkdJ1EpYYhEMd3qu/80DwQk9KjsNSxE3fXWq0g==",
+      "dev": true,
+      "requires": {
+        "object-hash": "^1.1.2",
+        "stack-trace": "0.0.9",
+        "uuid": "^3.0.0"
+      },
+      "dependencies": {
+        "stack-trace": {
+          "version": "0.0.9",
+          "resolved": "https://registry.npmjs.org/stack-trace/-/stack-trace-0.0.9.tgz",
+          "integrity": "sha1-qPbq7KkGdMMz58Q5U/J1tFFRBpU=",
+          "dev": true
+        }
+      }
+    },
     "serve-static": {
       "version": "1.14.1",
       "resolved": "https://registry.npm.taobao.org/serve-static/download/serve-static-1.14.1.tgz",
@@ -4317,6 +5253,16 @@
       "resolved": "https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.0.3.tgz",
       "integrity": "sha1-BOaSb2YolTVPPdAVIDYzuFcpfiw="
     },
+    "srcset": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/srcset/-/srcset-1.0.0.tgz",
+      "integrity": "sha1-pWad4StC87HV6D7QPHEEb8SPQe8=",
+      "dev": true,
+      "requires": {
+        "array-uniq": "^1.0.2",
+        "number-is-nan": "^1.0.0"
+      }
+    },
     "sshpk": {
       "version": "1.16.1",
       "resolved": "https://registry.npmjs.org/sshpk/-/sshpk-1.16.1.tgz",
@@ -4384,11 +5330,34 @@
       "resolved": "https://registry.npmjs.org/stream-consume/-/stream-consume-0.1.1.tgz",
       "integrity": "sha512-tNa3hzgkjEP7XbCkbRXe1jpg+ievoa0O4SCFlMOYEscGSS4JJsckGL8swUyAa/ApGU3Ae4t6Honor4HhL+tRyg=="
     },
+    "stream-length": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/stream-length/-/stream-length-1.0.2.tgz",
+      "integrity": "sha1-gnfzy+5JpNqrz9tOL0qbXp8snwA=",
+      "dev": true,
+      "requires": {
+        "bluebird": "^2.6.2"
+      },
+      "dependencies": {
+        "bluebird": {
+          "version": "2.11.0",
+          "resolved": "https://registry.npmjs.org/bluebird/-/bluebird-2.11.0.tgz",
+          "integrity": "sha1-U0uQM8AiyVecVro7Plpcqvu2UOE=",
+          "dev": true
+        }
+      }
+    },
     "streamsearch": {
       "version": "0.1.2",
       "resolved": "https://registry.npmjs.org/streamsearch/-/streamsearch-0.1.2.tgz",
       "integrity": "sha1-gIudDlb8Jz2Am6VzOOkpkZoanxo="
     },
+    "strftime": {
+      "version": "0.10.0",
+      "resolved": "https://registry.npmjs.org/strftime/-/strftime-0.10.0.tgz",
+      "integrity": "sha1-s/D6QZKVICpaKJ9ta+n0kJphcZM=",
+      "dev": true
+    },
     "string-width": {
       "version": "2.1.1",
       "resolved": "https://registry.npm.taobao.org/string-width/download/string-width-2.1.1.tgz",
@@ -4416,6 +5385,23 @@
         }
       }
     },
+    "string_decoder": {
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.3.0.tgz",
+      "integrity": "sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==",
+      "dev": true,
+      "requires": {
+        "safe-buffer": "~5.2.0"
+      },
+      "dependencies": {
+        "safe-buffer": {
+          "version": "5.2.1",
+          "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
+          "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
+          "dev": true
+        }
+      }
+    },
     "strip-ansi": {
       "version": "3.0.1",
       "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-3.0.1.tgz",
@@ -4501,6 +5487,12 @@
         "swagger-ui-dist": "^3.18.1"
       }
     },
+    "symbol": {
+      "version": "0.3.1",
+      "resolved": "https://registry.npmjs.org/symbol/-/symbol-0.3.1.tgz",
+      "integrity": "sha1-tvmpANSWpX8CQI8iGYwQndoGMEE=",
+      "dev": true
+    },
     "symbol-observable": {
       "version": "1.0.1",
       "resolved": "https://registry.npmjs.org/symbol-observable/-/symbol-observable-1.0.1.tgz",
@@ -4573,6 +5565,12 @@
         }
       }
     },
+    "teleport-javascript": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/teleport-javascript/-/teleport-javascript-1.0.0.tgz",
+      "integrity": "sha512-j1llvWVFyEn/6XIFDfX5LAU43DXe0GCt3NfXDwJ8XpRRMkS+i50SAkonAONBy+vxwPFBd50MFU8a2uj8R/ccLg==",
+      "dev": true
+    },
     "test-exclude": {
       "version": "5.2.3",
       "resolved": "https://registry.npm.taobao.org/test-exclude/download/test-exclude-5.2.3.tgz",
@@ -4645,7 +5643,7 @@
         "joi": "^13.4.0",
         "lodash": "^4.17.15",
         "superagent": "^3.8.3",
-        "tc-core-library-js": "github:appirio-tech/tc-core-library-js#v2.6"
+        "tc-core-library-js": "github:appirio-tech/tc-core-library-js#d16413db30b1eed21c0cf426e185bedb2329ddab"
       },
       "dependencies": {
         "axios": {
@@ -4802,6 +5800,12 @@
         }
       }
     },
+    "underscore": {
+      "version": "1.7.0",
+      "resolved": "https://registry.npmjs.org/underscore/-/underscore-1.7.0.tgz",
+      "integrity": "sha1-a7rwh3UA02vjTsqlhODbn+8DUgk=",
+      "dev": true
+    },
     "unfetch": {
       "version": "4.1.0",
       "resolved": "https://registry.npmjs.org/unfetch/-/unfetch-4.1.0.tgz",
@@ -4847,6 +5851,12 @@
       "resolved": "https://registry.npmjs.org/url-join/-/url-join-4.0.1.tgz",
       "integrity": "sha512-jk1+QP6ZJqyOiuEI9AEWQfju/nB2Pw466kbA0LEZljHwKeMgd9WrAEgEGxjPDD2+TNbbb37rTyhEfrCXfuKXnA=="
     },
+    "utcstring": {
+      "version": "0.1.0",
+      "resolved": "https://registry.npmjs.org/utcstring/-/utcstring-0.1.0.tgz",
+      "integrity": "sha1-Qw/VEKt/yVtdWRDJAteYgMIIQ2s=",
+      "dev": true
+    },
     "util-deprecate": {
       "version": "1.0.2",
       "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
@@ -4862,6 +5872,15 @@
       "resolved": "http://registry.npm.taobao.org/uuid/download/uuid-3.3.2.tgz",
       "integrity": "sha1-G0r0lV6zB3xQHCOHL8ZROBFYcTE="
     },
+    "uvm": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/uvm/-/uvm-2.0.1.tgz",
+      "integrity": "sha512-bZAckfNKnr95YkTCVZWyzK+7w1c8sYJuTresCBqhiizByVRtfPqhGJpTwFUSaS2YkaVfsMoN5xZcOCNxTx9uCA==",
+      "dev": true,
+      "requires": {
+        "flatted": "3.1.0"
+      }
+    },
     "validate-npm-package-license": {
       "version": "3.0.4",
       "resolved": "http://registry.npm.taobao.org/validate-npm-package-license/download/validate-npm-package-license-3.0.4.tgz",
@@ -4985,6 +6004,12 @@
         }
       }
     },
+    "word-wrap": {
+      "version": "1.2.3",
+      "resolved": "https://registry.npmjs.org/word-wrap/-/word-wrap-1.2.3.tgz",
+      "integrity": "sha512-Hz/mrNwitNRh/HUAtM/VT/5VH+ygD6DV7mYKZAtHOrbs8U7lvPS6xf7EJKMF0uW1KJCl0H701g3ZGus+muE5vQ==",
+      "dev": true
+    },
     "wrap-ansi": {
       "version": "2.1.0",
       "resolved": "https://registry.npm.taobao.org/wrap-ansi/download/wrap-ansi-2.1.0.tgz",
diff --git a/package.json b/package.json
index dc25ef3..50a835b 100644
--- a/package.json
+++ b/package.json
@@ -18,7 +18,8 @@
     "test": "mocha --require test/prepare.js -t 20000 test/unit/*.test.js --exit",
     "e2e": "mocha --require test/prepare.js -t 20000 test/e2e/*.test.js --exit",
     "test:cov": "nyc --reporter=html --reporter=text npm test",
-    "e2e:cov": "nyc --reporter=html --reporter=text npm run e2e"
+    "e2e:cov": "nyc --reporter=html --reporter=text npm run e2e",
+    "test:newman": "node test/postman/newman.js"
   },
   "author": "TCSCODER",
   "license": "none",
@@ -26,6 +27,7 @@
   "devDependencies": {
     "chai": "^4.2.0",
     "chai-http": "^4.2.1",
+    "newman": "^5.2.2",
     "mocha": "^6.1.4",
     "mocha-prepare": "^0.1.0",
     "nyc": "^14.0.0",
diff --git a/src/controllers/ChallengeTimelineTemplateController.js b/src/controllers/ChallengeTimelineTemplateController.js
index 5b9a43f..28eb54b 100644
--- a/src/controllers/ChallengeTimelineTemplateController.js
+++ b/src/controllers/ChallengeTimelineTemplateController.js
@@ -32,7 +32,7 @@ async function createChallengeTimelineTemplate (req, res) {
  * @param {Object} res the response
  */
 async function getChallengeTimelineTemplate (req, res) {
-  const result = await service.getChallengeTimelineTemplate(req.params.challengeTypeTimelineTemplateId)
+  const result = await service.getChallengeTimelineTemplate(req.params.challengeTimelineTemplateId)
   res.send(result)
 }
 
@@ -42,7 +42,7 @@ async function getChallengeTimelineTemplate (req, res) {
  * @param {Object} res the response
  */
 async function fullyUpdateChallengeTimelineTemplate (req, res) {
-  const result = await service.fullyUpdateChallengeTimelineTemplate(req.params.challengeTypeTimelineTemplateId, req.body)
+  const result = await service.fullyUpdateChallengeTimelineTemplate(req.params.challengeTimelineTemplateId, req.body)
   res.send(result)
 }
 
@@ -52,7 +52,7 @@ async function fullyUpdateChallengeTimelineTemplate (req, res) {
  * @param {Object} res the response
  */
 async function deleteChallengeTimelineTemplate (req, res) {
-  const result = await service.deleteChallengeTimelineTemplate(req.params.challengeTypeTimelineTemplateId)
+  const result = await service.deleteChallengeTimelineTemplate(req.params.challengeTimelineTemplateId)
   res.send(result)
 }
 
diff --git a/src/init-db.js b/src/init-db.js
index 505aa8e..082e9e3 100644
--- a/src/init-db.js
+++ b/src/init-db.js
@@ -12,6 +12,10 @@ const initDB = async () => {
   for (const auditLog of auditLogs) {
     await auditLog.delete()
   }
+  const challengeTracks = await helper.scan('ChallengeTrack')
+  for (const challengeTrack of challengeTracks) {
+    await challengeTrack.delete()
+  }
   const challenges = await helper.scan('Challenge')
   for (const challenge of challenges) {
     await challenge.delete()
diff --git a/src/models/Challenge.js b/src/models/Challenge.js
index 8ddbf40..686e496 100644
--- a/src/models/Challenge.js
+++ b/src/models/Challenge.js
@@ -133,8 +133,8 @@ const schema = new Schema({
   }
 },
 {
-  // throughput: { read: 4, write: 2 },
-  throughput: 'ON_DEMAND',
+  throughput: { read: 4, write: 2 },
+  // throughput: 'ON_DEMAND',
   useDocumentTypes: true
 }
 )
diff --git a/src/models/Phase.js b/src/models/Phase.js
index 4fdf56a..5a92315 100644
--- a/src/models/Phase.js
+++ b/src/models/Phase.js
@@ -30,8 +30,8 @@ const schema = new Schema({
   }
 },
 {
-  throughput: 'ON_DEMAND'
-  // throughput: { read: 4, write: 2 }
+  // throughput: 'ON_DEMAND'
+  throughput: { read: 4, write: 2 }
 })
 
 module.exports = schema
diff --git a/test/postman/Challenge-API.postman_collection.json b/test/postman/Challenge-API.postman_collection.json
new file mode 100644
index 0000000..6cbc503
--- /dev/null
+++ b/test/postman/Challenge-API.postman_collection.json
@@ -0,0 +1,5003 @@
+{
+	"info": {
+		"_postman_id": "25388aa9-f0cf-4113-999f-a6dd1bbb0dbc",
+		"name": "Challenge-API",
+		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
+	},
+	"item": [
+		{
+			"name": "ChallengeTypes",
+			"item": [
+				{
+					"name": "create challengeType",
+					"item": [
+						{
+							"name": "create challengeType by admin",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"const iterationData = pm.iterationData",
+											"const httpCode = iterationData.get('httpCode')",
+											"pm.test(`Status code is ${httpCode}`, function () {",
+											"    pm.response.to.have.status(httpCode);",
+											"    if(httpCode === 201){",
+											"        const response = pm.response.json()",
+											"        pm.expect(response.name).to.eq(iterationData.get('name'))",
+											"        pm.expect(response.description).to.eq(iterationData.get('description'))",
+											"        pm.expect(response.isActive).to.eq(iterationData.get('isActive'))",
+											"        pm.expect(response.isTask).to.eq(iterationData.get('isTask'))",
+											"        pm.expect(response.abbreviation).to.eq(iterationData.get('abbreviation'))",
+											"        pm.environment.set(\"CHALLENGE_TYPE_ID\", response.id);",
+											"        if(!pm.environment.get(\"CHALLENGE_TYPE_ID_2\")) {",
+											"            pm.environment.set(\"CHALLENGE_TYPE_ID_2\", response.id);",
+											"        }else if(!pm.environment.get(\"CHALLENGE_TYPE_ID_3\")) {",
+											"            pm.environment.set(\"CHALLENGE_TYPE_ID_3\", response.id);",
+											"        }",
+											"    }",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "POST",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{admin_token}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"isTask\": {{isTask}},\n    \"abbreviation\": \"{{abbreviation}}\"\n}"
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-types",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-types"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "create challengeType by invalid token",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"const iterationData = pm.iterationData",
+											"const httpCode = iterationData.get('httpCode')",
+											"pm.test(`Status code is ${httpCode}`, function () {",
+											"    pm.response.to.have.status(httpCode);",
+											"    const response = pm.response.json()",
+											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "POST",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{jwtToken}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n  \n}"
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-types",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-types"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "create challengeType by error field",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"const iterationData = pm.iterationData",
+											"const httpCode = iterationData.get('httpCode')",
+											"pm.test(`Status code is ${httpCode}`, function () {",
+											"    pm.response.to.have.status(httpCode);",
+											"    const response = pm.response.json()",
+											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "POST",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{admin_token}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"isTask\": {{isTask}},\n    \"abbreviation\": \"{{abbreviation}}\"\n}"
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-types",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-types"
+									]
+								}
+							},
+							"response": []
+						}
+					]
+				},
+				{
+					"name": "fully update challengeType",
+					"item": [
+						{
+							"name": "fully update challengeType by admin",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"const iterationData = pm.iterationData",
+											"const httpCode = iterationData.get('httpCode')",
+											"pm.test(`Status code is 200`, function () {",
+											"    pm.response.to.have.status(200);",
+											"    const response = pm.response.json()",
+											"    pm.expect(response.name).to.eq(iterationData.get('name'))",
+											"    pm.expect(response.description).to.eq(iterationData.get('description'))",
+											"    pm.expect(response.isActive).to.eq(iterationData.get('isActive'))",
+											"    pm.expect(response.isTask).to.eq(iterationData.get('isTask'))",
+											"    pm.expect(response.abbreviation).to.eq(iterationData.get('abbreviation'))",
+											"    pm.environment.set(\"CHALLENGE_TYPE_ID\", response.id);",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "PUT",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{admin_token}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"isTask\": {{isTask}},\n    \"abbreviation\": \"{{abbreviation}}\"\n}"
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-types/{{CHALLENGE_TYPE_ID}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-types",
+										"{{CHALLENGE_TYPE_ID}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "fully update challengeType by not foundId",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test(`Status code is 404`, function () {",
+											"    pm.response.to.have.status(404);",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "PUT",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{admin_token}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \n}"
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-types/{{not_found_id}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-types",
+										"{{not_found_id}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "fully update challengeType by invalid token",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"const iterationData = pm.iterationData",
+											"const httpCode = iterationData.get('httpCode')",
+											"pm.test(`Status code is ${httpCode}`, function () {",
+											"    pm.response.to.have.status(httpCode);",
+											"    const response = pm.response.json()",
+											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "PUT",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{jwtToken}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n  \n}"
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-types/{{CHALLENGE_TYPE_ID}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-types",
+										"{{CHALLENGE_TYPE_ID}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "fully update challengeType by error field",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"const iterationData = pm.iterationData",
+											"const httpCode = iterationData.get('httpCode')",
+											"pm.test(`Status code is ${httpCode}`, function () {",
+											"    pm.response.to.have.status(httpCode);",
+											"    const response = pm.response.json()",
+											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "PUT",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{admin_token}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"isTask\": {{isTask}},\n    \"abbreviation\": \"{{abbreviation}}\"\n}"
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-types/{{CHALLENGE_TYPE_ID}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-types",
+										"{{CHALLENGE_TYPE_ID}}"
+									]
+								}
+							},
+							"response": []
+						}
+					]
+				},
+				{
+					"name": "partially update challengeType",
+					"item": [
+						{
+							"name": "partially update challengeType by admin",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"const iterationData = pm.iterationData",
+											"const httpCode = iterationData.get('httpCode')",
+											"pm.test(`Status code is 200`, function () {",
+											"    pm.response.to.have.status(200);",
+											"    const response = pm.response.json()",
+											"    pm.expect(response.name).to.eq(iterationData.get('name'))",
+											"    pm.expect(response.description).to.eq(iterationData.get('description'))",
+											"    pm.expect(response.isActive).to.eq(iterationData.get('isActive'))",
+											"    pm.expect(response.isTask).to.eq(iterationData.get('isTask'))",
+											"    pm.expect(response.abbreviation).to.eq(iterationData.get('abbreviation'))",
+											"    pm.environment.set(\"CHALLENGE_TYPE_ID\", response.id);",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "PATCH",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{admin_token}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"isTask\": {{isTask}},\n    \"abbreviation\": \"{{abbreviation}}\"\n}"
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-types/{{CHALLENGE_TYPE_ID}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-types",
+										"{{CHALLENGE_TYPE_ID}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "partially update challengeType by not foundId",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test(`Status code is 404`, function () {",
+											"    pm.response.to.have.status(404);",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "PATCH",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{admin_token}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \n}"
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-types/{{not_found_id}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-types",
+										"{{not_found_id}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "partially update challengeType by invalid token",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"const iterationData = pm.iterationData",
+											"const httpCode = iterationData.get('httpCode')",
+											"pm.test(`Status code is ${httpCode}`, function () {",
+											"    pm.response.to.have.status(httpCode);",
+											"    const response = pm.response.json()",
+											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "PATCH",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{jwtToken}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n  \n}"
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-types/{{CHALLENGE_TYPE_ID}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-types",
+										"{{CHALLENGE_TYPE_ID}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "partially update challengeType by error field",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"const iterationData = pm.iterationData",
+											"const httpCode = iterationData.get('httpCode')",
+											"pm.test(`Status code is ${httpCode}`, function () {",
+											"    pm.response.to.have.status(httpCode);",
+											"    const response = pm.response.json()",
+											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "PATCH",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{admin_token}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"isTask\": {{isTask}},\n    \"abbreviation\": \"{{abbreviation}}\"\n}"
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-types/{{CHALLENGE_TYPE_ID}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-types",
+										"{{CHALLENGE_TYPE_ID}}"
+									]
+								}
+							},
+							"response": []
+						}
+					],
+					"event": [
+						{
+							"listen": "prerequest",
+							"script": {
+								"type": "text/javascript",
+								"exec": [
+									""
+								]
+							}
+						},
+						{
+							"listen": "test",
+							"script": {
+								"type": "text/javascript",
+								"exec": [
+									""
+								]
+							}
+						}
+					]
+				},
+				{
+					"name": "get challengeTypes",
+					"item": [
+						{
+							"name": "get challengeType - id",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test(\"Status code is 200\", function () {",
+											"    pm.response.to.have.status(200);",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"protocolProfileBehavior": {
+								"disableBodyPruning": true
+							},
+							"request": {
+								"method": "GET",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{jwtToken}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": ""
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-types/{{CHALLENGE_TYPE_ID}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-types",
+										"{{CHALLENGE_TYPE_ID}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "get challengeType - not found",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test(\"Status code is 404\", function () {",
+											"    pm.response.to.have.status(404);",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"protocolProfileBehavior": {
+								"disableBodyPruning": true
+							},
+							"request": {
+								"method": "GET",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{jwtToken}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": ""
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-types/{{not_found_id}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-types",
+										"{{not_found_id}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "get challengeType - all",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test(`Status code is 200`, function () {",
+											"    pm.response.to.have.status(200);",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"protocolProfileBehavior": {
+								"disableBodyPruning": true
+							},
+							"request": {
+								"method": "GET",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{jwtToken}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": ""
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-types",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-types"
+									]
+								}
+							},
+							"response": []
+						}
+					],
+					"event": [
+						{
+							"listen": "prerequest",
+							"script": {
+								"type": "text/javascript",
+								"exec": [
+									""
+								]
+							}
+						},
+						{
+							"listen": "test",
+							"script": {
+								"type": "text/javascript",
+								"exec": [
+									""
+								]
+							}
+						}
+					]
+				}
+			]
+		},
+		{
+			"name": "ChallengeTracks",
+			"item": [
+				{
+					"name": "create challengeTrack",
+					"item": [
+						{
+							"name": "create challengeTrack by admin",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"const iterationData = pm.iterationData",
+											"const httpCode = iterationData.get('httpCode')",
+											"pm.test(`Status code is 201`, function () {",
+											"    pm.response.to.have.status(201);",
+											"    const response = pm.response.json()",
+											"    pm.environment.set(\"CHALLENGE_TRACK_ID\", response.id);",
+											"    pm.expect(response.name).to.eq(iterationData.get('name'))",
+											"    pm.expect(response.description).to.eq(iterationData.get('description'))",
+											"    pm.expect(response.isActive).to.eq(iterationData.get('isActive'))",
+											"    pm.expect(response.legacyId).to.eq(iterationData.get('legacyId'))",
+											"    pm.expect(response.type).to.eq(iterationData.get('type'))",
+											"    pm.expect(response.abbreviation).to.eq(iterationData.get('abbreviation'))",
+											"    if(!pm.environment.get(\"CHALLENGE_TRACK_ID_2\")) {",
+											"        pm.environment.set(\"CHALLENGE_TRACK_ID_2\", response.id);",
+											"    }",
+											"",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "POST",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{admin_token}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"legacyId\": {{legacyId}},\n    \"track\": \"{{track}}\",\n    \"abbreviation\": \"{{abbreviation}}\"\n}"
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-tracks",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-tracks"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "create challengeTrack by invalid token",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"const iterationData = pm.iterationData",
+											"const httpCode = iterationData.get('httpCode')",
+											"pm.test(`Status code is ${httpCode}`, function () {",
+											"    pm.response.to.have.status(httpCode);",
+											"    const response = pm.response.json()",
+											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "POST",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{jwtToken}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n  \n}"
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-tracks",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-tracks"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "create challengeTrack by error field",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"const iterationData = pm.iterationData",
+											"const httpCode = iterationData.get('httpCode')",
+											"pm.test(`Status code is ${httpCode}`, function () {",
+											"    pm.response.to.have.status(httpCode);",
+											"    const response = pm.response.json()",
+											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "POST",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{admin_token}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"legacyId\": {{legacyId}},\n    \"type\": \"{{type}}\",\n    \"abbreviation\": \"{{abbreviation}}\"\n}"
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-tracks",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-tracks"
+									]
+								}
+							},
+							"response": []
+						}
+					],
+					"event": [
+						{
+							"listen": "prerequest",
+							"script": {
+								"type": "text/javascript",
+								"exec": [
+									""
+								]
+							}
+						},
+						{
+							"listen": "test",
+							"script": {
+								"type": "text/javascript",
+								"exec": [
+									""
+								]
+							}
+						}
+					]
+				},
+				{
+					"name": "fully update challengeTrack",
+					"item": [
+						{
+							"name": "fully update challengeTrack by admin",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"const iterationData = pm.iterationData",
+											"const httpCode = iterationData.get('httpCode')",
+											"pm.test(`Status code is 200`, function () {",
+											"    pm.response.to.have.status(200);",
+											"    const response = pm.response.json()",
+											"    pm.expect(response.name).to.eq(iterationData.get('name'))",
+											"    pm.expect(response.description).to.eq(iterationData.get('description'))",
+											"    pm.expect(response.isActive).to.eq(iterationData.get('isActive'))",
+											"    pm.expect(response.legacyId).to.eq(iterationData.get('legacyId'))",
+											"    pm.expect(response.track).to.eq(iterationData.get('track'))",
+											"    pm.expect(response.abbreviation).to.eq(iterationData.get('abbreviation'))",
+											"    pm.environment.set(\"CHALLENGE_TRACK_ID\", response.id);",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "PUT",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{admin_token}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"legacyId\": {{legacyId}},\n    \"type\": \"{{type}}\",\n    \"abbreviation\": \"{{abbreviation}}\"\n}"
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-tracks/{{CHALLENGE_TRACK_ID}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-tracks",
+										"{{CHALLENGE_TRACK_ID}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "fully update challengeTrack by not foundId",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test(`Status code is 404`, function () {",
+											"    pm.response.to.have.status(404);",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "PUT",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{admin_token}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \n}"
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-tracks/{{not_found_id}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-tracks",
+										"{{not_found_id}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "fully update challengeTrack by invalid token",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"const iterationData = pm.iterationData",
+											"const httpCode = iterationData.get('httpCode')",
+											"pm.test(`Status code is ${httpCode}`, function () {",
+											"    pm.response.to.have.status(httpCode);",
+											"    const response = pm.response.json()",
+											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "PUT",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{jwtToken}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n  \n}"
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-tracks/{{CHALLENGE_TRACK_ID}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-tracks",
+										"{{CHALLENGE_TRACK_ID}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "fully update challengeTrack by error field",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"const iterationData = pm.iterationData",
+											"const httpCode = iterationData.get('httpCode')",
+											"pm.test(`Status code is ${httpCode}`, function () {",
+											"    pm.response.to.have.status(httpCode);",
+											"    const response = pm.response.json()",
+											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "PUT",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{admin_token}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"legacyId\": {{legacyId}},\n    \"track\": \"{{track}}\",\n    \"abbreviation\": \"{{abbreviation}}\"\n}"
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-tracks/{{CHALLENGE_TRACK_ID}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-tracks",
+										"{{CHALLENGE_TRACK_ID}}"
+									]
+								}
+							},
+							"response": []
+						}
+					],
+					"event": [
+						{
+							"listen": "prerequest",
+							"script": {
+								"type": "text/javascript",
+								"exec": [
+									""
+								]
+							}
+						},
+						{
+							"listen": "test",
+							"script": {
+								"type": "text/javascript",
+								"exec": [
+									""
+								]
+							}
+						}
+					]
+				},
+				{
+					"name": "partially update challengeTrack",
+					"item": [
+						{
+							"name": "partially update challengeTrack by admin",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"const iterationData = pm.iterationData",
+											"const httpCode = iterationData.get('httpCode')",
+											"pm.test(`Status code is 200`, function () {",
+											"    pm.response.to.have.status(200);",
+											"    const response = pm.response.json()",
+											"    pm.expect(response.name).to.eq(iterationData.get('name'))",
+											"    pm.expect(response.description).to.eq(iterationData.get('description'))",
+											"    pm.expect(response.isActive).to.eq(iterationData.get('isActive'))",
+											"    pm.expect(response.legacyId).to.eq(iterationData.get('legacyId'))",
+											"    pm.expect(response.track).to.eq(iterationData.get('track'))",
+											"    pm.expect(response.abbreviation).to.eq(iterationData.get('abbreviation'))",
+											"    pm.environment.set(\"CHALLENGE_TRACK_ID\", response.id);",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "PATCH",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{admin_token}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"legacyId\": {{legacyId}},\n    \"track\": \"{{track}}\",\n    \"abbreviation\": \"{{abbreviation}}\"\n}"
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-tracks/{{CHALLENGE_TRACK_ID}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-tracks",
+										"{{CHALLENGE_TRACK_ID}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "partially update challengeTrack by not foundId",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test(`Status code is 404`, function () {",
+											"    pm.response.to.have.status(404);",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "PATCH",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{admin_token}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \n}"
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-tracks/{{not_found_id}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-tracks",
+										"{{not_found_id}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "partially update challengeTrack by invalid token",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"const iterationData = pm.iterationData",
+											"const httpCode = iterationData.get('httpCode')",
+											"pm.test(`Status code is ${httpCode}`, function () {",
+											"    pm.response.to.have.status(httpCode);",
+											"    const response = pm.response.json()",
+											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "PATCH",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{jwtToken}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n  \n}"
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-tracks/{{CHALLENGE_TRACK_ID}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-tracks",
+										"{{CHALLENGE_TRACK_ID}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "partially update challengeTrack by error field",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"const iterationData = pm.iterationData",
+											"const httpCode = iterationData.get('httpCode')",
+											"pm.test(`Status code is ${httpCode}`, function () {",
+											"    pm.response.to.have.status(httpCode);",
+											"    const response = pm.response.json()",
+											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "PATCH",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{admin_token}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"legacyId\": {{legacyId}},\n    \"track\": \"{{track}}\",\n    \"abbreviation\": \"{{abbreviation}}\"\n}"
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-tracks/{{CHALLENGE_TRACK_ID}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-tracks",
+										"{{CHALLENGE_TRACK_ID}}"
+									]
+								}
+							},
+							"response": []
+						}
+					],
+					"event": [
+						{
+							"listen": "prerequest",
+							"script": {
+								"type": "text/javascript",
+								"exec": [
+									""
+								]
+							}
+						},
+						{
+							"listen": "test",
+							"script": {
+								"type": "text/javascript",
+								"exec": [
+									""
+								]
+							}
+						}
+					]
+				},
+				{
+					"name": "get challengeTracks",
+					"item": [
+						{
+							"name": "get challengeTrack - id",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test(\"Status code is 200\", function () {",
+											"    pm.response.to.have.status(200);",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"protocolProfileBehavior": {
+								"disableBodyPruning": true
+							},
+							"request": {
+								"method": "GET",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{jwtToken}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": ""
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-tracks/{{CHALLENGE_TRACK_ID}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-tracks",
+										"{{CHALLENGE_TRACK_ID}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "get challengeTrack - not found",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test(\"Status code is 404\", function () {",
+											"    pm.response.to.have.status(404);",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"protocolProfileBehavior": {
+								"disableBodyPruning": true
+							},
+							"request": {
+								"method": "GET",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{jwtToken}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": ""
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-tracks/{{not_found_id}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-tracks",
+										"{{not_found_id}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "get challengeTrack - all",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test(`Status code is 200`, function () {",
+											"    pm.response.to.have.status(200);",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"protocolProfileBehavior": {
+								"disableBodyPruning": true
+							},
+							"request": {
+								"method": "GET",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{jwtToken}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": ""
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-tracks",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-tracks"
+									]
+								}
+							},
+							"response": []
+						}
+					],
+					"event": [
+						{
+							"listen": "prerequest",
+							"script": {
+								"type": "text/javascript",
+								"exec": [
+									""
+								]
+							}
+						},
+						{
+							"listen": "test",
+							"script": {
+								"type": "text/javascript",
+								"exec": [
+									""
+								]
+							}
+						}
+					]
+				}
+			],
+			"event": [
+				{
+					"listen": "prerequest",
+					"script": {
+						"type": "text/javascript",
+						"exec": [
+							""
+						]
+					}
+				},
+				{
+					"listen": "test",
+					"script": {
+						"type": "text/javascript",
+						"exec": [
+							""
+						]
+					}
+				}
+			]
+		},
+		{
+			"name": "ChallengePhases",
+			"item": [
+				{
+					"name": "create challengePhase",
+					"item": [
+						{
+							"name": "create challengePhase by admin",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"const iterationData = pm.iterationData",
+											"const httpCode = iterationData.get('httpCode')",
+											"pm.test(`Status code is 201`, function () {",
+											"    pm.response.to.have.status(201);",
+											"    const response = pm.response.json()",
+											"    pm.environment.set(\"CHALLENGE_PHASE_ID\", response.id);",
+											"    pm.expect(response.name).to.eq(iterationData.get('name'))",
+											"    pm.expect(response.description).to.eq(iterationData.get('description'))",
+											"    pm.expect(response.isOpen).to.eq(iterationData.get('isOpen'))",
+											"    pm.expect(response.duration).to.eq(iterationData.get('duration'))",
+											"    if(!pm.environment.get(\"CHALLENGE_PHASE_ID_2\")) {",
+											"        pm.environment.set(\"CHALLENGE_PHASE_ID_2\", response.id);",
+											"    }",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "POST",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{admin_token}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isOpen\": {{isOpen}},\n    \"duration\": {{duration}}\n}"
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-phases",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-phases"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "create challengePhase by invalid token",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"const iterationData = pm.iterationData",
+											"const httpCode = iterationData.get('httpCode')",
+											"pm.test(`Status code is ${httpCode}`, function () {",
+											"    pm.response.to.have.status(httpCode);",
+											"    const response = pm.response.json()",
+											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "POST",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{jwtToken}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n  \n}"
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-phases",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-phases"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "create challengePhase by error field",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"const iterationData = pm.iterationData",
+											"const httpCode = iterationData.get('httpCode')",
+											"pm.test(`Status code is ${httpCode}`, function () {",
+											"    pm.response.to.have.status(httpCode);",
+											"    const response = pm.response.json()",
+											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "POST",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{admin_token}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isOpen\": {{isOpen}},\n    \"duration\": {{duration}}\n}"
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-phases",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-phases"
+									]
+								}
+							},
+							"response": []
+						}
+					],
+					"event": [
+						{
+							"listen": "prerequest",
+							"script": {
+								"type": "text/javascript",
+								"exec": [
+									""
+								]
+							}
+						},
+						{
+							"listen": "test",
+							"script": {
+								"type": "text/javascript",
+								"exec": [
+									""
+								]
+							}
+						}
+					]
+				},
+				{
+					"name": "fully update challengePhase",
+					"item": [
+						{
+							"name": "fully update challengePhase by admin",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"const iterationData = pm.iterationData",
+											"const httpCode = iterationData.get('httpCode')",
+											"pm.test(`Status code is 200`, function () {",
+											"    pm.response.to.have.status(200);",
+											"    const response = pm.response.json()",
+											"    pm.expect(response.name).to.eq(iterationData.get('name'))",
+											"    pm.expect(response.description).to.eq(iterationData.get('description'))",
+											"    pm.expect(response.isOpen).to.eq(iterationData.get('isOpen'))",
+											"    pm.expect(response.duration).to.eq(iterationData.get('duration'))",
+											"    pm.environment.set(\"CHALLENGE_PHASE_ID\", response.id);",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "PUT",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{admin_token}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isOpen\": {{isOpen}},\n    \"duration\": {{duration}}\n}"
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-phases/{{CHALLENGE_PHASE_ID}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-phases",
+										"{{CHALLENGE_PHASE_ID}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "fully update challengePhase by not foundId",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test(`Status code is 404`, function () {",
+											"    pm.response.to.have.status(404);",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "PUT",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{admin_token}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \n}"
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-phases/{{not_found_id}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-phases",
+										"{{not_found_id}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "fully update challengePhase by invalid token",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"const iterationData = pm.iterationData",
+											"const httpCode = iterationData.get('httpCode')",
+											"pm.test(`Status code is ${httpCode}`, function () {",
+											"    pm.response.to.have.status(httpCode);",
+											"    const response = pm.response.json()",
+											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "PUT",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{jwtToken}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n  \n}"
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-phases/{{CHALLENGE_PHASE_ID}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-phases",
+										"{{CHALLENGE_PHASE_ID}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "fully update challengePhase by error field",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"const iterationData = pm.iterationData",
+											"const httpCode = iterationData.get('httpCode')",
+											"pm.test(`Status code is ${httpCode}`, function () {",
+											"    pm.response.to.have.status(httpCode);",
+											"    const response = pm.response.json()",
+											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "PUT",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{admin_token}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isOpen\": {{isOpen}},\n    \"duration\": {{duration}}\n}"
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-phases/{{CHALLENGE_PHASE_ID}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-phases",
+										"{{CHALLENGE_PHASE_ID}}"
+									]
+								}
+							},
+							"response": []
+						}
+					],
+					"event": [
+						{
+							"listen": "prerequest",
+							"script": {
+								"type": "text/javascript",
+								"exec": [
+									""
+								]
+							}
+						},
+						{
+							"listen": "test",
+							"script": {
+								"type": "text/javascript",
+								"exec": [
+									""
+								]
+							}
+						}
+					]
+				},
+				{
+					"name": "partially update challengePhase",
+					"item": [
+						{
+							"name": "partially update challengePhase by admin",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"const iterationData = pm.iterationData",
+											"const httpCode = iterationData.get('httpCode')",
+											"pm.test(`Status code is 200`, function () {",
+											"    pm.response.to.have.status(200);",
+											"    const response = pm.response.json()",
+											"    pm.expect(response.name).to.eq(iterationData.get('name'))",
+											"    pm.expect(response.description).to.eq(iterationData.get('description'))",
+											"    pm.expect(response.isOpen).to.eq(iterationData.get('isOpen'))",
+											"    pm.expect(response.duration).to.eq(iterationData.get('duration'))",
+											"    pm.environment.set(\"CHALLENGE_TRACK_ID\", response.id);",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "PATCH",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{admin_token}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isOpen\": {{isOpen}},\n    \"duration\": {{duration}}\n}"
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-phases/{{CHALLENGE_PHASE_ID}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-phases",
+										"{{CHALLENGE_PHASE_ID}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "partially update challengePhase by not foundId",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test(`Status code is 404`, function () {",
+											"    pm.response.to.have.status(404);",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "PATCH",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{admin_token}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \n}"
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-phases/{{not_found_id}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-phases",
+										"{{not_found_id}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "partially update challengePhase by invalid token",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"const iterationData = pm.iterationData",
+											"const httpCode = iterationData.get('httpCode')",
+											"pm.test(`Status code is ${httpCode}`, function () {",
+											"    pm.response.to.have.status(httpCode);",
+											"    const response = pm.response.json()",
+											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "PATCH",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{jwtToken}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n  \n}"
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-phases/{{CHALLENGE_PHASE_ID}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-phases",
+										"{{CHALLENGE_PHASE_ID}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "partially update challengePhase by error field",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"const iterationData = pm.iterationData",
+											"const httpCode = iterationData.get('httpCode')",
+											"pm.test(`Status code is ${httpCode}`, function () {",
+											"    pm.response.to.have.status(httpCode);",
+											"    const response = pm.response.json()",
+											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "PATCH",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{admin_token}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isOpen\": {{isOpen}},\n    \"duration\": {{duration}}\n}"
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-phases/{{CHALLENGE_PHASE_ID}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-phases",
+										"{{CHALLENGE_PHASE_ID}}"
+									]
+								}
+							},
+							"response": []
+						}
+					],
+					"event": [
+						{
+							"listen": "prerequest",
+							"script": {
+								"type": "text/javascript",
+								"exec": [
+									""
+								]
+							}
+						},
+						{
+							"listen": "test",
+							"script": {
+								"type": "text/javascript",
+								"exec": [
+									""
+								]
+							}
+						}
+					]
+				},
+				{
+					"name": "get challengePhase",
+					"item": [
+						{
+							"name": "get challengePhase - id",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test(\"Status code is 200\", function () {",
+											"    pm.response.to.have.status(200);",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"protocolProfileBehavior": {
+								"disableBodyPruning": true
+							},
+							"request": {
+								"method": "GET",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{admin_token}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": ""
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-phases/{{CHALLENGE_PHASE_ID}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-phases",
+										"{{CHALLENGE_PHASE_ID}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "get challengePhase - not found",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test(\"Status code is 404\", function () {",
+											"    pm.response.to.have.status(404);",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"protocolProfileBehavior": {
+								"disableBodyPruning": true
+							},
+							"request": {
+								"method": "GET",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{admin_token}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": ""
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-phases/{{not_found_id}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-phases",
+										"{{not_found_id}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "get challengePhase - all",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test(`Status code is 200`, function () {",
+											"    pm.response.to.have.status(200);",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"protocolProfileBehavior": {
+								"disableBodyPruning": true
+							},
+							"request": {
+								"method": "GET",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{admin_token}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": ""
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-phases",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-phases"
+									]
+								}
+							},
+							"response": []
+						}
+					],
+					"event": [
+						{
+							"listen": "prerequest",
+							"script": {
+								"type": "text/javascript",
+								"exec": [
+									""
+								]
+							}
+						},
+						{
+							"listen": "test",
+							"script": {
+								"type": "text/javascript",
+								"exec": [
+									""
+								]
+							}
+						}
+					]
+				},
+				{
+					"name": "delete challengePhase",
+					"item": [
+						{
+							"name": "delete challengePhase - id",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test(\"Status code is 200\", function () {",
+											"    pm.response.to.have.status(200);",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "DELETE",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{admin_token}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": ""
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-phases/{{CHALLENGE_PHASE_ID}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-phases",
+										"{{CHALLENGE_PHASE_ID}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "delete challengePhase - not found",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test(\"Status code is 404\", function () {",
+											"    pm.response.to.have.status(404);",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "DELETE",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{admin_token}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": ""
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-phases/{{not_found_id}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-phases",
+										"{{not_found_id}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "delete challengePhase - invalid token",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"const iterationData = pm.iterationData",
+											"const httpCode = iterationData.get('httpCode')",
+											"pm.test(`Status code is ${httpCode}`, function () {",
+											"    pm.response.to.have.status(httpCode);",
+											"    const response = pm.response.json()",
+											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "DELETE",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{jwtToken}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": ""
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-phases/{{CHALLENGE_PHASE_ID}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-phases",
+										"{{CHALLENGE_PHASE_ID}}"
+									]
+								}
+							},
+							"response": []
+						}
+					],
+					"event": [
+						{
+							"listen": "prerequest",
+							"script": {
+								"type": "text/javascript",
+								"exec": [
+									""
+								]
+							}
+						},
+						{
+							"listen": "test",
+							"script": {
+								"type": "text/javascript",
+								"exec": [
+									""
+								]
+							}
+						}
+					]
+				}
+			],
+			"event": [
+				{
+					"listen": "prerequest",
+					"script": {
+						"type": "text/javascript",
+						"exec": [
+							""
+						]
+					}
+				},
+				{
+					"listen": "test",
+					"script": {
+						"type": "text/javascript",
+						"exec": [
+							""
+						]
+					}
+				}
+			]
+		},
+		{
+			"name": "TimelineTemplates",
+			"item": [
+				{
+					"name": "create timelineTemplate",
+					"item": [
+						{
+							"name": "create timelineTemplate by admin",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"const iterationData = pm.iterationData",
+											"const httpCode = iterationData.get('httpCode')",
+											"pm.test(`Status code is 201`, function () {",
+											"    pm.response.to.have.status(201);",
+											"    const response = pm.response.json()",
+											"    pm.environment.set(\"TIMELINE_TEMPLATE_ID\", response.id);",
+											"    pm.expect(response.name).to.eq(iterationData.get('name'))",
+											"    pm.expect(response.description).to.eq(iterationData.get('description'))",
+											"    pm.expect(response.isActive).to.eq(iterationData.get('isActive'))",
+											"    pm.expect(response.phases[0].phaseId).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_2\"))",
+											"    if(!pm.environment.get(\"TIMELINE_TEMPLATE_ID_2\")) {",
+											"        pm.environment.set(\"TIMELINE_TEMPLATE_ID_2\", response.id);",
+											"    }",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "POST",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{admin_token}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"phases\": [{\n        \"phaseId\": \"{{CHALLENGE_PHASE_ID_2}}\",\n        \"defaultDuration\": {{defaultDuration}}\n    }]\n}"
+								},
+								"url": {
+									"raw": "{{URL}}/timeline-templates",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"timeline-templates"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "create timelineTemplate by invalid token",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"const iterationData = pm.iterationData",
+											"const httpCode = iterationData.get('httpCode')",
+											"pm.test(`Status code is ${httpCode}`, function () {",
+											"    pm.response.to.have.status(httpCode);",
+											"    const response = pm.response.json()",
+											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "POST",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{jwtToken}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n  \n}"
+								},
+								"url": {
+									"raw": "{{URL}}/timeline-templates",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"timeline-templates"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "create timelineTemplate by error field",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"const iterationData = pm.iterationData",
+											"const httpCode = iterationData.get('httpCode')",
+											"pm.test(`Status code is ${httpCode}`, function () {",
+											"    pm.response.to.have.status(httpCode);",
+											"    const response = pm.response.json()",
+											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "POST",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{admin_token}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"phases\": [{\n        \"phaseId\": \"{{CHALLENGE_PHASE_ID_2}}\",\n        \"defaultDuration\": {{defaultDuration}}\n    }]\n}"
+								},
+								"url": {
+									"raw": "{{URL}}/timeline-templates",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"timeline-templates"
+									]
+								}
+							},
+							"response": []
+						}
+					],
+					"event": [
+						{
+							"listen": "prerequest",
+							"script": {
+								"type": "text/javascript",
+								"exec": [
+									""
+								]
+							}
+						},
+						{
+							"listen": "test",
+							"script": {
+								"type": "text/javascript",
+								"exec": [
+									""
+								]
+							}
+						}
+					]
+				},
+				{
+					"name": "fully update timelineTemplate",
+					"item": [
+						{
+							"name": "fully update timelineTemplate by admin",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"const iterationData = pm.iterationData",
+											"const httpCode = iterationData.get('httpCode')",
+											"pm.test(`Status code is 200`, function () {",
+											"    pm.response.to.have.status(200);",
+											"    const response = pm.response.json()",
+											"    pm.expect(response.name).to.eq(iterationData.get('name'))",
+											"    pm.expect(response.description).to.eq(iterationData.get('description'))",
+											"    pm.expect(response.isActive).to.eq(iterationData.get('isActive'))",
+											"    pm.expect(response.phases[0].phaseId).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_2\"))",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "PUT",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{admin_token}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"phases\": [{\n        \"phaseId\": \"{{CHALLENGE_PHASE_ID_2}}\",\n        \"defaultDuration\": {{defaultDuration}}\n    }]\n}"
+								},
+								"url": {
+									"raw": "{{URL}}/timeline-templates/{{TIMELINE_TEMPLATE_ID}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"timeline-templates",
+										"{{TIMELINE_TEMPLATE_ID}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "fully update timelineTemplate by not foundId",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test(`Status code is 404`, function () {",
+											"    pm.response.to.have.status(404);",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "PUT",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{admin_token}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \n}"
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-phases/{{not_found_id}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-phases",
+										"{{not_found_id}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "fully update timelineTemplate by invalid token",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"const iterationData = pm.iterationData",
+											"const httpCode = iterationData.get('httpCode')",
+											"pm.test(`Status code is ${httpCode}`, function () {",
+											"    pm.response.to.have.status(httpCode);",
+											"    const response = pm.response.json()",
+											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "PUT",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{jwtToken}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n  \n}"
+								},
+								"url": {
+									"raw": "{{URL}}/timeline-templates/{{TIMELINE_TEMPLATE_ID}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"timeline-templates",
+										"{{TIMELINE_TEMPLATE_ID}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "fully update timelineTemplate by error field",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"const iterationData = pm.iterationData",
+											"const httpCode = iterationData.get('httpCode')",
+											"pm.test(`Status code is ${httpCode}`, function () {",
+											"    pm.response.to.have.status(httpCode);",
+											"    const response = pm.response.json()",
+											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "PUT",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{admin_token}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"phases\": [{\n        \"phaseId\": \"{{CHALLENGE_PHASE_ID_2}}\",\n        \"defaultDuration\": {{defaultDuration}}\n    }]\n}"
+								},
+								"url": {
+									"raw": "{{URL}}/timeline-templates/{{TIMELINE_TEMPLATE_ID}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"timeline-templates",
+										"{{TIMELINE_TEMPLATE_ID}}"
+									]
+								}
+							},
+							"response": []
+						}
+					],
+					"event": [
+						{
+							"listen": "prerequest",
+							"script": {
+								"type": "text/javascript",
+								"exec": [
+									""
+								]
+							}
+						},
+						{
+							"listen": "test",
+							"script": {
+								"type": "text/javascript",
+								"exec": [
+									""
+								]
+							}
+						}
+					]
+				},
+				{
+					"name": "partially update timelineTemplate",
+					"item": [
+						{
+							"name": "partially update timelineTemplate by admin",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"const iterationData = pm.iterationData",
+											"const httpCode = iterationData.get('httpCode')",
+											"pm.test(`Status code is 200`, function () {",
+											"    pm.response.to.have.status(200);",
+											"    const response = pm.response.json()",
+											"    pm.expect(response.name).to.eq(iterationData.get('name'))",
+											"    pm.expect(response.description).to.eq(iterationData.get('description'))",
+											"    pm.expect(response.isActive).to.eq(iterationData.get('isActive'))",
+											"    pm.expect(response.phases[0].phaseId).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_2\"))",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "PATCH",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{admin_token}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"phases\": [{\n        \"phaseId\": \"{{CHALLENGE_PHASE_ID_2}}\",\n        \"defaultDuration\": {{defaultDuration}}\n    }]\n}"
+								},
+								"url": {
+									"raw": "{{URL}}/timeline-templates/{{TIMELINE_TEMPLATE_ID}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"timeline-templates",
+										"{{TIMELINE_TEMPLATE_ID}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "partially update timelineTemplate by not foundId",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test(`Status code is 404`, function () {",
+											"    pm.response.to.have.status(404);",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "PATCH",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{admin_token}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \n}"
+								},
+								"url": {
+									"raw": "{{URL}}/timeline-templates/{{not_found_id}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"timeline-templates",
+										"{{not_found_id}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "partially update timelineTemplate by invalid token",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"const iterationData = pm.iterationData",
+											"const httpCode = iterationData.get('httpCode')",
+											"pm.test(`Status code is ${httpCode}`, function () {",
+											"    pm.response.to.have.status(httpCode);",
+											"    const response = pm.response.json()",
+											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "PATCH",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{jwtToken}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n  \n}"
+								},
+								"url": {
+									"raw": "{{URL}}/timeline-templates/{{TIMELINE_TEMPLATE_ID}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"timeline-templates",
+										"{{TIMELINE_TEMPLATE_ID}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "partially update timelineTemplate by error field",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"const iterationData = pm.iterationData",
+											"const httpCode = iterationData.get('httpCode')",
+											"pm.test(`Status code is ${httpCode}`, function () {",
+											"    pm.response.to.have.status(httpCode);",
+											"    const response = pm.response.json()",
+											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "PATCH",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{admin_token}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"phases\": [{\n        \"phaseId\": \"{{CHALLENGE_PHASE_ID_2}}\",\n        \"defaultDuration\": {{defaultDuration}}\n    }]\n}"
+								},
+								"url": {
+									"raw": "{{URL}}/timeline-templates/{{TIMELINE_TEMPLATE_ID}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"timeline-templates",
+										"{{TIMELINE_TEMPLATE_ID}}"
+									]
+								}
+							},
+							"response": []
+						}
+					],
+					"event": [
+						{
+							"listen": "prerequest",
+							"script": {
+								"type": "text/javascript",
+								"exec": [
+									""
+								]
+							}
+						},
+						{
+							"listen": "test",
+							"script": {
+								"type": "text/javascript",
+								"exec": [
+									""
+								]
+							}
+						}
+					]
+				},
+				{
+					"name": "get timelineTemplate",
+					"item": [
+						{
+							"name": "get timelineTemplate - id",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test(\"Status code is 200\", function () {",
+											"    pm.response.to.have.status(200);",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"protocolProfileBehavior": {
+								"disableBodyPruning": true
+							},
+							"request": {
+								"method": "GET",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{admin_token}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": ""
+								},
+								"url": {
+									"raw": "{{URL}}/timeline-templates/{{TIMELINE_TEMPLATE_ID}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"timeline-templates",
+										"{{TIMELINE_TEMPLATE_ID}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "get timelineTemplate - not found",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test(\"Status code is 404\", function () {",
+											"    pm.response.to.have.status(404);",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"protocolProfileBehavior": {
+								"disableBodyPruning": true
+							},
+							"request": {
+								"method": "GET",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{admin_token}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": ""
+								},
+								"url": {
+									"raw": "{{URL}}/timeline-templates/{{not_found_id}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"timeline-templates",
+										"{{not_found_id}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "get timelineTemplate - all",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test(`Status code is 200`, function () {",
+											"    pm.response.to.have.status(200);",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"protocolProfileBehavior": {
+								"disableBodyPruning": true
+							},
+							"request": {
+								"method": "GET",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{admin_token}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": ""
+								},
+								"url": {
+									"raw": "{{URL}}/timeline-templates",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"timeline-templates"
+									]
+								}
+							},
+							"response": []
+						}
+					],
+					"event": [
+						{
+							"listen": "prerequest",
+							"script": {
+								"type": "text/javascript",
+								"exec": [
+									""
+								]
+							}
+						},
+						{
+							"listen": "test",
+							"script": {
+								"type": "text/javascript",
+								"exec": [
+									""
+								]
+							}
+						}
+					]
+				},
+				{
+					"name": "delete timelineTemplate",
+					"item": [
+						{
+							"name": "delete timelineTemplate - id",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test(\"Status code is 200\", function () {",
+											"    pm.response.to.have.status(200);",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "DELETE",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{admin_token}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": ""
+								},
+								"url": {
+									"raw": "{{URL}}/timeline-templates/{{TIMELINE_TEMPLATE_ID}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"timeline-templates",
+										"{{TIMELINE_TEMPLATE_ID}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "delete timelineTemplate - not found",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test(\"Status code is 404\", function () {",
+											"    pm.response.to.have.status(404);",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "DELETE",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{admin_token}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": ""
+								},
+								"url": {
+									"raw": "{{URL}}/timeline-templates/{{not_found_id}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"timeline-templates",
+										"{{not_found_id}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "delete timelineTemplate - invalid token",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"const iterationData = pm.iterationData",
+											"const httpCode = iterationData.get('httpCode')",
+											"pm.test(`Status code is ${httpCode}`, function () {",
+											"    pm.response.to.have.status(httpCode);",
+											"    const response = pm.response.json()",
+											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "DELETE",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{jwtToken}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": ""
+								},
+								"url": {
+									"raw": "{{URL}}/timeline-templates/{{TIMELINE_TEMPLATE_ID}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"timeline-templates",
+										"{{TIMELINE_TEMPLATE_ID}}"
+									]
+								}
+							},
+							"response": []
+						}
+					],
+					"event": [
+						{
+							"listen": "prerequest",
+							"script": {
+								"type": "text/javascript",
+								"exec": [
+									""
+								]
+							}
+						},
+						{
+							"listen": "test",
+							"script": {
+								"type": "text/javascript",
+								"exec": [
+									""
+								]
+							}
+						}
+					]
+				}
+			],
+			"event": [
+				{
+					"listen": "prerequest",
+					"script": {
+						"type": "text/javascript",
+						"exec": [
+							""
+						]
+					}
+				},
+				{
+					"listen": "test",
+					"script": {
+						"type": "text/javascript",
+						"exec": [
+							""
+						]
+					}
+				}
+			]
+		},
+		{
+			"name": "ChallengeTimelineTemplates",
+			"item": [
+				{
+					"name": "create challengeTimelineTemplate",
+					"item": [
+						{
+							"name": "create challengeTimelineTemplate by admin",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"const iterationData = pm.iterationData",
+											"const httpCode = iterationData.get('httpCode')",
+											"pm.test(`Status code is 201`, function () {",
+											"    pm.response.to.have.status(201);",
+											"    const response = pm.response.json()",
+											"    pm.environment.set(\"CHALLENGE_TIMELINE_TEMPLATE_ID\", response.id);",
+											"    pm.expect(response.isDefault).to.eq(iterationData.get('isDefault'))",
+											"    pm.expect(response.trackId).to.eq(pm.environment.get(\"CHALLENGE_TRACK_ID_2\"))",
+											"    pm.expect(response.typeId).to.eq(pm.environment.get(\"CHALLENGE_TYPE_ID_2\"))",
+											"    pm.expect(response.timelineTemplateId).to.eq(pm.environment.get(\"TIMELINE_TEMPLATE_ID_2\"))",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "POST",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{admin_token}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"isDefault\": {{isDefault}},\n    \"typeId\": \"{{CHALLENGE_TYPE_ID_2}}\",\n    \"trackId\": \"{{CHALLENGE_TRACK_ID_2}}\",\n    \"timelineTemplateId\":\"{{TIMELINE_TEMPLATE_ID_2}}\"\n}"
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-timelines",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-timelines"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "create challengeTimelineTemplate by invalid token",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"const iterationData = pm.iterationData",
+											"const httpCode = iterationData.get('httpCode')",
+											"pm.test(`Status code is ${httpCode}`, function () {",
+											"    pm.response.to.have.status(httpCode);",
+											"    const response = pm.response.json()",
+											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "POST",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{jwtToken}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n  \n}"
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-timelines",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-timelines"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "create challengeTimelineTemplate by error field",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test(\"Status code is 404\", function () {",
+											"    pm.response.to.have.status(404);",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "POST",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{admin_token}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"isDefault\": {{isDefault}},\n    \"typeId\": \"{{not_found_id}}\",\n    \"trackId\": \"{{CHALLENGE_TRACK_ID_2}}\",\n    \"timelineTemplateId\":\"{{TIMELINE_TEMPLATE_ID_2}}\"\n}"
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-timelines",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-timelines"
+									]
+								}
+							},
+							"response": []
+						}
+					],
+					"event": [
+						{
+							"listen": "prerequest",
+							"script": {
+								"type": "text/javascript",
+								"exec": [
+									""
+								]
+							}
+						},
+						{
+							"listen": "test",
+							"script": {
+								"type": "text/javascript",
+								"exec": [
+									""
+								]
+							}
+						}
+					]
+				},
+				{
+					"name": "fully update challengeTimelineTemplate",
+					"item": [
+						{
+							"name": "fully update challengeTimelineTemplate by admin",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"const iterationData = pm.iterationData",
+											"const httpCode = iterationData.get('httpCode')",
+											"pm.test(`Status code is 200`, function () {",
+											"    pm.response.to.have.status(200);",
+											"    const response = pm.response.json()",
+											"    pm.expect(response.isDefault).to.eq(iterationData.get('isDefault'))",
+											"    pm.expect(response.typeId).to.eq(pm.environment.get(\"CHALLENGE_TYPE_ID_3\"))",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "PUT",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{admin_token}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"isDefault\": {{isDefault}},\n    \"typeId\": \"{{CHALLENGE_TYPE_ID_3}}\",\n    \"trackId\": \"{{CHALLENGE_TRACK_ID_2}}\",\n    \"timelineTemplateId\":\"{{TIMELINE_TEMPLATE_ID_2}}\"\n}"
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-timelines/{{CHALLENGE_TIMELINE_TEMPLATE_ID}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-timelines",
+										"{{CHALLENGE_TIMELINE_TEMPLATE_ID}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "fully update challengeTimelineTemplate by not foundId",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test(`Status code is 404`, function () {",
+											"    pm.response.to.have.status(404);",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "PUT",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{admin_token}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \n}"
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-timelines/{{not_found_id}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-timelines",
+										"{{not_found_id}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "fully update challengeTimelineTemplate by invalid token",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"const iterationData = pm.iterationData",
+											"const httpCode = iterationData.get('httpCode')",
+											"pm.test(`Status code is ${httpCode}`, function () {",
+											"    pm.response.to.have.status(httpCode);",
+											"    const response = pm.response.json()",
+											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "PUT",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{jwtToken}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n  \n}"
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-timelines/{{CHALLENGE_TIMELINE_TEMPLATE_ID}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-timelines",
+										"{{CHALLENGE_TIMELINE_TEMPLATE_ID}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "fully update challengeTimelineTemplate by error field",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test(\"Status code is 404\", function () {",
+											"    pm.response.to.have.status(404);",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "PUT",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{admin_token}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n    \"isDefault\": {{isDefault}},\n    \"typeId\": \"{{CHALLENGE_TYPE_ID_2}}\",\n    \"trackId\": \"{{not_found_id}}\",\n    \"timelineTemplateId\":\"{{TIMELINE_TEMPLATE_ID_2}}\"\n}"
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-timelines/{{CHALLENGE_TIMELINE_TEMPLATE_ID}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-timelines",
+										"{{CHALLENGE_TIMELINE_TEMPLATE_ID}}"
+									]
+								}
+							},
+							"response": []
+						}
+					],
+					"event": [
+						{
+							"listen": "prerequest",
+							"script": {
+								"type": "text/javascript",
+								"exec": [
+									""
+								]
+							}
+						},
+						{
+							"listen": "test",
+							"script": {
+								"type": "text/javascript",
+								"exec": [
+									""
+								]
+							}
+						}
+					]
+				},
+				{
+					"name": "get challengeTimelineTemplate",
+					"item": [
+						{
+							"name": "get challengeTimelineTemplate - id",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test(\"Status code is 200\", function () {",
+											"    pm.response.to.have.status(200);",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"protocolProfileBehavior": {
+								"disableBodyPruning": true
+							},
+							"request": {
+								"method": "GET",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{admin_token}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": ""
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-timelines/{{CHALLENGE_TIMELINE_TEMPLATE_ID}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-timelines",
+										"{{CHALLENGE_TIMELINE_TEMPLATE_ID}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "get challengeTimelineTemplate - not found",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test(\"Status code is 404\", function () {",
+											"    pm.response.to.have.status(404);",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"protocolProfileBehavior": {
+								"disableBodyPruning": true
+							},
+							"request": {
+								"method": "GET",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{admin_token}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": ""
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-timelines/{{not_found_id}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-timelines",
+										"{{not_found_id}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "get challengeTimelineTemplate - all",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test(`Status code is 200`, function () {",
+											"    pm.response.to.have.status(200);",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"protocolProfileBehavior": {
+								"disableBodyPruning": true
+							},
+							"request": {
+								"method": "GET",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{admin_token}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": ""
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-timelines",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-timelines"
+									]
+								}
+							},
+							"response": []
+						}
+					],
+					"event": [
+						{
+							"listen": "prerequest",
+							"script": {
+								"type": "text/javascript",
+								"exec": [
+									""
+								]
+							}
+						},
+						{
+							"listen": "test",
+							"script": {
+								"type": "text/javascript",
+								"exec": [
+									""
+								]
+							}
+						}
+					]
+				},
+				{
+					"name": "delete challengeTimelineTemplate",
+					"item": [
+						{
+							"name": "delete challengeTimelineTemplate - id",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test(\"Status code is 200\", function () {",
+											"    pm.response.to.have.status(200);",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "DELETE",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{admin_token}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": ""
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-timelines/{{CHALLENGE_TIMELINE_TEMPLATE_ID}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-timelines",
+										"{{CHALLENGE_TIMELINE_TEMPLATE_ID}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "delete challengeTimelineTemplate - not found",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test(\"Status code is 404\", function () {",
+											"    pm.response.to.have.status(404);",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "DELETE",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{admin_token}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": ""
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-timelines/{{not_found_id}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-timelines",
+										"{{not_found_id}}"
+									]
+								}
+							},
+							"response": []
+						},
+						{
+							"name": "delete challengeTimelineTemplate - invalid token",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"const iterationData = pm.iterationData",
+											"const httpCode = iterationData.get('httpCode')",
+											"pm.test(`Status code is ${httpCode}`, function () {",
+											"    pm.response.to.have.status(httpCode);",
+											"    const response = pm.response.json()",
+											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"request": {
+								"method": "DELETE",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{jwtToken}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": ""
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-timelines/{{CHALLENGE_TIMELINE_TEMPLATE_ID}}",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-timelines",
+										"{{CHALLENGE_TIMELINE_TEMPLATE_ID}}"
+									]
+								}
+							},
+							"response": []
+						}
+					],
+					"event": [
+						{
+							"listen": "prerequest",
+							"script": {
+								"type": "text/javascript",
+								"exec": [
+									""
+								]
+							}
+						},
+						{
+							"listen": "test",
+							"script": {
+								"type": "text/javascript",
+								"exec": [
+									""
+								]
+							}
+						}
+					]
+				}
+			],
+			"event": [
+				{
+					"listen": "prerequest",
+					"script": {
+						"type": "text/javascript",
+						"exec": [
+							""
+						]
+					}
+				},
+				{
+					"listen": "test",
+					"script": {
+						"type": "text/javascript",
+						"exec": [
+							""
+						]
+					}
+				}
+			]
+		},
+		{
+			"name": "AuditLogs",
+			"item": [
+				{
+					"name": "get auditLog",
+					"item": [
+						{
+							"name": "get auditLog - all",
+							"event": [
+								{
+									"listen": "test",
+									"script": {
+										"exec": [
+											"pm.test(`Status code is 200`, function () {",
+											"    pm.response.to.have.status(200);",
+											"});"
+										],
+										"type": "text/javascript"
+									}
+								}
+							],
+							"protocolProfileBehavior": {
+								"disableBodyPruning": true
+							},
+							"request": {
+								"method": "GET",
+								"header": [
+									{
+										"key": "Accept",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Content-Type",
+										"name": "Content-Type",
+										"type": "text",
+										"value": "application/json"
+									},
+									{
+										"key": "Authorization",
+										"type": "text",
+										"value": "Bearer {{admin_token}}"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": ""
+								},
+								"url": {
+									"raw": "{{URL}}/challenge-audit-logs",
+									"host": [
+										"{{URL}}"
+									],
+									"path": [
+										"challenge-audit-logs"
+									]
+								}
+							},
+							"response": []
+						}
+					],
+					"event": [
+						{
+							"listen": "prerequest",
+							"script": {
+								"type": "text/javascript",
+								"exec": [
+									""
+								]
+							}
+						},
+						{
+							"listen": "test",
+							"script": {
+								"type": "text/javascript",
+								"exec": [
+									""
+								]
+							}
+						}
+					]
+				}
+			],
+			"event": [
+				{
+					"listen": "prerequest",
+					"script": {
+						"type": "text/javascript",
+						"exec": [
+							""
+						]
+					}
+				},
+				{
+					"listen": "test",
+					"script": {
+						"type": "text/javascript",
+						"exec": [
+							""
+						]
+					}
+				}
+			]
+		},
+		{
+			"name": "Health",
+			"item": [
+				{
+					"name": "check health",
+					"event": [
+						{
+							"listen": "test",
+							"script": {
+								"exec": [
+									"pm.test(`Status code is 200`, function () {",
+									"    pm.response.to.have.status(200);",
+									"    const response = pm.response.json()",
+									"});"
+								],
+								"type": "text/javascript"
+							}
+						}
+					],
+					"protocolProfileBehavior": {
+						"disableBodyPruning": true
+					},
+					"request": {
+						"method": "GET",
+						"header": [
+							{
+								"key": "Accept",
+								"type": "text",
+								"value": "application/json"
+							},
+							{
+								"key": "Content-Type",
+								"name": "Content-Type",
+								"type": "text",
+								"value": "application/json"
+							},
+							{
+								"key": "Authorization",
+								"type": "text",
+								"value": "Bearer {{admin_token}}"
+							}
+						],
+						"body": {
+							"mode": "raw",
+							"raw": ""
+						},
+						"url": {
+							"raw": "{{URL}}/challenges/health",
+							"host": [
+								"{{URL}}"
+							],
+							"path": [
+								"challenges",
+								"health"
+							]
+						}
+					},
+					"response": []
+				}
+			],
+			"event": [
+				{
+					"listen": "prerequest",
+					"script": {
+						"type": "text/javascript",
+						"exec": [
+							""
+						]
+					}
+				},
+				{
+					"listen": "test",
+					"script": {
+						"type": "text/javascript",
+						"exec": [
+							""
+						]
+					}
+				}
+			]
+		}
+	],
+	"event": [
+		{
+			"listen": "prerequest",
+			"script": {
+				"type": "text/javascript",
+				"exec": [
+					""
+				]
+			}
+		},
+		{
+			"listen": "test",
+			"script": {
+				"type": "text/javascript",
+				"exec": [
+					""
+				]
+			}
+		}
+	]
+}
\ No newline at end of file
diff --git a/test/postman/Challenge-API.postman_environment.json b/test/postman/Challenge-API.postman_environment.json
new file mode 100644
index 0000000..a4c5c2a
--- /dev/null
+++ b/test/postman/Challenge-API.postman_environment.json
@@ -0,0 +1,49 @@
+{
+	"id": "bee18758-6283-466b-88b5-812dff8eecf0",
+	"name": "Challenge-API",
+	"values": [
+		{
+			"key": "URL",
+			"value": "localhost:3000/v5",
+			"enabled": true
+		},
+		{
+			"key": "admin_token",
+			"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL2FwaS50b3Bjb2Rlci1kZXYuY29tIiwiaWF0IjoxNTgyNjcyMTM1LCJleHAiOjE4OTgyMDQ5MzUsImF1ZCI6Ind3dy5leGFtcGxlLmNvbSIsInN1YiI6Impyb2NrZXRAZXhhbXBsZS5jb20iLCJyb2xlcyI6WyJUb3Bjb2RlciBVc2VyIiwiQ29ubmVjdCBTdXBwb3J0IiwiYWRtaW5pc3RyYXRvciIsIkNvbm5lY3QgTWFuYWdlciIsIkNvbm5lY3QgQWRtaW4iLCJjb3BpbG90IiwiQ29ubmVjdCBDb3BpbG90IE1hbmFnZXIiXSwiaGFuZGxlIjoiVG9ueUoiLCJ1c2VySWQiOiI4NTQ3ODk5IiwiZW1haWwiOiJ0amVmdHMrZml4QHRvcGNvZGVyLmNvbSJ9.FjJlEoQa6YXsgR0ioIjc7g36C6sVa_TdUcXIqacRwC4",
+			"enabled": true
+		},
+		{
+			"key": "copilot_token",
+			"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJjb3BpbG90Il0sImlzcyI6Imh0dHBzOi8vYXBpLnRvcGNvZGVyLWRldi5jb20iLCJoYW5kbGUiOiJob2hvc2t5IiwiZXhwIjoxNzg3NzkyMzcwLCJ1c2VySWQiOiIxNjA5NjgyMyIsImlhdCI6MTU0OTc5MTc3MCwiZW1haWwiOiJlbWFpbEBkb21haW4uY29tLnoiLCJqdGkiOiJmMWU2MTNiZS1kNWI5LTQyMzEtYmFhZS1lZTlmMmQyMjcyMzQifQ.l8bivIbi-JIQyJTs1TLlCVSMBs7RBKl99U6G4ADQd4k",
+			"enabled": true
+		},
+		{
+			"key": "user_token",
+			"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJUb3Bjb2RlciBVc2VyIl0sImlzcyI6Imh0dHBzOi8vYXBpLnRvcGNvZGVyLWRldi5jb20iLCJoYW5kbGUiOiJkZW5pcyIsImV4cCI6MTg4MjgwMDE2OSwidXNlcklkIjoiMjUxMjgwIiwiaWF0IjoxNTQ5Nzk5NTY5LCJlbWFpbCI6ImVtYWlsQGRvbWFpbi5jb20ueiIsImp0aSI6IjljNDUxMWM1LWMxNjUtNGExYi04OTllLWI2NWFkMGUwMmI1NSJ9.KmHfA6EqWEOyvClC_ksb4M7EsIKqItwRepiV29AvVmU",
+			"enabled": true
+		},
+		{
+			"key": "invalid_token",
+			"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJBZG1pbmlzdHJhdG9yIl0sImlzcyI6Imh0dHBzOi8vYXBpLnRvcGNvZGVyLmNvbSIsImhhbmRsZSI6IlRvbnlKIiwiZXhwIjo1NTUzMDE5OTI1OSwidXNlcklkIjoiNDA0MzMyODgiLCJpYXQiOjE1MzAxOTg2NTksImVtYWlsIjoiYWRtaW5AdG9wY29kZXIuY29tIiwianRpIjoiYzNhYzYwOGEtNTZiZS00NWQwLThmNmEtMzFmZTk0Yjk1NjFjIn0.ePREgnJrBixP4URf1dd8FHISN2_6eRM5gjCReS0ZMK4",
+			"enabled": true
+		},
+		{
+			"key": "expired_token",
+			"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJjb3BpbG90IiwiQ29ubmVjdCBTdXBwb3J0Il0sImlzcyI6Imh0dHBzOi8vYXBpLnRvcGNvZGVyLWRldi5jb20iLCJoYW5kbGUiOiJHaG9zdGFyIiwiZXhwIjoxNTQ5ODAwMDc3LCJ1c2VySWQiOiIxNTE3NDMiLCJpYXQiOjE1NDk3OTk0NzcsImVtYWlsIjoiZW1haWxAZG9tYWluLmNvbS56IiwianRpIjoiMTJjMWMxMGItOTNlZi00NTMxLTgzMDUtYmE2NjVmYzRlMWI0In0.2n8k9pb16sE7LOLF_7mjAvEVKgggzS-wS3_8n2-R4RU",
+			"enabled": true
+		},
+		{
+			"key": "m2m_full_access_token",
+			"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL3RvcGNvZGVyLWRldi5hdXRoMC5jb20vIiwic3ViIjoiZW5qdzE4MTBlRHozWFR3U08yUm4yWTljUVRyc3BuM0JAY2xpZW50cyIsImF1ZCI6Imh0dHBzOi8vbTJtLnRvcGNvZGVyLWRldi5jb20vIiwiaWF0IjoxNTUwOTA2Mzg4LCJleHAiOjE4ODA5OTI3ODgsImF6cCI6ImVuancxODEwZUR6M1hUd1NPMlJuMlk5Y1FUcnNwbjNCIiwiaXNNYWNoaW5lIjp0cnVlLCJzY29wZSI6ImFsbDpjaGFsbGVuZ2VzIGFsbDpjaGFsbGVuZ2VfdHlwZXMgYWxsOmNoYWxsZW5nZV9zZXR0aW5ncyByZWFkOmNoYWxsZW5nZV9hdWRpdF9sb2dzIGFsbDpjaGFsbGVuZ2VfcGhhc2VzIGFsbDp0aW1lbGluZV90ZW1wbGF0ZXMgYWxsOmNoYWxsZW5nZV9hdHRhY2htZW50cyBhbGw6Y2hhbGxlbmdlX3R5cGVfdGltZWxpbmVfdGVtcGxhdGVzIiwiZ3R5IjoiY2xpZW50LWNyZWRlbnRpYWxzIn0.On-x52qiJJyaLfljBUOYCU1bHWTy9I4CLIIJVyFS-l4",
+			"enabled": true
+		},
+		{
+			"key": "not_found_id",
+			"value": "cfd7ef80-f982-4484-83ba-ad819becab8a",
+			"enabled": true
+		}
+	],
+	"_postman_variable_scope": "environment",
+	"_postman_exported_at": "2021-02-07T08:25:03.262Z",
+	"_postman_exported_using": "Postman/7.36.3"
+}
\ No newline at end of file
diff --git a/test/postman/newman.js b/test/postman/newman.js
new file mode 100644
index 0000000..cbc4046
--- /dev/null
+++ b/test/postman/newman.js
@@ -0,0 +1,347 @@
+const newman = require('newman')
+const _ = require('lodash')
+
+const challengeTypeRequests = [
+  {
+    folder: 'create challengeType by admin',
+    iterationData: require('./testData/challenge-type/create-challenge-type-by-admin.json')
+  },
+  {
+    folder: 'create challengeType by invalid token',
+    iterationData: require('./testData/challenge-type/create-challenge-type-by-invalid-token.json')
+  },
+  {
+    folder: 'create challengeType by error field',
+    iterationData: require('./testData/challenge-type/create-challenge-type-by-error-field.json')
+  },
+  {
+    folder: 'get challengeType - id'
+  },
+  {
+    folder: 'get challengeType - all'
+  },
+  {
+    folder: 'get challengeType - not found'
+  },
+  {
+    folder: 'fully update challengeType by admin',
+    iterationData: require('./testData/challenge-type/fully-update-challenge-type-by-admin.json')
+  },
+  {
+    folder: 'fully update challengeType by invalid token',
+    iterationData: require('./testData/challenge-type/fully-update-challenge-type-by-invalid-token.json')
+  },
+  {
+    folder: 'fully update challengeType by error field',
+    iterationData: require('./testData/challenge-type/fully-update-challenge-type-by-error-field.json')
+  },
+  {
+    folder: 'fully update challengeType by not foundId'
+  },
+  {
+    folder: 'partially update challengeType by admin',
+    iterationData: require('./testData/challenge-type/partially-update-challenge-type-by-admin.json')
+  },
+  {
+    folder: 'partially update challengeType by invalid token',
+    iterationData: require('./testData/challenge-type/partially-update-challenge-type-by-invalid-token.json')
+  },
+  {
+    folder: 'partially update challengeType by error field',
+    iterationData: require('./testData/challenge-type/partially-update-challenge-type-by-error-field.json')
+  },
+  {
+    folder: 'partially update challengeType by not foundId'
+  }
+]
+const challengeTrackRequests = [
+  {
+    folder: 'create challengeTrack by admin',
+    iterationData: require('./testData/challenge-track/create-challenge-track-by-admin.json')
+  },
+  {
+    folder: 'create challengeTrack by invalid token',
+    iterationData: require('./testData/challenge-track/create-challenge-track-by-invalid-token.json')
+  },
+  {
+    folder: 'create challengeTrack by error field',
+    iterationData: require('./testData/challenge-track/create-challenge-track-by-error-field.json')
+  },
+  {
+    folder: 'get challengeTrack - id'
+  },
+  {
+    folder: 'get challengeTrack - all'
+  },
+  {
+    folder: 'get challengeTrack - not found'
+  },
+  {
+    folder: 'fully update challengeTrack by admin',
+    iterationData: require('./testData/challenge-track/fully-update-challenge-track-by-admin.json')
+  },
+  {
+    folder: 'fully update challengeTrack by invalid token',
+    iterationData: require('./testData/challenge-track/fully-update-challenge-track-by-invalid-token.json')
+  },
+  {
+    folder: 'fully update challengeTrack by error field',
+    iterationData: require('./testData/challenge-track/fully-update-challenge-track-by-error-field.json')
+  },
+  {
+    folder: 'fully update challengeTrack by not foundId'
+  },
+  {
+    folder: 'partially update challengeTrack by admin',
+    iterationData: require('./testData/challenge-track/partially-update-challenge-track-by-admin.json')
+  },
+  {
+    folder: 'partially update challengeTrack by invalid token',
+    iterationData: require('./testData/challenge-track/partially-update-challenge-track-by-invalid-token.json')
+  },
+  {
+    folder: 'partially update challengeTrack by error field',
+    iterationData: require('./testData/challenge-track/partially-update-challenge-track-by-error-field.json')
+  },
+  {
+    folder: 'partially update challengeTrack by not foundId'
+  }
+]
+
+const challengePhaseRequests = [
+  {
+    folder: 'create challengePhase by admin',
+    iterationData: require('./testData/challenge-phase/create-challenge-phase-by-admin.json')
+  },
+  {
+    folder: 'create challengePhase by invalid token',
+    iterationData: require('./testData/challenge-phase/create-challenge-phase-by-invalid-token.json')
+  },
+  {
+    folder: 'create challengePhase by error field',
+    iterationData: require('./testData/challenge-phase/create-challenge-phase-by-error-field.json')
+  },
+  {
+    folder: 'get challengePhase - id'
+  },
+  {
+    folder: 'get challengePhase - all'
+  },
+  {
+    folder: 'get challengePhase - not found'
+  },
+  {
+    folder: 'fully update challengePhase by admin',
+    iterationData: require('./testData/challenge-phase/fully-update-challenge-phase-by-admin.json')
+  },
+  {
+    folder: 'fully update challengePhase by invalid token',
+    iterationData: require('./testData/challenge-phase/fully-update-challenge-phase-by-invalid-token.json')
+  },
+  {
+    folder: 'fully update challengePhase by error field',
+    iterationData: require('./testData/challenge-phase/fully-update-challenge-phase-by-error-field.json')
+  },
+  {
+    folder: 'fully update challengePhase by not foundId'
+  },
+  {
+    folder: 'partially update challengePhase by admin',
+    iterationData: require('./testData/challenge-phase/partially-update-challenge-phase-by-admin.json')
+  },
+  {
+    folder: 'partially update challengePhase by invalid token',
+    iterationData: require('./testData/challenge-phase/partially-update-challenge-phase-by-invalid-token.json')
+  },
+  {
+    folder: 'partially update challengePhase by error field',
+    iterationData: require('./testData/challenge-phase/partially-update-challenge-phase-by-error-field.json')
+  },
+  {
+    folder: 'partially update challengePhase by not foundId'
+  },
+  {
+    folder: 'delete challengePhase - id'
+  },
+  {
+    folder: 'delete challengePhase - invalid token',
+    iterationData: require('./testData/challenge-phase/delete-challenge-phase-by-invalid-token.json')
+  },
+  {
+    folder: 'delete challengePhase - not found'
+  }
+]
+
+const timelineTemplateRequests = [
+  {
+    folder: 'create timelineTemplate by admin',
+    iterationData: require('./testData/timeline-template/create-timeline-template-by-admin.json')
+  },
+  {
+    folder: 'create timelineTemplate by invalid token',
+    iterationData: require('./testData/timeline-template/create-timeline-template-by-invalid-token.json')
+  },
+  {
+    folder: 'create timelineTemplate by error field',
+    iterationData: require('./testData/timeline-template/create-timeline-template-by-error-field.json')
+  },
+  {
+    folder: 'get timelineTemplate - id'
+  },
+  {
+    folder: 'get timelineTemplate - all'
+  },
+  {
+    folder: 'get timelineTemplate - not found'
+  },
+  {
+    folder: 'fully update timelineTemplate by admin',
+    iterationData: require('./testData/timeline-template/fully-update-timeline-template-by-admin.json')
+  },
+  {
+    folder: 'fully update timelineTemplate by invalid token',
+    iterationData: require('./testData/timeline-template/fully-update-timeline-template-by-invalid-token.json')
+  },
+  {
+    folder: 'fully update timelineTemplate by error field',
+    iterationData: require('./testData/timeline-template/fully-update-timeline-template-by-error-field.json')
+  },
+  {
+    folder: 'fully update timelineTemplate by not foundId'
+  },
+  {
+    folder: 'partially update timelineTemplate by admin',
+    iterationData: require('./testData/timeline-template/partially-update-timeline-template-by-admin.json')
+  },
+  {
+    folder: 'partially update timelineTemplate by invalid token',
+    iterationData: require('./testData/timeline-template/partially-update-timeline-template-by-invalid-token.json')
+  },
+  {
+    folder: 'partially update timelineTemplate by error field',
+    iterationData: require('./testData/timeline-template/partially-update-timeline-template-by-error-field.json')
+  },
+  {
+    folder: 'partially update timelineTemplate by not foundId'
+  },
+  {
+    folder: 'delete timelineTemplate - id'
+  },
+  {
+    folder: 'delete timelineTemplate - invalid token',
+    iterationData: require('./testData/timeline-template/delete-timeline-template-by-invalid-token.json')
+  },
+  {
+    folder: 'delete timelineTemplate - not found'
+  }
+]
+
+const challengeTimelineTemplateRequests = [
+  {
+    folder: 'create challengeTimelineTemplate by admin',
+    iterationData: require('./testData/challenge-timeline-template/create-challenge-timeline-template-by-admin.json')
+  },
+  {
+    folder: 'create challengeTimelineTemplate by invalid token',
+    iterationData: require('./testData/challenge-timeline-template/create-challenge-timeline-template-by-invalid-token.json')
+  },
+  {
+    folder: 'create challengeTimelineTemplate by error field',
+    iterationData: require('./testData/challenge-timeline-template/create-challenge-timeline-template-by-error-field.json')
+  },
+  {
+    folder: 'get challengeTimelineTemplate - id'
+  },
+  {
+    folder: 'get challengeTimelineTemplate - all'
+  },
+  {
+    folder: 'get challengeTimelineTemplate - not found'
+  },
+  {
+    folder: 'fully update challengeTimelineTemplate by admin',
+    iterationData: require('./testData/challenge-timeline-template/fully-update-challenge-timeline-template-by-admin.json')
+  },
+  {
+    folder: 'fully update challengeTimelineTemplate by invalid token',
+    iterationData: require('./testData/challenge-timeline-template/fully-update-challenge-timeline-template-by-invalid-token.json')
+  },
+  {
+    folder: 'fully update challengeTimelineTemplate by error field',
+    iterationData: require('./testData/challenge-timeline-template/fully-update-challenge-timeline-template-by-error-field.json')
+  },
+  {
+    folder: 'fully update challengeTimelineTemplate by not foundId'
+  },
+  {
+    folder: 'delete challengeTimelineTemplate - id'
+  },
+  {
+    folder: 'delete challengeTimelineTemplate - invalid token',
+    iterationData: require('./testData/challenge-timeline-template/delete-challenge-timeline-template-by-invalid-token.json')
+  },
+  {
+    folder: 'delete challengeTimelineTemplate - not found'
+  }
+]
+
+const auditLogRequests = [
+  {
+    folder: 'get auditLog - all'
+  }
+]
+
+const healthRequests = [
+  {
+    folder: 'check health'
+  }
+]
+
+const requests = [
+  ...challengeTypeRequests,
+  ...challengeTrackRequests,
+  ...challengePhaseRequests,
+  ...timelineTemplateRequests,
+  ...challengeTimelineTemplateRequests,
+  ...auditLogRequests,
+  ...healthRequests
+]
+
+const options = {
+  collection: require('./Challenge-API.postman_collection.json'),
+  exportEnvironment: 'test/postman/Challenge-API.postman_environment.json',
+  reporters: 'cli'
+}
+
+const runner = (options) => new Promise((resolve, reject) => {
+  newman.run(options, function (err, results) {
+    if (err) {
+      reject(err)
+      return
+    }
+    resolve(results)
+  })
+})
+
+;(async () => {
+  for (const request of requests) {
+    delete require.cache[require.resolve('./Challenge-API.postman_environment.json')]
+    options.environment = require('./Challenge-API.postman_environment.json')
+    options.folder = request.folder
+    options.iterationData = request.iterationData
+    try {
+      const results = await runner(options)
+      if (_.get(results, 'run.failures.length', 0) > 0) {
+        process.exit(-1)
+      }
+    } catch (err) {
+      console.log(err)
+    }
+  }
+})().then(() => {
+  console.log('newman test completed!')
+  process.exit(0)
+}).catch((err) => {
+  console.log(err)
+  process.exit(1)
+})
diff --git a/test/postman/testData/challenge-phase/create-challenge-phase-by-admin.json b/test/postman/testData/challenge-phase/create-challenge-phase-by-admin.json
new file mode 100644
index 0000000..aa6e4f7
--- /dev/null
+++ b/test/postman/testData/challenge-phase/create-challenge-phase-by-admin.json
@@ -0,0 +1,14 @@
+[
+    {
+        "isOpen": true,
+        "description": "first phase",
+        "name": "start phase",
+        "duration": 1
+    },
+    {
+        "isOpen": true,
+        "description": "second phase",
+        "name": "end phase",
+        "duration": 100
+    }
+]
diff --git a/test/postman/testData/challenge-phase/create-challenge-phase-by-error-field.json b/test/postman/testData/challenge-phase/create-challenge-phase-by-error-field.json
new file mode 100644
index 0000000..9baa04a
--- /dev/null
+++ b/test/postman/testData/challenge-phase/create-challenge-phase-by-error-field.json
@@ -0,0 +1,10 @@
+[
+    {
+        "isOpen": true,
+        "description": "second phase",
+        "name": "start phase",
+        "duration": 100,
+        "httpCode": 409,
+        "message": "Phase with name: start phase already exist"
+    }
+]
diff --git a/test/postman/testData/challenge-phase/create-challenge-phase-by-invalid-token.json b/test/postman/testData/challenge-phase/create-challenge-phase-by-invalid-token.json
new file mode 100644
index 0000000..d5f9888
--- /dev/null
+++ b/test/postman/testData/challenge-phase/create-challenge-phase-by-invalid-token.json
@@ -0,0 +1,22 @@
+[
+  {
+    "jwtToken": "",
+    "httpCode": 401,
+    "message": "No token provided."
+  },
+  {
+    "jwtToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJjb3BpbG90IiwiQ29ubmVjdCBTdXBwb3J0Il0sImlzcyI6Imh0dHBzOi8vYXBpLnRvcGNvZGVyLWRldi5jb20iLCJoYW5kbGUiOiJHaG9zdGFyIiwiZXhwIjoxNTQ5ODAwMDc3LCJ1c2VySWQiOiIxNTE3NDMiLCJpYXQiOjE1NDk3OTk0NzcsImVtYWlsIjoiZW1haWxAZG9tYWluLmNvbS56IiwianRpIjoiMTJjMWMxMGItOTNlZi00NTMxLTgzMDUtYmE2NjVmYzRlMWI0In0.2n8k9pb16sE7LOLF_7mjAvEVKgggzS-wS3_8n2-R4RU",
+    "httpCode": 401,
+    "message": "Failed to authenticate token."
+  },
+  {
+    "jwtToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJBZG1pbmlzdHJhdG9yIl0sImlzcyI6Imh0dHBzOi8vYXBpLnRvcGNvZGVyLmNvbSIsImhhbmRsZSI6IlRvbnlKIiwiZXhwIjo1NTUzMDE5OTI1OSwidXNlcklkIjoiNDA0MzMyODgiLCJpYXQiOjE1MzAxOTg2NTksImVtYWlsIjoiYWRtaW5AdG9wY29kZXIuY29tIiwianRpIjoiYzNhYzYwOGEtNTZiZS00NWQwLThmNmEtMzFmZTk0Yjk1NjFjIn0.ePREgnJrBixP4URf1dd8FHISN2_6eRM5gjCReS0ZMK4",
+    "httpCode": 401,
+    "message": "Failed to authenticate token."
+  },
+  {
+    "jwtToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL3RvcGNvZGVyLWRldi5hdXRoMC5jb20vIiwic3ViIjoiZW5qdzE4MTBlRHozWFR3U08yUm4yWTljUVRyc3BuM0JAY2xpZW50cyIsImF1ZCI6Imh0dHBzOi8vbTJtLnRvcGNvZGVyLWRldi5jb20vIiwiaWF0IjoxNTUwOTA2Mzg4LCJleHAiOjE4ODA5OTI3ODgsImF6cCI6ImVuancxODEwZUR6M1hUd1NPMlJuMlk5Y1FUcnNwbjNCIiwiaXNNYWNoaW5lIjp0cnVlLCJzY29wZSI6InJlYWQ6Y2hhbGxlbmdlcyByZWFkOmNoYWxsZW5nZV90eXBlcyByZWFkOmNoYWxsZW5nZV9zZXR0aW5ncyByZWFkOmNoYWxsZW5nZV9hdWRpdF9sb2dzIHJlYWQ6Y2hhbGxlbmdlX3BoYXNlcyByZWFkOnRpbWVsaW5lX3RlbXBsYXRlcyByZWFkOmNoYWxsZW5nZV9hdHRhY2htZW50cyByZWFkOmNoYWxsZW5nZV90eXBlX3RpbWVsaW5lX3RlbXBsYXRlcyIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyJ9.BFWJGFkTaMBr22MM6jniAU38hIn7C-la_mw5vT176l0",
+    "httpCode": 403,
+    "message": "You are not allowed to perform this action!"
+  }
+]
diff --git a/test/postman/testData/challenge-phase/delete-challenge-phase-by-invalid-token.json b/test/postman/testData/challenge-phase/delete-challenge-phase-by-invalid-token.json
new file mode 100644
index 0000000..d5f9888
--- /dev/null
+++ b/test/postman/testData/challenge-phase/delete-challenge-phase-by-invalid-token.json
@@ -0,0 +1,22 @@
+[
+  {
+    "jwtToken": "",
+    "httpCode": 401,
+    "message": "No token provided."
+  },
+  {
+    "jwtToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJjb3BpbG90IiwiQ29ubmVjdCBTdXBwb3J0Il0sImlzcyI6Imh0dHBzOi8vYXBpLnRvcGNvZGVyLWRldi5jb20iLCJoYW5kbGUiOiJHaG9zdGFyIiwiZXhwIjoxNTQ5ODAwMDc3LCJ1c2VySWQiOiIxNTE3NDMiLCJpYXQiOjE1NDk3OTk0NzcsImVtYWlsIjoiZW1haWxAZG9tYWluLmNvbS56IiwianRpIjoiMTJjMWMxMGItOTNlZi00NTMxLTgzMDUtYmE2NjVmYzRlMWI0In0.2n8k9pb16sE7LOLF_7mjAvEVKgggzS-wS3_8n2-R4RU",
+    "httpCode": 401,
+    "message": "Failed to authenticate token."
+  },
+  {
+    "jwtToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJBZG1pbmlzdHJhdG9yIl0sImlzcyI6Imh0dHBzOi8vYXBpLnRvcGNvZGVyLmNvbSIsImhhbmRsZSI6IlRvbnlKIiwiZXhwIjo1NTUzMDE5OTI1OSwidXNlcklkIjoiNDA0MzMyODgiLCJpYXQiOjE1MzAxOTg2NTksImVtYWlsIjoiYWRtaW5AdG9wY29kZXIuY29tIiwianRpIjoiYzNhYzYwOGEtNTZiZS00NWQwLThmNmEtMzFmZTk0Yjk1NjFjIn0.ePREgnJrBixP4URf1dd8FHISN2_6eRM5gjCReS0ZMK4",
+    "httpCode": 401,
+    "message": "Failed to authenticate token."
+  },
+  {
+    "jwtToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL3RvcGNvZGVyLWRldi5hdXRoMC5jb20vIiwic3ViIjoiZW5qdzE4MTBlRHozWFR3U08yUm4yWTljUVRyc3BuM0JAY2xpZW50cyIsImF1ZCI6Imh0dHBzOi8vbTJtLnRvcGNvZGVyLWRldi5jb20vIiwiaWF0IjoxNTUwOTA2Mzg4LCJleHAiOjE4ODA5OTI3ODgsImF6cCI6ImVuancxODEwZUR6M1hUd1NPMlJuMlk5Y1FUcnNwbjNCIiwiaXNNYWNoaW5lIjp0cnVlLCJzY29wZSI6InJlYWQ6Y2hhbGxlbmdlcyByZWFkOmNoYWxsZW5nZV90eXBlcyByZWFkOmNoYWxsZW5nZV9zZXR0aW5ncyByZWFkOmNoYWxsZW5nZV9hdWRpdF9sb2dzIHJlYWQ6Y2hhbGxlbmdlX3BoYXNlcyByZWFkOnRpbWVsaW5lX3RlbXBsYXRlcyByZWFkOmNoYWxsZW5nZV9hdHRhY2htZW50cyByZWFkOmNoYWxsZW5nZV90eXBlX3RpbWVsaW5lX3RlbXBsYXRlcyIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyJ9.BFWJGFkTaMBr22MM6jniAU38hIn7C-la_mw5vT176l0",
+    "httpCode": 403,
+    "message": "You are not allowed to perform this action!"
+  }
+]
diff --git a/test/postman/testData/challenge-phase/fully-update-challenge-phase-by-admin.json b/test/postman/testData/challenge-phase/fully-update-challenge-phase-by-admin.json
new file mode 100644
index 0000000..f6ef53f
--- /dev/null
+++ b/test/postman/testData/challenge-phase/fully-update-challenge-phase-by-admin.json
@@ -0,0 +1,9 @@
+[
+    {
+        "isOpen": true,
+        "description": "second phase",
+        "name": "end phase 2",
+        "duration": 200,
+        "httpCode": 200
+    }
+]
diff --git a/test/postman/testData/challenge-phase/fully-update-challenge-phase-by-error-field.json b/test/postman/testData/challenge-phase/fully-update-challenge-phase-by-error-field.json
new file mode 100644
index 0000000..2566586
--- /dev/null
+++ b/test/postman/testData/challenge-phase/fully-update-challenge-phase-by-error-field.json
@@ -0,0 +1,12 @@
+[
+    {
+        "isOpen": true,
+        "description": "second phase223",
+        "name": "start phase",
+        "duration": 100,
+        "httpCode": 409,
+        "message": "Phase with name: start phase already exist"
+    }
+]
+
+
diff --git a/test/postman/testData/challenge-phase/fully-update-challenge-phase-by-invalid-token.json b/test/postman/testData/challenge-phase/fully-update-challenge-phase-by-invalid-token.json
new file mode 100644
index 0000000..d5f9888
--- /dev/null
+++ b/test/postman/testData/challenge-phase/fully-update-challenge-phase-by-invalid-token.json
@@ -0,0 +1,22 @@
+[
+  {
+    "jwtToken": "",
+    "httpCode": 401,
+    "message": "No token provided."
+  },
+  {
+    "jwtToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJjb3BpbG90IiwiQ29ubmVjdCBTdXBwb3J0Il0sImlzcyI6Imh0dHBzOi8vYXBpLnRvcGNvZGVyLWRldi5jb20iLCJoYW5kbGUiOiJHaG9zdGFyIiwiZXhwIjoxNTQ5ODAwMDc3LCJ1c2VySWQiOiIxNTE3NDMiLCJpYXQiOjE1NDk3OTk0NzcsImVtYWlsIjoiZW1haWxAZG9tYWluLmNvbS56IiwianRpIjoiMTJjMWMxMGItOTNlZi00NTMxLTgzMDUtYmE2NjVmYzRlMWI0In0.2n8k9pb16sE7LOLF_7mjAvEVKgggzS-wS3_8n2-R4RU",
+    "httpCode": 401,
+    "message": "Failed to authenticate token."
+  },
+  {
+    "jwtToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJBZG1pbmlzdHJhdG9yIl0sImlzcyI6Imh0dHBzOi8vYXBpLnRvcGNvZGVyLmNvbSIsImhhbmRsZSI6IlRvbnlKIiwiZXhwIjo1NTUzMDE5OTI1OSwidXNlcklkIjoiNDA0MzMyODgiLCJpYXQiOjE1MzAxOTg2NTksImVtYWlsIjoiYWRtaW5AdG9wY29kZXIuY29tIiwianRpIjoiYzNhYzYwOGEtNTZiZS00NWQwLThmNmEtMzFmZTk0Yjk1NjFjIn0.ePREgnJrBixP4URf1dd8FHISN2_6eRM5gjCReS0ZMK4",
+    "httpCode": 401,
+    "message": "Failed to authenticate token."
+  },
+  {
+    "jwtToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL3RvcGNvZGVyLWRldi5hdXRoMC5jb20vIiwic3ViIjoiZW5qdzE4MTBlRHozWFR3U08yUm4yWTljUVRyc3BuM0JAY2xpZW50cyIsImF1ZCI6Imh0dHBzOi8vbTJtLnRvcGNvZGVyLWRldi5jb20vIiwiaWF0IjoxNTUwOTA2Mzg4LCJleHAiOjE4ODA5OTI3ODgsImF6cCI6ImVuancxODEwZUR6M1hUd1NPMlJuMlk5Y1FUcnNwbjNCIiwiaXNNYWNoaW5lIjp0cnVlLCJzY29wZSI6InJlYWQ6Y2hhbGxlbmdlcyByZWFkOmNoYWxsZW5nZV90eXBlcyByZWFkOmNoYWxsZW5nZV9zZXR0aW5ncyByZWFkOmNoYWxsZW5nZV9hdWRpdF9sb2dzIHJlYWQ6Y2hhbGxlbmdlX3BoYXNlcyByZWFkOnRpbWVsaW5lX3RlbXBsYXRlcyByZWFkOmNoYWxsZW5nZV9hdHRhY2htZW50cyByZWFkOmNoYWxsZW5nZV90eXBlX3RpbWVsaW5lX3RlbXBsYXRlcyIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyJ9.BFWJGFkTaMBr22MM6jniAU38hIn7C-la_mw5vT176l0",
+    "httpCode": 403,
+    "message": "You are not allowed to perform this action!"
+  }
+]
diff --git a/test/postman/testData/challenge-phase/partially-update-challenge-phase-by-admin.json b/test/postman/testData/challenge-phase/partially-update-challenge-phase-by-admin.json
new file mode 100644
index 0000000..0bb7f00
--- /dev/null
+++ b/test/postman/testData/challenge-phase/partially-update-challenge-phase-by-admin.json
@@ -0,0 +1,10 @@
+[
+    {
+        "isOpen": true,
+        "description": "second phase 3",
+        "name": "end phase 3",
+        "duration": 200,
+        "httpCode": 200
+    }
+]
+
diff --git a/test/postman/testData/challenge-phase/partially-update-challenge-phase-by-error-field.json b/test/postman/testData/challenge-phase/partially-update-challenge-phase-by-error-field.json
new file mode 100644
index 0000000..e4e9cd2
--- /dev/null
+++ b/test/postman/testData/challenge-phase/partially-update-challenge-phase-by-error-field.json
@@ -0,0 +1,13 @@
+[
+    {
+        "isOpen": true,
+        "description": "second phase333",
+        "name": "start phase",
+        "duration": 100,
+        "httpCode": 409,
+        "message": "Phase with name: start phase already exist"
+    }
+]
+
+
+
diff --git a/test/postman/testData/challenge-phase/partially-update-challenge-phase-by-invalid-token.json b/test/postman/testData/challenge-phase/partially-update-challenge-phase-by-invalid-token.json
new file mode 100644
index 0000000..d5f9888
--- /dev/null
+++ b/test/postman/testData/challenge-phase/partially-update-challenge-phase-by-invalid-token.json
@@ -0,0 +1,22 @@
+[
+  {
+    "jwtToken": "",
+    "httpCode": 401,
+    "message": "No token provided."
+  },
+  {
+    "jwtToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJjb3BpbG90IiwiQ29ubmVjdCBTdXBwb3J0Il0sImlzcyI6Imh0dHBzOi8vYXBpLnRvcGNvZGVyLWRldi5jb20iLCJoYW5kbGUiOiJHaG9zdGFyIiwiZXhwIjoxNTQ5ODAwMDc3LCJ1c2VySWQiOiIxNTE3NDMiLCJpYXQiOjE1NDk3OTk0NzcsImVtYWlsIjoiZW1haWxAZG9tYWluLmNvbS56IiwianRpIjoiMTJjMWMxMGItOTNlZi00NTMxLTgzMDUtYmE2NjVmYzRlMWI0In0.2n8k9pb16sE7LOLF_7mjAvEVKgggzS-wS3_8n2-R4RU",
+    "httpCode": 401,
+    "message": "Failed to authenticate token."
+  },
+  {
+    "jwtToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJBZG1pbmlzdHJhdG9yIl0sImlzcyI6Imh0dHBzOi8vYXBpLnRvcGNvZGVyLmNvbSIsImhhbmRsZSI6IlRvbnlKIiwiZXhwIjo1NTUzMDE5OTI1OSwidXNlcklkIjoiNDA0MzMyODgiLCJpYXQiOjE1MzAxOTg2NTksImVtYWlsIjoiYWRtaW5AdG9wY29kZXIuY29tIiwianRpIjoiYzNhYzYwOGEtNTZiZS00NWQwLThmNmEtMzFmZTk0Yjk1NjFjIn0.ePREgnJrBixP4URf1dd8FHISN2_6eRM5gjCReS0ZMK4",
+    "httpCode": 401,
+    "message": "Failed to authenticate token."
+  },
+  {
+    "jwtToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL3RvcGNvZGVyLWRldi5hdXRoMC5jb20vIiwic3ViIjoiZW5qdzE4MTBlRHozWFR3U08yUm4yWTljUVRyc3BuM0JAY2xpZW50cyIsImF1ZCI6Imh0dHBzOi8vbTJtLnRvcGNvZGVyLWRldi5jb20vIiwiaWF0IjoxNTUwOTA2Mzg4LCJleHAiOjE4ODA5OTI3ODgsImF6cCI6ImVuancxODEwZUR6M1hUd1NPMlJuMlk5Y1FUcnNwbjNCIiwiaXNNYWNoaW5lIjp0cnVlLCJzY29wZSI6InJlYWQ6Y2hhbGxlbmdlcyByZWFkOmNoYWxsZW5nZV90eXBlcyByZWFkOmNoYWxsZW5nZV9zZXR0aW5ncyByZWFkOmNoYWxsZW5nZV9hdWRpdF9sb2dzIHJlYWQ6Y2hhbGxlbmdlX3BoYXNlcyByZWFkOnRpbWVsaW5lX3RlbXBsYXRlcyByZWFkOmNoYWxsZW5nZV9hdHRhY2htZW50cyByZWFkOmNoYWxsZW5nZV90eXBlX3RpbWVsaW5lX3RlbXBsYXRlcyIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyJ9.BFWJGFkTaMBr22MM6jniAU38hIn7C-la_mw5vT176l0",
+    "httpCode": 403,
+    "message": "You are not allowed to perform this action!"
+  }
+]
diff --git a/test/postman/testData/challenge-timeline-template/create-challenge-timeline-template-by-admin.json b/test/postman/testData/challenge-timeline-template/create-challenge-timeline-template-by-admin.json
new file mode 100644
index 0000000..542de84
--- /dev/null
+++ b/test/postman/testData/challenge-timeline-template/create-challenge-timeline-template-by-admin.json
@@ -0,0 +1,8 @@
+[
+    {
+        "isDefault": false
+    },
+    {
+        "isDefault": false
+    }
+]
diff --git a/test/postman/testData/challenge-timeline-template/create-challenge-timeline-template-by-error-field.json b/test/postman/testData/challenge-timeline-template/create-challenge-timeline-template-by-error-field.json
new file mode 100644
index 0000000..c5b2b3c
--- /dev/null
+++ b/test/postman/testData/challenge-timeline-template/create-challenge-timeline-template-by-error-field.json
@@ -0,0 +1,7 @@
+[
+    {
+        "isDefault": false,
+        "httpCode": 404,
+        "message": "TimelineTemplate with name: first timeline already exist"
+    }
+]
diff --git a/test/postman/testData/challenge-timeline-template/create-challenge-timeline-template-by-invalid-token.json b/test/postman/testData/challenge-timeline-template/create-challenge-timeline-template-by-invalid-token.json
new file mode 100644
index 0000000..d5f9888
--- /dev/null
+++ b/test/postman/testData/challenge-timeline-template/create-challenge-timeline-template-by-invalid-token.json
@@ -0,0 +1,22 @@
+[
+  {
+    "jwtToken": "",
+    "httpCode": 401,
+    "message": "No token provided."
+  },
+  {
+    "jwtToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJjb3BpbG90IiwiQ29ubmVjdCBTdXBwb3J0Il0sImlzcyI6Imh0dHBzOi8vYXBpLnRvcGNvZGVyLWRldi5jb20iLCJoYW5kbGUiOiJHaG9zdGFyIiwiZXhwIjoxNTQ5ODAwMDc3LCJ1c2VySWQiOiIxNTE3NDMiLCJpYXQiOjE1NDk3OTk0NzcsImVtYWlsIjoiZW1haWxAZG9tYWluLmNvbS56IiwianRpIjoiMTJjMWMxMGItOTNlZi00NTMxLTgzMDUtYmE2NjVmYzRlMWI0In0.2n8k9pb16sE7LOLF_7mjAvEVKgggzS-wS3_8n2-R4RU",
+    "httpCode": 401,
+    "message": "Failed to authenticate token."
+  },
+  {
+    "jwtToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJBZG1pbmlzdHJhdG9yIl0sImlzcyI6Imh0dHBzOi8vYXBpLnRvcGNvZGVyLmNvbSIsImhhbmRsZSI6IlRvbnlKIiwiZXhwIjo1NTUzMDE5OTI1OSwidXNlcklkIjoiNDA0MzMyODgiLCJpYXQiOjE1MzAxOTg2NTksImVtYWlsIjoiYWRtaW5AdG9wY29kZXIuY29tIiwianRpIjoiYzNhYzYwOGEtNTZiZS00NWQwLThmNmEtMzFmZTk0Yjk1NjFjIn0.ePREgnJrBixP4URf1dd8FHISN2_6eRM5gjCReS0ZMK4",
+    "httpCode": 401,
+    "message": "Failed to authenticate token."
+  },
+  {
+    "jwtToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL3RvcGNvZGVyLWRldi5hdXRoMC5jb20vIiwic3ViIjoiZW5qdzE4MTBlRHozWFR3U08yUm4yWTljUVRyc3BuM0JAY2xpZW50cyIsImF1ZCI6Imh0dHBzOi8vbTJtLnRvcGNvZGVyLWRldi5jb20vIiwiaWF0IjoxNTUwOTA2Mzg4LCJleHAiOjE4ODA5OTI3ODgsImF6cCI6ImVuancxODEwZUR6M1hUd1NPMlJuMlk5Y1FUcnNwbjNCIiwiaXNNYWNoaW5lIjp0cnVlLCJzY29wZSI6InJlYWQ6Y2hhbGxlbmdlcyByZWFkOmNoYWxsZW5nZV90eXBlcyByZWFkOmNoYWxsZW5nZV9zZXR0aW5ncyByZWFkOmNoYWxsZW5nZV9hdWRpdF9sb2dzIHJlYWQ6Y2hhbGxlbmdlX3BoYXNlcyByZWFkOnRpbWVsaW5lX3RlbXBsYXRlcyByZWFkOmNoYWxsZW5nZV9hdHRhY2htZW50cyByZWFkOmNoYWxsZW5nZV90eXBlX3RpbWVsaW5lX3RlbXBsYXRlcyIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyJ9.BFWJGFkTaMBr22MM6jniAU38hIn7C-la_mw5vT176l0",
+    "httpCode": 403,
+    "message": "You are not allowed to perform this action!"
+  }
+]
diff --git a/test/postman/testData/challenge-timeline-template/delete-challenge-timeline-template-by-invalid-token.json b/test/postman/testData/challenge-timeline-template/delete-challenge-timeline-template-by-invalid-token.json
new file mode 100644
index 0000000..d5f9888
--- /dev/null
+++ b/test/postman/testData/challenge-timeline-template/delete-challenge-timeline-template-by-invalid-token.json
@@ -0,0 +1,22 @@
+[
+  {
+    "jwtToken": "",
+    "httpCode": 401,
+    "message": "No token provided."
+  },
+  {
+    "jwtToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJjb3BpbG90IiwiQ29ubmVjdCBTdXBwb3J0Il0sImlzcyI6Imh0dHBzOi8vYXBpLnRvcGNvZGVyLWRldi5jb20iLCJoYW5kbGUiOiJHaG9zdGFyIiwiZXhwIjoxNTQ5ODAwMDc3LCJ1c2VySWQiOiIxNTE3NDMiLCJpYXQiOjE1NDk3OTk0NzcsImVtYWlsIjoiZW1haWxAZG9tYWluLmNvbS56IiwianRpIjoiMTJjMWMxMGItOTNlZi00NTMxLTgzMDUtYmE2NjVmYzRlMWI0In0.2n8k9pb16sE7LOLF_7mjAvEVKgggzS-wS3_8n2-R4RU",
+    "httpCode": 401,
+    "message": "Failed to authenticate token."
+  },
+  {
+    "jwtToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJBZG1pbmlzdHJhdG9yIl0sImlzcyI6Imh0dHBzOi8vYXBpLnRvcGNvZGVyLmNvbSIsImhhbmRsZSI6IlRvbnlKIiwiZXhwIjo1NTUzMDE5OTI1OSwidXNlcklkIjoiNDA0MzMyODgiLCJpYXQiOjE1MzAxOTg2NTksImVtYWlsIjoiYWRtaW5AdG9wY29kZXIuY29tIiwianRpIjoiYzNhYzYwOGEtNTZiZS00NWQwLThmNmEtMzFmZTk0Yjk1NjFjIn0.ePREgnJrBixP4URf1dd8FHISN2_6eRM5gjCReS0ZMK4",
+    "httpCode": 401,
+    "message": "Failed to authenticate token."
+  },
+  {
+    "jwtToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL3RvcGNvZGVyLWRldi5hdXRoMC5jb20vIiwic3ViIjoiZW5qdzE4MTBlRHozWFR3U08yUm4yWTljUVRyc3BuM0JAY2xpZW50cyIsImF1ZCI6Imh0dHBzOi8vbTJtLnRvcGNvZGVyLWRldi5jb20vIiwiaWF0IjoxNTUwOTA2Mzg4LCJleHAiOjE4ODA5OTI3ODgsImF6cCI6ImVuancxODEwZUR6M1hUd1NPMlJuMlk5Y1FUcnNwbjNCIiwiaXNNYWNoaW5lIjp0cnVlLCJzY29wZSI6InJlYWQ6Y2hhbGxlbmdlcyByZWFkOmNoYWxsZW5nZV90eXBlcyByZWFkOmNoYWxsZW5nZV9zZXR0aW5ncyByZWFkOmNoYWxsZW5nZV9hdWRpdF9sb2dzIHJlYWQ6Y2hhbGxlbmdlX3BoYXNlcyByZWFkOnRpbWVsaW5lX3RlbXBsYXRlcyByZWFkOmNoYWxsZW5nZV9hdHRhY2htZW50cyByZWFkOmNoYWxsZW5nZV90eXBlX3RpbWVsaW5lX3RlbXBsYXRlcyIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyJ9.BFWJGFkTaMBr22MM6jniAU38hIn7C-la_mw5vT176l0",
+    "httpCode": 403,
+    "message": "You are not allowed to perform this action!"
+  }
+]
diff --git a/test/postman/testData/challenge-timeline-template/fully-update-challenge-timeline-template-by-admin.json b/test/postman/testData/challenge-timeline-template/fully-update-challenge-timeline-template-by-admin.json
new file mode 100644
index 0000000..52c1b04
--- /dev/null
+++ b/test/postman/testData/challenge-timeline-template/fully-update-challenge-timeline-template-by-admin.json
@@ -0,0 +1,6 @@
+[
+    {
+        "isDefault": false,
+        "httpCode": 200
+    }
+]
diff --git a/test/postman/testData/challenge-timeline-template/fully-update-challenge-timeline-template-by-error-field.json b/test/postman/testData/challenge-timeline-template/fully-update-challenge-timeline-template-by-error-field.json
new file mode 100644
index 0000000..4ad865c
--- /dev/null
+++ b/test/postman/testData/challenge-timeline-template/fully-update-challenge-timeline-template-by-error-field.json
@@ -0,0 +1,9 @@
+[
+    {
+        "isDefault": false,
+        "httpCode": 409,
+        "message": "TimelineTemplate with name: first timeline already exist"
+    }
+]
+
+
diff --git a/test/postman/testData/challenge-timeline-template/fully-update-challenge-timeline-template-by-invalid-token.json b/test/postman/testData/challenge-timeline-template/fully-update-challenge-timeline-template-by-invalid-token.json
new file mode 100644
index 0000000..d5f9888
--- /dev/null
+++ b/test/postman/testData/challenge-timeline-template/fully-update-challenge-timeline-template-by-invalid-token.json
@@ -0,0 +1,22 @@
+[
+  {
+    "jwtToken": "",
+    "httpCode": 401,
+    "message": "No token provided."
+  },
+  {
+    "jwtToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJjb3BpbG90IiwiQ29ubmVjdCBTdXBwb3J0Il0sImlzcyI6Imh0dHBzOi8vYXBpLnRvcGNvZGVyLWRldi5jb20iLCJoYW5kbGUiOiJHaG9zdGFyIiwiZXhwIjoxNTQ5ODAwMDc3LCJ1c2VySWQiOiIxNTE3NDMiLCJpYXQiOjE1NDk3OTk0NzcsImVtYWlsIjoiZW1haWxAZG9tYWluLmNvbS56IiwianRpIjoiMTJjMWMxMGItOTNlZi00NTMxLTgzMDUtYmE2NjVmYzRlMWI0In0.2n8k9pb16sE7LOLF_7mjAvEVKgggzS-wS3_8n2-R4RU",
+    "httpCode": 401,
+    "message": "Failed to authenticate token."
+  },
+  {
+    "jwtToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJBZG1pbmlzdHJhdG9yIl0sImlzcyI6Imh0dHBzOi8vYXBpLnRvcGNvZGVyLmNvbSIsImhhbmRsZSI6IlRvbnlKIiwiZXhwIjo1NTUzMDE5OTI1OSwidXNlcklkIjoiNDA0MzMyODgiLCJpYXQiOjE1MzAxOTg2NTksImVtYWlsIjoiYWRtaW5AdG9wY29kZXIuY29tIiwianRpIjoiYzNhYzYwOGEtNTZiZS00NWQwLThmNmEtMzFmZTk0Yjk1NjFjIn0.ePREgnJrBixP4URf1dd8FHISN2_6eRM5gjCReS0ZMK4",
+    "httpCode": 401,
+    "message": "Failed to authenticate token."
+  },
+  {
+    "jwtToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL3RvcGNvZGVyLWRldi5hdXRoMC5jb20vIiwic3ViIjoiZW5qdzE4MTBlRHozWFR3U08yUm4yWTljUVRyc3BuM0JAY2xpZW50cyIsImF1ZCI6Imh0dHBzOi8vbTJtLnRvcGNvZGVyLWRldi5jb20vIiwiaWF0IjoxNTUwOTA2Mzg4LCJleHAiOjE4ODA5OTI3ODgsImF6cCI6ImVuancxODEwZUR6M1hUd1NPMlJuMlk5Y1FUcnNwbjNCIiwiaXNNYWNoaW5lIjp0cnVlLCJzY29wZSI6InJlYWQ6Y2hhbGxlbmdlcyByZWFkOmNoYWxsZW5nZV90eXBlcyByZWFkOmNoYWxsZW5nZV9zZXR0aW5ncyByZWFkOmNoYWxsZW5nZV9hdWRpdF9sb2dzIHJlYWQ6Y2hhbGxlbmdlX3BoYXNlcyByZWFkOnRpbWVsaW5lX3RlbXBsYXRlcyByZWFkOmNoYWxsZW5nZV9hdHRhY2htZW50cyByZWFkOmNoYWxsZW5nZV90eXBlX3RpbWVsaW5lX3RlbXBsYXRlcyIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyJ9.BFWJGFkTaMBr22MM6jniAU38hIn7C-la_mw5vT176l0",
+    "httpCode": 403,
+    "message": "You are not allowed to perform this action!"
+  }
+]
diff --git a/test/postman/testData/challenge-track/create-challenge-track-by-admin.json b/test/postman/testData/challenge-track/create-challenge-track-by-admin.json
new file mode 100644
index 0000000..fe29b41
--- /dev/null
+++ b/test/postman/testData/challenge-track/create-challenge-track-by-admin.json
@@ -0,0 +1,26 @@
+[
+    {
+        "isActive": true,
+        "abbreviation": "TSK",
+        "description": "develop task",
+        "name": "develop",
+        "legacyId": 12,
+        "track": "DEVELOP"
+    },
+    {
+        "isActive": true,
+        "abbreviation": "CH",
+        "description": "design challenge",
+        "name": "design",
+        "legacyId": 13,
+        "track": "DESIGN"
+    },
+    {
+        "isActive": true,
+        "abbreviation": "F2F",
+        "description": "qa test",
+        "name": "First2Finish",
+        "legacyId": 14,
+        "track": "QA"
+    }
+]
diff --git a/test/postman/testData/challenge-track/create-challenge-track-by-error-field.json b/test/postman/testData/challenge-track/create-challenge-track-by-error-field.json
new file mode 100644
index 0000000..cc8d614
--- /dev/null
+++ b/test/postman/testData/challenge-track/create-challenge-track-by-error-field.json
@@ -0,0 +1,22 @@
+[
+    {
+        "isActive": true,
+        "abbreviation": "TSK2",
+        "description": "A piece of work assigned to one person1",
+        "isTask": true,
+        "name": "develop",
+        "legacyId": 102,
+        "httpCode": 409,
+        "message": "ChallengeTrack with name: develop already exist"
+    },
+    {
+        "isActive": true,
+        "description": "A Multi-person Competition with Reviews and Winners",
+        "abbreviation": "CH",
+        "name": "Challenge2",
+        "isTask": false,
+        "legacyId": 103,
+        "httpCode": 409,
+        "message": "ChallengeTrack with abbreviation: CH already exist"
+    }
+]
diff --git a/test/postman/testData/challenge-track/create-challenge-track-by-invalid-token.json b/test/postman/testData/challenge-track/create-challenge-track-by-invalid-token.json
new file mode 100644
index 0000000..d5f9888
--- /dev/null
+++ b/test/postman/testData/challenge-track/create-challenge-track-by-invalid-token.json
@@ -0,0 +1,22 @@
+[
+  {
+    "jwtToken": "",
+    "httpCode": 401,
+    "message": "No token provided."
+  },
+  {
+    "jwtToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJjb3BpbG90IiwiQ29ubmVjdCBTdXBwb3J0Il0sImlzcyI6Imh0dHBzOi8vYXBpLnRvcGNvZGVyLWRldi5jb20iLCJoYW5kbGUiOiJHaG9zdGFyIiwiZXhwIjoxNTQ5ODAwMDc3LCJ1c2VySWQiOiIxNTE3NDMiLCJpYXQiOjE1NDk3OTk0NzcsImVtYWlsIjoiZW1haWxAZG9tYWluLmNvbS56IiwianRpIjoiMTJjMWMxMGItOTNlZi00NTMxLTgzMDUtYmE2NjVmYzRlMWI0In0.2n8k9pb16sE7LOLF_7mjAvEVKgggzS-wS3_8n2-R4RU",
+    "httpCode": 401,
+    "message": "Failed to authenticate token."
+  },
+  {
+    "jwtToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJBZG1pbmlzdHJhdG9yIl0sImlzcyI6Imh0dHBzOi8vYXBpLnRvcGNvZGVyLmNvbSIsImhhbmRsZSI6IlRvbnlKIiwiZXhwIjo1NTUzMDE5OTI1OSwidXNlcklkIjoiNDA0MzMyODgiLCJpYXQiOjE1MzAxOTg2NTksImVtYWlsIjoiYWRtaW5AdG9wY29kZXIuY29tIiwianRpIjoiYzNhYzYwOGEtNTZiZS00NWQwLThmNmEtMzFmZTk0Yjk1NjFjIn0.ePREgnJrBixP4URf1dd8FHISN2_6eRM5gjCReS0ZMK4",
+    "httpCode": 401,
+    "message": "Failed to authenticate token."
+  },
+  {
+    "jwtToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL3RvcGNvZGVyLWRldi5hdXRoMC5jb20vIiwic3ViIjoiZW5qdzE4MTBlRHozWFR3U08yUm4yWTljUVRyc3BuM0JAY2xpZW50cyIsImF1ZCI6Imh0dHBzOi8vbTJtLnRvcGNvZGVyLWRldi5jb20vIiwiaWF0IjoxNTUwOTA2Mzg4LCJleHAiOjE4ODA5OTI3ODgsImF6cCI6ImVuancxODEwZUR6M1hUd1NPMlJuMlk5Y1FUcnNwbjNCIiwiaXNNYWNoaW5lIjp0cnVlLCJzY29wZSI6InJlYWQ6Y2hhbGxlbmdlcyByZWFkOmNoYWxsZW5nZV90eXBlcyByZWFkOmNoYWxsZW5nZV9zZXR0aW5ncyByZWFkOmNoYWxsZW5nZV9hdWRpdF9sb2dzIHJlYWQ6Y2hhbGxlbmdlX3BoYXNlcyByZWFkOnRpbWVsaW5lX3RlbXBsYXRlcyByZWFkOmNoYWxsZW5nZV9hdHRhY2htZW50cyByZWFkOmNoYWxsZW5nZV90eXBlX3RpbWVsaW5lX3RlbXBsYXRlcyIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyJ9.BFWJGFkTaMBr22MM6jniAU38hIn7C-la_mw5vT176l0",
+    "httpCode": 403,
+    "message": "You are not allowed to perform this action!"
+  }
+]
diff --git a/test/postman/testData/challenge-track/fully-update-challenge-track-by-admin.json b/test/postman/testData/challenge-track/fully-update-challenge-track-by-admin.json
new file mode 100644
index 0000000..72e426d
--- /dev/null
+++ b/test/postman/testData/challenge-track/fully-update-challenge-track-by-admin.json
@@ -0,0 +1,10 @@
+[
+    {
+        "isActive": true,
+        "abbreviation": "F2F",
+        "description": "qa test",
+        "name": "First2Finish22222",
+        "legacyId": 14,
+        "httpCode": 200
+    }
+]
diff --git a/test/postman/testData/challenge-track/fully-update-challenge-track-by-error-field.json b/test/postman/testData/challenge-track/fully-update-challenge-track-by-error-field.json
new file mode 100644
index 0000000..6b89a8a
--- /dev/null
+++ b/test/postman/testData/challenge-track/fully-update-challenge-track-by-error-field.json
@@ -0,0 +1,24 @@
+[
+    {
+        "isActive": true,
+        "abbreviation": "TSK2",
+        "description": "A piece of work assigned to one person1",
+        "isTask": true,
+        "name": "develop",
+        "legacyId": 102,
+        "httpCode": 409,
+        "message": "ChallengeTrack with name: develop already exist"
+    },
+    {
+        "isActive": true,
+        "description": "A Multi-person Competition with Reviews and Winners",
+        "abbreviation": "CH",
+        "name": "Challenge2",
+        "isTask": false,
+        "legacyId": 103,
+        "httpCode": 409,
+        "message": "ChallengeTrack with abbreviation: CH already exist"
+    }
+]
+
+
diff --git a/test/postman/testData/challenge-track/fully-update-challenge-track-by-invalid-token.json b/test/postman/testData/challenge-track/fully-update-challenge-track-by-invalid-token.json
new file mode 100644
index 0000000..d5f9888
--- /dev/null
+++ b/test/postman/testData/challenge-track/fully-update-challenge-track-by-invalid-token.json
@@ -0,0 +1,22 @@
+[
+  {
+    "jwtToken": "",
+    "httpCode": 401,
+    "message": "No token provided."
+  },
+  {
+    "jwtToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJjb3BpbG90IiwiQ29ubmVjdCBTdXBwb3J0Il0sImlzcyI6Imh0dHBzOi8vYXBpLnRvcGNvZGVyLWRldi5jb20iLCJoYW5kbGUiOiJHaG9zdGFyIiwiZXhwIjoxNTQ5ODAwMDc3LCJ1c2VySWQiOiIxNTE3NDMiLCJpYXQiOjE1NDk3OTk0NzcsImVtYWlsIjoiZW1haWxAZG9tYWluLmNvbS56IiwianRpIjoiMTJjMWMxMGItOTNlZi00NTMxLTgzMDUtYmE2NjVmYzRlMWI0In0.2n8k9pb16sE7LOLF_7mjAvEVKgggzS-wS3_8n2-R4RU",
+    "httpCode": 401,
+    "message": "Failed to authenticate token."
+  },
+  {
+    "jwtToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJBZG1pbmlzdHJhdG9yIl0sImlzcyI6Imh0dHBzOi8vYXBpLnRvcGNvZGVyLmNvbSIsImhhbmRsZSI6IlRvbnlKIiwiZXhwIjo1NTUzMDE5OTI1OSwidXNlcklkIjoiNDA0MzMyODgiLCJpYXQiOjE1MzAxOTg2NTksImVtYWlsIjoiYWRtaW5AdG9wY29kZXIuY29tIiwianRpIjoiYzNhYzYwOGEtNTZiZS00NWQwLThmNmEtMzFmZTk0Yjk1NjFjIn0.ePREgnJrBixP4URf1dd8FHISN2_6eRM5gjCReS0ZMK4",
+    "httpCode": 401,
+    "message": "Failed to authenticate token."
+  },
+  {
+    "jwtToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL3RvcGNvZGVyLWRldi5hdXRoMC5jb20vIiwic3ViIjoiZW5qdzE4MTBlRHozWFR3U08yUm4yWTljUVRyc3BuM0JAY2xpZW50cyIsImF1ZCI6Imh0dHBzOi8vbTJtLnRvcGNvZGVyLWRldi5jb20vIiwiaWF0IjoxNTUwOTA2Mzg4LCJleHAiOjE4ODA5OTI3ODgsImF6cCI6ImVuancxODEwZUR6M1hUd1NPMlJuMlk5Y1FUcnNwbjNCIiwiaXNNYWNoaW5lIjp0cnVlLCJzY29wZSI6InJlYWQ6Y2hhbGxlbmdlcyByZWFkOmNoYWxsZW5nZV90eXBlcyByZWFkOmNoYWxsZW5nZV9zZXR0aW5ncyByZWFkOmNoYWxsZW5nZV9hdWRpdF9sb2dzIHJlYWQ6Y2hhbGxlbmdlX3BoYXNlcyByZWFkOnRpbWVsaW5lX3RlbXBsYXRlcyByZWFkOmNoYWxsZW5nZV9hdHRhY2htZW50cyByZWFkOmNoYWxsZW5nZV90eXBlX3RpbWVsaW5lX3RlbXBsYXRlcyIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyJ9.BFWJGFkTaMBr22MM6jniAU38hIn7C-la_mw5vT176l0",
+    "httpCode": 403,
+    "message": "You are not allowed to perform this action!"
+  }
+]
diff --git a/test/postman/testData/challenge-track/partially-update-challenge-track-by-admin.json b/test/postman/testData/challenge-track/partially-update-challenge-track-by-admin.json
new file mode 100644
index 0000000..4316059
--- /dev/null
+++ b/test/postman/testData/challenge-track/partially-update-challenge-track-by-admin.json
@@ -0,0 +1,12 @@
+[
+    {
+        "isActive": true,
+        "abbreviation": "F2F",
+        "description": "qa test",
+        "name": "First2Finish2222233",
+        "track": "QA",
+        "legacyId": 14,
+        "httpCode": 200
+    }
+]
+
diff --git a/test/postman/testData/challenge-track/partially-update-challenge-track-by-error-field.json b/test/postman/testData/challenge-track/partially-update-challenge-track-by-error-field.json
new file mode 100644
index 0000000..20a17b8
--- /dev/null
+++ b/test/postman/testData/challenge-track/partially-update-challenge-track-by-error-field.json
@@ -0,0 +1,25 @@
+[
+    {
+        "isActive": true,
+        "abbreviation": "TSK2",
+        "description": "A piece of work assigned to one person1",
+        "isTask": true,
+        "name": "develop",
+        "legacyId": 102,
+        "httpCode": 409,
+        "message": "ChallengeTrack with name: develop already exist"
+    },
+    {
+        "isActive": true,
+        "description": "A Multi-person Competition with Reviews and Winners",
+        "abbreviation": "CH",
+        "name": "Challenge2",
+        "isTask": false,
+        "legacyId": 103,
+        "httpCode": 409,
+        "message": "ChallengeTrack with abbreviation: CH already exist"
+    }
+]
+
+
+
diff --git a/test/postman/testData/challenge-track/partially-update-challenge-track-by-invalid-token.json b/test/postman/testData/challenge-track/partially-update-challenge-track-by-invalid-token.json
new file mode 100644
index 0000000..d5f9888
--- /dev/null
+++ b/test/postman/testData/challenge-track/partially-update-challenge-track-by-invalid-token.json
@@ -0,0 +1,22 @@
+[
+  {
+    "jwtToken": "",
+    "httpCode": 401,
+    "message": "No token provided."
+  },
+  {
+    "jwtToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJjb3BpbG90IiwiQ29ubmVjdCBTdXBwb3J0Il0sImlzcyI6Imh0dHBzOi8vYXBpLnRvcGNvZGVyLWRldi5jb20iLCJoYW5kbGUiOiJHaG9zdGFyIiwiZXhwIjoxNTQ5ODAwMDc3LCJ1c2VySWQiOiIxNTE3NDMiLCJpYXQiOjE1NDk3OTk0NzcsImVtYWlsIjoiZW1haWxAZG9tYWluLmNvbS56IiwianRpIjoiMTJjMWMxMGItOTNlZi00NTMxLTgzMDUtYmE2NjVmYzRlMWI0In0.2n8k9pb16sE7LOLF_7mjAvEVKgggzS-wS3_8n2-R4RU",
+    "httpCode": 401,
+    "message": "Failed to authenticate token."
+  },
+  {
+    "jwtToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJBZG1pbmlzdHJhdG9yIl0sImlzcyI6Imh0dHBzOi8vYXBpLnRvcGNvZGVyLmNvbSIsImhhbmRsZSI6IlRvbnlKIiwiZXhwIjo1NTUzMDE5OTI1OSwidXNlcklkIjoiNDA0MzMyODgiLCJpYXQiOjE1MzAxOTg2NTksImVtYWlsIjoiYWRtaW5AdG9wY29kZXIuY29tIiwianRpIjoiYzNhYzYwOGEtNTZiZS00NWQwLThmNmEtMzFmZTk0Yjk1NjFjIn0.ePREgnJrBixP4URf1dd8FHISN2_6eRM5gjCReS0ZMK4",
+    "httpCode": 401,
+    "message": "Failed to authenticate token."
+  },
+  {
+    "jwtToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL3RvcGNvZGVyLWRldi5hdXRoMC5jb20vIiwic3ViIjoiZW5qdzE4MTBlRHozWFR3U08yUm4yWTljUVRyc3BuM0JAY2xpZW50cyIsImF1ZCI6Imh0dHBzOi8vbTJtLnRvcGNvZGVyLWRldi5jb20vIiwiaWF0IjoxNTUwOTA2Mzg4LCJleHAiOjE4ODA5OTI3ODgsImF6cCI6ImVuancxODEwZUR6M1hUd1NPMlJuMlk5Y1FUcnNwbjNCIiwiaXNNYWNoaW5lIjp0cnVlLCJzY29wZSI6InJlYWQ6Y2hhbGxlbmdlcyByZWFkOmNoYWxsZW5nZV90eXBlcyByZWFkOmNoYWxsZW5nZV9zZXR0aW5ncyByZWFkOmNoYWxsZW5nZV9hdWRpdF9sb2dzIHJlYWQ6Y2hhbGxlbmdlX3BoYXNlcyByZWFkOnRpbWVsaW5lX3RlbXBsYXRlcyByZWFkOmNoYWxsZW5nZV9hdHRhY2htZW50cyByZWFkOmNoYWxsZW5nZV90eXBlX3RpbWVsaW5lX3RlbXBsYXRlcyIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyJ9.BFWJGFkTaMBr22MM6jniAU38hIn7C-la_mw5vT176l0",
+    "httpCode": 403,
+    "message": "You are not allowed to perform this action!"
+  }
+]
diff --git a/test/postman/testData/challenge-type/create-challenge-type-by-admin.json b/test/postman/testData/challenge-type/create-challenge-type-by-admin.json
new file mode 100644
index 0000000..4889d3e
--- /dev/null
+++ b/test/postman/testData/challenge-type/create-challenge-type-by-admin.json
@@ -0,0 +1,26 @@
+[
+    {
+        "isActive": true,
+        "abbreviation": "TSK",
+        "description": "A piece of work assigned to one person",
+        "name": "Task",
+        "isTask": true,
+        "httpCode": 201
+    },
+    {
+        "isActive": true,
+        "abbreviation": "CH",
+        "description": "A Multi-person Competition with Reviews and Winners",
+        "name": "Challenge",
+        "isTask": false,
+        "httpCode": 201
+    },
+    {
+        "isActive": true,
+        "abbreviation": "F2F",
+        "description": "A challenge where the first submission that satisfies the spec wins",
+        "name": "First2Finish",
+        "isTask": false,
+        "httpCode": 201
+    }
+]
diff --git a/test/postman/testData/challenge-type/create-challenge-type-by-error-field.json b/test/postman/testData/challenge-type/create-challenge-type-by-error-field.json
new file mode 100644
index 0000000..7421ea1
--- /dev/null
+++ b/test/postman/testData/challenge-type/create-challenge-type-by-error-field.json
@@ -0,0 +1,20 @@
+[
+    {
+        "isActive": true,
+        "abbreviation": "TSK",
+        "description": "A piece of work assigned to one person1",
+        "isTask": true,
+        "name": "Task",
+        "httpCode": 409,
+        "message": "ChallengeType with name: Task already exist"
+    },
+    {
+        "isActive": true,
+        "description": "A Multi-person Competition with Reviews and Winners",
+        "abbreviation": "CH",
+        "name": "Challenge2",
+        "isTask": false,
+        "httpCode": 409,
+        "message": "ChallengeType with abbreviation: CH already exist"
+    }
+]
diff --git a/test/postman/testData/challenge-type/create-challenge-type-by-invalid-token.json b/test/postman/testData/challenge-type/create-challenge-type-by-invalid-token.json
new file mode 100644
index 0000000..d5f9888
--- /dev/null
+++ b/test/postman/testData/challenge-type/create-challenge-type-by-invalid-token.json
@@ -0,0 +1,22 @@
+[
+  {
+    "jwtToken": "",
+    "httpCode": 401,
+    "message": "No token provided."
+  },
+  {
+    "jwtToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJjb3BpbG90IiwiQ29ubmVjdCBTdXBwb3J0Il0sImlzcyI6Imh0dHBzOi8vYXBpLnRvcGNvZGVyLWRldi5jb20iLCJoYW5kbGUiOiJHaG9zdGFyIiwiZXhwIjoxNTQ5ODAwMDc3LCJ1c2VySWQiOiIxNTE3NDMiLCJpYXQiOjE1NDk3OTk0NzcsImVtYWlsIjoiZW1haWxAZG9tYWluLmNvbS56IiwianRpIjoiMTJjMWMxMGItOTNlZi00NTMxLTgzMDUtYmE2NjVmYzRlMWI0In0.2n8k9pb16sE7LOLF_7mjAvEVKgggzS-wS3_8n2-R4RU",
+    "httpCode": 401,
+    "message": "Failed to authenticate token."
+  },
+  {
+    "jwtToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJBZG1pbmlzdHJhdG9yIl0sImlzcyI6Imh0dHBzOi8vYXBpLnRvcGNvZGVyLmNvbSIsImhhbmRsZSI6IlRvbnlKIiwiZXhwIjo1NTUzMDE5OTI1OSwidXNlcklkIjoiNDA0MzMyODgiLCJpYXQiOjE1MzAxOTg2NTksImVtYWlsIjoiYWRtaW5AdG9wY29kZXIuY29tIiwianRpIjoiYzNhYzYwOGEtNTZiZS00NWQwLThmNmEtMzFmZTk0Yjk1NjFjIn0.ePREgnJrBixP4URf1dd8FHISN2_6eRM5gjCReS0ZMK4",
+    "httpCode": 401,
+    "message": "Failed to authenticate token."
+  },
+  {
+    "jwtToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL3RvcGNvZGVyLWRldi5hdXRoMC5jb20vIiwic3ViIjoiZW5qdzE4MTBlRHozWFR3U08yUm4yWTljUVRyc3BuM0JAY2xpZW50cyIsImF1ZCI6Imh0dHBzOi8vbTJtLnRvcGNvZGVyLWRldi5jb20vIiwiaWF0IjoxNTUwOTA2Mzg4LCJleHAiOjE4ODA5OTI3ODgsImF6cCI6ImVuancxODEwZUR6M1hUd1NPMlJuMlk5Y1FUcnNwbjNCIiwiaXNNYWNoaW5lIjp0cnVlLCJzY29wZSI6InJlYWQ6Y2hhbGxlbmdlcyByZWFkOmNoYWxsZW5nZV90eXBlcyByZWFkOmNoYWxsZW5nZV9zZXR0aW5ncyByZWFkOmNoYWxsZW5nZV9hdWRpdF9sb2dzIHJlYWQ6Y2hhbGxlbmdlX3BoYXNlcyByZWFkOnRpbWVsaW5lX3RlbXBsYXRlcyByZWFkOmNoYWxsZW5nZV9hdHRhY2htZW50cyByZWFkOmNoYWxsZW5nZV90eXBlX3RpbWVsaW5lX3RlbXBsYXRlcyIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyJ9.BFWJGFkTaMBr22MM6jniAU38hIn7C-la_mw5vT176l0",
+    "httpCode": 403,
+    "message": "You are not allowed to perform this action!"
+  }
+]
diff --git a/test/postman/testData/challenge-type/fully-update-challenge-type-by-admin.json b/test/postman/testData/challenge-type/fully-update-challenge-type-by-admin.json
new file mode 100644
index 0000000..671bd77
--- /dev/null
+++ b/test/postman/testData/challenge-type/fully-update-challenge-type-by-admin.json
@@ -0,0 +1,10 @@
+[
+    {
+        "isActive": false,
+        "abbreviation": "F2F",
+        "description": "A challenge where the first submission that satisfies the spec wins",
+        "name": "First2Finish",
+        "isTask": true,
+        "httpCode": 200
+    }
+]
diff --git a/test/postman/testData/challenge-type/fully-update-challenge-type-by-error-field.json b/test/postman/testData/challenge-type/fully-update-challenge-type-by-error-field.json
new file mode 100644
index 0000000..9c096ca
--- /dev/null
+++ b/test/postman/testData/challenge-type/fully-update-challenge-type-by-error-field.json
@@ -0,0 +1,20 @@
+[
+    {
+        "isActive": false,
+        "abbreviation": "F2F",
+        "description": "A challenge where the first submission that satisfies the spec wins",
+        "name": "Challenge",
+        "isTask": true,
+        "httpCode": 409,
+        "message":  "ChallengeType with name: Challenge already exist"
+    },
+    {
+        "isActive": false,
+        "abbreviation": "CH",
+        "description": "A challenge where the first submission that satisfies the spec wins",
+        "name": "First2Finish",
+        "isTask": true,
+        "httpCode": 409,
+        "message":  "ChallengeType with abbreviation: CH already exist"
+    }
+]
diff --git a/test/postman/testData/challenge-type/fully-update-challenge-type-by-invalid-token.json b/test/postman/testData/challenge-type/fully-update-challenge-type-by-invalid-token.json
new file mode 100644
index 0000000..d5f9888
--- /dev/null
+++ b/test/postman/testData/challenge-type/fully-update-challenge-type-by-invalid-token.json
@@ -0,0 +1,22 @@
+[
+  {
+    "jwtToken": "",
+    "httpCode": 401,
+    "message": "No token provided."
+  },
+  {
+    "jwtToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJjb3BpbG90IiwiQ29ubmVjdCBTdXBwb3J0Il0sImlzcyI6Imh0dHBzOi8vYXBpLnRvcGNvZGVyLWRldi5jb20iLCJoYW5kbGUiOiJHaG9zdGFyIiwiZXhwIjoxNTQ5ODAwMDc3LCJ1c2VySWQiOiIxNTE3NDMiLCJpYXQiOjE1NDk3OTk0NzcsImVtYWlsIjoiZW1haWxAZG9tYWluLmNvbS56IiwianRpIjoiMTJjMWMxMGItOTNlZi00NTMxLTgzMDUtYmE2NjVmYzRlMWI0In0.2n8k9pb16sE7LOLF_7mjAvEVKgggzS-wS3_8n2-R4RU",
+    "httpCode": 401,
+    "message": "Failed to authenticate token."
+  },
+  {
+    "jwtToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJBZG1pbmlzdHJhdG9yIl0sImlzcyI6Imh0dHBzOi8vYXBpLnRvcGNvZGVyLmNvbSIsImhhbmRsZSI6IlRvbnlKIiwiZXhwIjo1NTUzMDE5OTI1OSwidXNlcklkIjoiNDA0MzMyODgiLCJpYXQiOjE1MzAxOTg2NTksImVtYWlsIjoiYWRtaW5AdG9wY29kZXIuY29tIiwianRpIjoiYzNhYzYwOGEtNTZiZS00NWQwLThmNmEtMzFmZTk0Yjk1NjFjIn0.ePREgnJrBixP4URf1dd8FHISN2_6eRM5gjCReS0ZMK4",
+    "httpCode": 401,
+    "message": "Failed to authenticate token."
+  },
+  {
+    "jwtToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL3RvcGNvZGVyLWRldi5hdXRoMC5jb20vIiwic3ViIjoiZW5qdzE4MTBlRHozWFR3U08yUm4yWTljUVRyc3BuM0JAY2xpZW50cyIsImF1ZCI6Imh0dHBzOi8vbTJtLnRvcGNvZGVyLWRldi5jb20vIiwiaWF0IjoxNTUwOTA2Mzg4LCJleHAiOjE4ODA5OTI3ODgsImF6cCI6ImVuancxODEwZUR6M1hUd1NPMlJuMlk5Y1FUcnNwbjNCIiwiaXNNYWNoaW5lIjp0cnVlLCJzY29wZSI6InJlYWQ6Y2hhbGxlbmdlcyByZWFkOmNoYWxsZW5nZV90eXBlcyByZWFkOmNoYWxsZW5nZV9zZXR0aW5ncyByZWFkOmNoYWxsZW5nZV9hdWRpdF9sb2dzIHJlYWQ6Y2hhbGxlbmdlX3BoYXNlcyByZWFkOnRpbWVsaW5lX3RlbXBsYXRlcyByZWFkOmNoYWxsZW5nZV9hdHRhY2htZW50cyByZWFkOmNoYWxsZW5nZV90eXBlX3RpbWVsaW5lX3RlbXBsYXRlcyIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyJ9.BFWJGFkTaMBr22MM6jniAU38hIn7C-la_mw5vT176l0",
+    "httpCode": 403,
+    "message": "You are not allowed to perform this action!"
+  }
+]
diff --git a/test/postman/testData/challenge-type/partially-update-challenge-type-by-admin.json b/test/postman/testData/challenge-type/partially-update-challenge-type-by-admin.json
new file mode 100644
index 0000000..671bd77
--- /dev/null
+++ b/test/postman/testData/challenge-type/partially-update-challenge-type-by-admin.json
@@ -0,0 +1,10 @@
+[
+    {
+        "isActive": false,
+        "abbreviation": "F2F",
+        "description": "A challenge where the first submission that satisfies the spec wins",
+        "name": "First2Finish",
+        "isTask": true,
+        "httpCode": 200
+    }
+]
diff --git a/test/postman/testData/challenge-type/partially-update-challenge-type-by-error-field.json b/test/postman/testData/challenge-type/partially-update-challenge-type-by-error-field.json
new file mode 100644
index 0000000..9c096ca
--- /dev/null
+++ b/test/postman/testData/challenge-type/partially-update-challenge-type-by-error-field.json
@@ -0,0 +1,20 @@
+[
+    {
+        "isActive": false,
+        "abbreviation": "F2F",
+        "description": "A challenge where the first submission that satisfies the spec wins",
+        "name": "Challenge",
+        "isTask": true,
+        "httpCode": 409,
+        "message":  "ChallengeType with name: Challenge already exist"
+    },
+    {
+        "isActive": false,
+        "abbreviation": "CH",
+        "description": "A challenge where the first submission that satisfies the spec wins",
+        "name": "First2Finish",
+        "isTask": true,
+        "httpCode": 409,
+        "message":  "ChallengeType with abbreviation: CH already exist"
+    }
+]
diff --git a/test/postman/testData/challenge-type/partially-update-challenge-type-by-invalid-token.json b/test/postman/testData/challenge-type/partially-update-challenge-type-by-invalid-token.json
new file mode 100644
index 0000000..d5f9888
--- /dev/null
+++ b/test/postman/testData/challenge-type/partially-update-challenge-type-by-invalid-token.json
@@ -0,0 +1,22 @@
+[
+  {
+    "jwtToken": "",
+    "httpCode": 401,
+    "message": "No token provided."
+  },
+  {
+    "jwtToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJjb3BpbG90IiwiQ29ubmVjdCBTdXBwb3J0Il0sImlzcyI6Imh0dHBzOi8vYXBpLnRvcGNvZGVyLWRldi5jb20iLCJoYW5kbGUiOiJHaG9zdGFyIiwiZXhwIjoxNTQ5ODAwMDc3LCJ1c2VySWQiOiIxNTE3NDMiLCJpYXQiOjE1NDk3OTk0NzcsImVtYWlsIjoiZW1haWxAZG9tYWluLmNvbS56IiwianRpIjoiMTJjMWMxMGItOTNlZi00NTMxLTgzMDUtYmE2NjVmYzRlMWI0In0.2n8k9pb16sE7LOLF_7mjAvEVKgggzS-wS3_8n2-R4RU",
+    "httpCode": 401,
+    "message": "Failed to authenticate token."
+  },
+  {
+    "jwtToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJBZG1pbmlzdHJhdG9yIl0sImlzcyI6Imh0dHBzOi8vYXBpLnRvcGNvZGVyLmNvbSIsImhhbmRsZSI6IlRvbnlKIiwiZXhwIjo1NTUzMDE5OTI1OSwidXNlcklkIjoiNDA0MzMyODgiLCJpYXQiOjE1MzAxOTg2NTksImVtYWlsIjoiYWRtaW5AdG9wY29kZXIuY29tIiwianRpIjoiYzNhYzYwOGEtNTZiZS00NWQwLThmNmEtMzFmZTk0Yjk1NjFjIn0.ePREgnJrBixP4URf1dd8FHISN2_6eRM5gjCReS0ZMK4",
+    "httpCode": 401,
+    "message": "Failed to authenticate token."
+  },
+  {
+    "jwtToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL3RvcGNvZGVyLWRldi5hdXRoMC5jb20vIiwic3ViIjoiZW5qdzE4MTBlRHozWFR3U08yUm4yWTljUVRyc3BuM0JAY2xpZW50cyIsImF1ZCI6Imh0dHBzOi8vbTJtLnRvcGNvZGVyLWRldi5jb20vIiwiaWF0IjoxNTUwOTA2Mzg4LCJleHAiOjE4ODA5OTI3ODgsImF6cCI6ImVuancxODEwZUR6M1hUd1NPMlJuMlk5Y1FUcnNwbjNCIiwiaXNNYWNoaW5lIjp0cnVlLCJzY29wZSI6InJlYWQ6Y2hhbGxlbmdlcyByZWFkOmNoYWxsZW5nZV90eXBlcyByZWFkOmNoYWxsZW5nZV9zZXR0aW5ncyByZWFkOmNoYWxsZW5nZV9hdWRpdF9sb2dzIHJlYWQ6Y2hhbGxlbmdlX3BoYXNlcyByZWFkOnRpbWVsaW5lX3RlbXBsYXRlcyByZWFkOmNoYWxsZW5nZV9hdHRhY2htZW50cyByZWFkOmNoYWxsZW5nZV90eXBlX3RpbWVsaW5lX3RlbXBsYXRlcyIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyJ9.BFWJGFkTaMBr22MM6jniAU38hIn7C-la_mw5vT176l0",
+    "httpCode": 403,
+    "message": "You are not allowed to perform this action!"
+  }
+]
diff --git a/test/postman/testData/resource-role-phase-dependency/create-dependency-with-invalid-tokens.json b/test/postman/testData/resource-role-phase-dependency/create-dependency-with-invalid-tokens.json
new file mode 100644
index 0000000..e5d6d1e
--- /dev/null
+++ b/test/postman/testData/resource-role-phase-dependency/create-dependency-with-invalid-tokens.json
@@ -0,0 +1,26 @@
+[
+  {
+    "jwtToken": "Bearer invalid",
+    "httpCode": 401,
+    "message": "Invalid Token."
+  },
+  {
+    "jwtToken": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJUb3Bjb2RlciBVc2VyIiwiQ29ubmVjdCBTdXBwb3J0IiwiYWRtaW5pc3RyYXRvciIsInRlc3RSb2xlIiwiYWFhIiwidG9ueV90ZXN0XzEiLCJDb25uZWN0IE1hbmFnZXIiLCJDb25uZWN0IEFkbWluIiwiY29waWxvdCIsIkNvbm5lY3QgQ29waWxvdCBNYW5hZ2VyIl0sImlzcyI6Imh0dHBzOi8vYXBpLnRvcGNvZGVyLWRldi5jb20iLCJoYW5kbGUiOiJUb255SiIsImV4cCI6MTU1MTA2MzIxMSwidXNlcklkIjoiODU0Nzg5OSIsImlhdCI6MTU1MTA1MzIxMSwiZW1haWwiOiJ0amVmdHMrZml4QHRvcGNvZGVyLmNvbSIsImp0aSI6ImY5NGQxZTI2LTNkMGUtNDZjYS04MTE1LTg3NTQ1NDRhMDhmMSJ9.97-pjuSGGqDAqK2FG2yi_3nmzB7ZMXQwtG0bi8_PlKk",
+    "httpCode": 401,
+    "message": "Failed to authenticate token."
+  },
+  {
+    "jwtToken": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJUb3Bjb2RlciBVc2VyIl0sImlzcyI6Imh0dHBzOi8vYXBpLnRvcGNvZGVyLWRldi5jb20iLCJoYW5kbGUiOiJkZW5pcyIsImV4cCI6MTY4MjgwMDE2OSwidXNlcklkIjoiMjUxMjgwIiwiaWF0IjoxNTQ5Nzk5NTY5LCJlbWFpbCI6ImVtYWlsQGRvbWFpbi5jb20ueiIsImp0aSI6IjljNDUxMWM1LWMxNjUtNGExYi04OTllLWI2NWFkMGUwMmI1NSJ9.BCF6xW3aQfHDDFbgGvvOKzvwEXVLWGf-TgF5JrtM9Tg",
+    "httpCode": 403,
+    "message": "You are not allowed to perform this action!"
+  },
+  {
+    "jwtToken": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL3RvcGNvZGVyLWRldi5hdXRoMC5jb20vIiwic3ViIjoiZW5qdzE4MTBlRHozWFR3U08yUm4yWTljUVRyc3BuM0JAY2xpZW50cyIsImF1ZCI6Imh0dHBzOi8vbTJtLnRvcGNvZGVyLWRldi5jb20vIiwiaWF0IjoxNTUwOTA2Mzg4LCJleHAiOjE2ODA5OTI3ODgsImF6cCI6ImVuancxODEwZUR6M1hUd1NPMlJuMlk5Y1FUcnNwbjNCIiwic2NvcGUiOiJyZWFkOnJlc291cmNlcyIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyJ9.1EdekIx1jU2lDSIXlMFCPmXkzLWQ_ZvxPuutQWuTKu0",
+    "httpCode": 403,
+    "message": "You are not allowed to perform this action!"
+  },
+  {
+    "httpCode": 401,
+    "message": "No token provided."
+  }
+]
\ No newline at end of file
diff --git a/test/postman/testData/resource-role-phase-dependency/create-dependency.json b/test/postman/testData/resource-role-phase-dependency/create-dependency.json
new file mode 100644
index 0000000..590c26e
--- /dev/null
+++ b/test/postman/testData/resource-role-phase-dependency/create-dependency.json
@@ -0,0 +1,17 @@
+[
+  {
+    "phaseId": "aa5a3f78-79e0-4bf7-93ff-b11e8f5b398b",
+    "phaseState": true,
+    "httpCode": 200
+  },
+  {
+    "phaseId": "aa5a3f78-79e0-4bf7-93ff-b11e8f5b398b",
+    "phaseState": false,
+    "httpCode": 200
+  },
+  {
+    "phaseId": "abc",
+    "phaseState": false,
+    "httpCode": 404
+  }
+]
\ No newline at end of file
diff --git a/test/postman/testData/resource-role-phase-dependency/delete-dependency-with-invalid-tokens.json b/test/postman/testData/resource-role-phase-dependency/delete-dependency-with-invalid-tokens.json
new file mode 100644
index 0000000..e5d6d1e
--- /dev/null
+++ b/test/postman/testData/resource-role-phase-dependency/delete-dependency-with-invalid-tokens.json
@@ -0,0 +1,26 @@
+[
+  {
+    "jwtToken": "Bearer invalid",
+    "httpCode": 401,
+    "message": "Invalid Token."
+  },
+  {
+    "jwtToken": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJUb3Bjb2RlciBVc2VyIiwiQ29ubmVjdCBTdXBwb3J0IiwiYWRtaW5pc3RyYXRvciIsInRlc3RSb2xlIiwiYWFhIiwidG9ueV90ZXN0XzEiLCJDb25uZWN0IE1hbmFnZXIiLCJDb25uZWN0IEFkbWluIiwiY29waWxvdCIsIkNvbm5lY3QgQ29waWxvdCBNYW5hZ2VyIl0sImlzcyI6Imh0dHBzOi8vYXBpLnRvcGNvZGVyLWRldi5jb20iLCJoYW5kbGUiOiJUb255SiIsImV4cCI6MTU1MTA2MzIxMSwidXNlcklkIjoiODU0Nzg5OSIsImlhdCI6MTU1MTA1MzIxMSwiZW1haWwiOiJ0amVmdHMrZml4QHRvcGNvZGVyLmNvbSIsImp0aSI6ImY5NGQxZTI2LTNkMGUtNDZjYS04MTE1LTg3NTQ1NDRhMDhmMSJ9.97-pjuSGGqDAqK2FG2yi_3nmzB7ZMXQwtG0bi8_PlKk",
+    "httpCode": 401,
+    "message": "Failed to authenticate token."
+  },
+  {
+    "jwtToken": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJUb3Bjb2RlciBVc2VyIl0sImlzcyI6Imh0dHBzOi8vYXBpLnRvcGNvZGVyLWRldi5jb20iLCJoYW5kbGUiOiJkZW5pcyIsImV4cCI6MTY4MjgwMDE2OSwidXNlcklkIjoiMjUxMjgwIiwiaWF0IjoxNTQ5Nzk5NTY5LCJlbWFpbCI6ImVtYWlsQGRvbWFpbi5jb20ueiIsImp0aSI6IjljNDUxMWM1LWMxNjUtNGExYi04OTllLWI2NWFkMGUwMmI1NSJ9.BCF6xW3aQfHDDFbgGvvOKzvwEXVLWGf-TgF5JrtM9Tg",
+    "httpCode": 403,
+    "message": "You are not allowed to perform this action!"
+  },
+  {
+    "jwtToken": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL3RvcGNvZGVyLWRldi5hdXRoMC5jb20vIiwic3ViIjoiZW5qdzE4MTBlRHozWFR3U08yUm4yWTljUVRyc3BuM0JAY2xpZW50cyIsImF1ZCI6Imh0dHBzOi8vbTJtLnRvcGNvZGVyLWRldi5jb20vIiwiaWF0IjoxNTUwOTA2Mzg4LCJleHAiOjE2ODA5OTI3ODgsImF6cCI6ImVuancxODEwZUR6M1hUd1NPMlJuMlk5Y1FUcnNwbjNCIiwic2NvcGUiOiJyZWFkOnJlc291cmNlcyIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyJ9.1EdekIx1jU2lDSIXlMFCPmXkzLWQ_ZvxPuutQWuTKu0",
+    "httpCode": 403,
+    "message": "You are not allowed to perform this action!"
+  },
+  {
+    "httpCode": 401,
+    "message": "No token provided."
+  }
+]
\ No newline at end of file
diff --git a/test/postman/testData/resource-role-phase-dependency/get-dependency-with-invalid-tokens.json b/test/postman/testData/resource-role-phase-dependency/get-dependency-with-invalid-tokens.json
new file mode 100644
index 0000000..801eb88
--- /dev/null
+++ b/test/postman/testData/resource-role-phase-dependency/get-dependency-with-invalid-tokens.json
@@ -0,0 +1,26 @@
+[
+  {
+    "jwtToken": "Bearer invalid",
+    "httpCode": 401,
+    "message": "Invalid Token."
+  },
+  {
+    "jwtToken": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJUb3Bjb2RlciBVc2VyIiwiQ29ubmVjdCBTdXBwb3J0IiwiYWRtaW5pc3RyYXRvciIsInRlc3RSb2xlIiwiYWFhIiwidG9ueV90ZXN0XzEiLCJDb25uZWN0IE1hbmFnZXIiLCJDb25uZWN0IEFkbWluIiwiY29waWxvdCIsIkNvbm5lY3QgQ29waWxvdCBNYW5hZ2VyIl0sImlzcyI6Imh0dHBzOi8vYXBpLnRvcGNvZGVyLWRldi5jb20iLCJoYW5kbGUiOiJUb255SiIsImV4cCI6MTU1MTA2MzIxMSwidXNlcklkIjoiODU0Nzg5OSIsImlhdCI6MTU1MTA1MzIxMSwiZW1haWwiOiJ0amVmdHMrZml4QHRvcGNvZGVyLmNvbSIsImp0aSI6ImY5NGQxZTI2LTNkMGUtNDZjYS04MTE1LTg3NTQ1NDRhMDhmMSJ9.97-pjuSGGqDAqK2FG2yi_3nmzB7ZMXQwtG0bi8_PlKk",
+    "httpCode": 401,
+    "message": "Failed to authenticate token."
+  },
+  {
+    "jwtToken": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJUb3Bjb2RlciBVc2VyIl0sImlzcyI6Imh0dHBzOi8vYXBpLnRvcGNvZGVyLWRldi5jb20iLCJoYW5kbGUiOiJkZW5pcyIsImV4cCI6MTY4MjgwMDE2OSwidXNlcklkIjoiMjUxMjgwIiwiaWF0IjoxNTQ5Nzk5NTY5LCJlbWFpbCI6ImVtYWlsQGRvbWFpbi5jb20ueiIsImp0aSI6IjljNDUxMWM1LWMxNjUtNGExYi04OTllLWI2NWFkMGUwMmI1NSJ9.BCF6xW3aQfHDDFbgGvvOKzvwEXVLWGf-TgF5JrtM9Tg",
+    "httpCode": 403,
+    "message": "You are not allowed to perform this action!"
+  },
+  {
+    "jwtToken": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL3RvcGNvZGVyLWRldi5hdXRoMC5jb20vIiwic3ViIjoiZW5qdzE4MTBlRHozWFR3U08yUm4yWTljUVRyc3BuM0JAY2xpZW50cyIsImF1ZCI6Imh0dHBzOi8vbTJtLnRvcGNvZGVyLWRldi5jb20vIiwiaWF0IjoxNTUwOTA2Mzg4LCJleHAiOjE2ODA5OTI3ODgsImF6cCI6ImVuancxODEwZUR6M1hUd1NPMlJuMlk5Y1FUcnNwbjNCIiwic2NvcGUiOiJjcmVhdGU6cmVzb3VyY2VzIGRlbGV0ZTpyZXNvdXJjZXMgdXBkYXRlOnJlc291cmNlcyIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyJ9.f_3FLT3jMTnKwGIg8fcFP2lmShy5S9d5IvLNbXSj2Eo",
+    "httpCode": 403,
+    "message": "You are not allowed to perform this action!"
+  },
+  {
+    "httpCode": 401,
+    "message": "No token provided."
+  }
+]
\ No newline at end of file
diff --git a/test/postman/testData/resource-role-phase-dependency/update-dependency-with-invalid-tokens.json b/test/postman/testData/resource-role-phase-dependency/update-dependency-with-invalid-tokens.json
new file mode 100644
index 0000000..e5d6d1e
--- /dev/null
+++ b/test/postman/testData/resource-role-phase-dependency/update-dependency-with-invalid-tokens.json
@@ -0,0 +1,26 @@
+[
+  {
+    "jwtToken": "Bearer invalid",
+    "httpCode": 401,
+    "message": "Invalid Token."
+  },
+  {
+    "jwtToken": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJUb3Bjb2RlciBVc2VyIiwiQ29ubmVjdCBTdXBwb3J0IiwiYWRtaW5pc3RyYXRvciIsInRlc3RSb2xlIiwiYWFhIiwidG9ueV90ZXN0XzEiLCJDb25uZWN0IE1hbmFnZXIiLCJDb25uZWN0IEFkbWluIiwiY29waWxvdCIsIkNvbm5lY3QgQ29waWxvdCBNYW5hZ2VyIl0sImlzcyI6Imh0dHBzOi8vYXBpLnRvcGNvZGVyLWRldi5jb20iLCJoYW5kbGUiOiJUb255SiIsImV4cCI6MTU1MTA2MzIxMSwidXNlcklkIjoiODU0Nzg5OSIsImlhdCI6MTU1MTA1MzIxMSwiZW1haWwiOiJ0amVmdHMrZml4QHRvcGNvZGVyLmNvbSIsImp0aSI6ImY5NGQxZTI2LTNkMGUtNDZjYS04MTE1LTg3NTQ1NDRhMDhmMSJ9.97-pjuSGGqDAqK2FG2yi_3nmzB7ZMXQwtG0bi8_PlKk",
+    "httpCode": 401,
+    "message": "Failed to authenticate token."
+  },
+  {
+    "jwtToken": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJUb3Bjb2RlciBVc2VyIl0sImlzcyI6Imh0dHBzOi8vYXBpLnRvcGNvZGVyLWRldi5jb20iLCJoYW5kbGUiOiJkZW5pcyIsImV4cCI6MTY4MjgwMDE2OSwidXNlcklkIjoiMjUxMjgwIiwiaWF0IjoxNTQ5Nzk5NTY5LCJlbWFpbCI6ImVtYWlsQGRvbWFpbi5jb20ueiIsImp0aSI6IjljNDUxMWM1LWMxNjUtNGExYi04OTllLWI2NWFkMGUwMmI1NSJ9.BCF6xW3aQfHDDFbgGvvOKzvwEXVLWGf-TgF5JrtM9Tg",
+    "httpCode": 403,
+    "message": "You are not allowed to perform this action!"
+  },
+  {
+    "jwtToken": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL3RvcGNvZGVyLWRldi5hdXRoMC5jb20vIiwic3ViIjoiZW5qdzE4MTBlRHozWFR3U08yUm4yWTljUVRyc3BuM0JAY2xpZW50cyIsImF1ZCI6Imh0dHBzOi8vbTJtLnRvcGNvZGVyLWRldi5jb20vIiwiaWF0IjoxNTUwOTA2Mzg4LCJleHAiOjE2ODA5OTI3ODgsImF6cCI6ImVuancxODEwZUR6M1hUd1NPMlJuMlk5Y1FUcnNwbjNCIiwic2NvcGUiOiJyZWFkOnJlc291cmNlcyIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyJ9.1EdekIx1jU2lDSIXlMFCPmXkzLWQ_ZvxPuutQWuTKu0",
+    "httpCode": 403,
+    "message": "You are not allowed to perform this action!"
+  },
+  {
+    "httpCode": 401,
+    "message": "No token provided."
+  }
+]
\ No newline at end of file
diff --git a/test/postman/testData/resource-role-phase-dependency/update-dependency.json b/test/postman/testData/resource-role-phase-dependency/update-dependency.json
new file mode 100644
index 0000000..590c26e
--- /dev/null
+++ b/test/postman/testData/resource-role-phase-dependency/update-dependency.json
@@ -0,0 +1,17 @@
+[
+  {
+    "phaseId": "aa5a3f78-79e0-4bf7-93ff-b11e8f5b398b",
+    "phaseState": true,
+    "httpCode": 200
+  },
+  {
+    "phaseId": "aa5a3f78-79e0-4bf7-93ff-b11e8f5b398b",
+    "phaseState": false,
+    "httpCode": 200
+  },
+  {
+    "phaseId": "abc",
+    "phaseState": false,
+    "httpCode": 404
+  }
+]
\ No newline at end of file
diff --git a/test/postman/testData/resource-role/create-resource-role-by-admin.json b/test/postman/testData/resource-role/create-resource-role-by-admin.json
new file mode 100644
index 0000000..6a74f27
--- /dev/null
+++ b/test/postman/testData/resource-role/create-resource-role-by-admin.json
@@ -0,0 +1,55 @@
+[
+  {
+    "name": "co-pilot",
+    "fullReadAccess": true,
+    "fullWriteAccess": false,
+    "isActive": true,
+    "selfObtainable": false,
+    "httpCode": 200
+  },
+  {
+    "name": "Observer",
+    "fullReadAccess": true,
+    "fullWriteAccess": true,
+    "isActive": false,
+    "selfObtainable": false,
+    "httpCode": 200
+  },
+  {
+    "name": "submitter",
+    "fullReadAccess": true,
+    "fullWriteAccess": true,
+    "isActive": true,
+    "selfObtainable": true,
+    "httpCode": 200
+  },
+  {
+    "name": "reviewer",
+    "fullReadAccess": false,
+    "fullWriteAccess": false,
+    "isActive": true,
+    "selfObtainable": false,
+    "httpCode": 200
+  },
+  {
+    "invalid": "invalid",
+    "fullReadAccess": true,
+    "fullWriteAccess": false,
+    "isActive": true,
+    "httpCode": 400
+  },
+  {
+    "name": "failure-test",
+    "fullReadAccess": true,
+    "fullWriteAccess": false,
+    "httpCode": 400
+  },
+  {
+    "name": "submitter",
+    "fullReadAccess": true,
+    "fullWriteAccess": true,
+    "isActive": true,
+    "selfObtainable": true,
+    "httpCode": 409
+  }
+]
\ No newline at end of file
diff --git a/test/postman/testData/resource-role/create-resource-role-by-m2m.json b/test/postman/testData/resource-role/create-resource-role-by-m2m.json
new file mode 100644
index 0000000..25a6b97
--- /dev/null
+++ b/test/postman/testData/resource-role/create-resource-role-by-m2m.json
@@ -0,0 +1,55 @@
+[
+  {
+    "name": "co-pilot-m2m",
+    "fullReadAccess": true,
+    "fullWriteAccess": false,
+    "isActive": true,
+    "selfObtainable": false,
+    "httpCode": 200
+  },
+  {
+    "name": "Observer-m2m",
+    "fullReadAccess": true,
+    "fullWriteAccess": true,
+    "isActive": false,
+    "selfObtainable": false,
+    "httpCode": 200
+  },
+  {
+    "name": "submitter-m2m",
+    "fullReadAccess": true,
+    "fullWriteAccess": true,
+    "isActive": true,
+    "selfObtainable": true,
+    "httpCode": 200
+  },
+  {
+    "name": "reviewer-m2m",
+    "fullReadAccess": false,
+    "fullWriteAccess": false,
+    "isActive": true,
+    "selfObtainable": false,
+    "httpCode": 200
+  },
+  {
+    "invalid": "invalid-m2m",
+    "fullReadAccess": true,
+    "fullWriteAccess": false,
+    "isActive": true,
+    "httpCode": 400
+  },
+  {
+    "name": "failure-test-m2m",
+    "fullReadAccess": true,
+    "fullWriteAccess": false,
+    "httpCode": 400
+  },
+  {
+    "name": "submitter-m2m",
+    "fullReadAccess": true,
+    "fullWriteAccess": true,
+    "isActive": true,
+    "selfObtainable": true,
+    "httpCode": 409
+  }
+]
\ No newline at end of file
diff --git a/test/postman/testData/resource-role/create-resource-role-with-invalid-tokens.json b/test/postman/testData/resource-role/create-resource-role-with-invalid-tokens.json
new file mode 100644
index 0000000..e5d6d1e
--- /dev/null
+++ b/test/postman/testData/resource-role/create-resource-role-with-invalid-tokens.json
@@ -0,0 +1,26 @@
+[
+  {
+    "jwtToken": "Bearer invalid",
+    "httpCode": 401,
+    "message": "Invalid Token."
+  },
+  {
+    "jwtToken": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJUb3Bjb2RlciBVc2VyIiwiQ29ubmVjdCBTdXBwb3J0IiwiYWRtaW5pc3RyYXRvciIsInRlc3RSb2xlIiwiYWFhIiwidG9ueV90ZXN0XzEiLCJDb25uZWN0IE1hbmFnZXIiLCJDb25uZWN0IEFkbWluIiwiY29waWxvdCIsIkNvbm5lY3QgQ29waWxvdCBNYW5hZ2VyIl0sImlzcyI6Imh0dHBzOi8vYXBpLnRvcGNvZGVyLWRldi5jb20iLCJoYW5kbGUiOiJUb255SiIsImV4cCI6MTU1MTA2MzIxMSwidXNlcklkIjoiODU0Nzg5OSIsImlhdCI6MTU1MTA1MzIxMSwiZW1haWwiOiJ0amVmdHMrZml4QHRvcGNvZGVyLmNvbSIsImp0aSI6ImY5NGQxZTI2LTNkMGUtNDZjYS04MTE1LTg3NTQ1NDRhMDhmMSJ9.97-pjuSGGqDAqK2FG2yi_3nmzB7ZMXQwtG0bi8_PlKk",
+    "httpCode": 401,
+    "message": "Failed to authenticate token."
+  },
+  {
+    "jwtToken": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJUb3Bjb2RlciBVc2VyIl0sImlzcyI6Imh0dHBzOi8vYXBpLnRvcGNvZGVyLWRldi5jb20iLCJoYW5kbGUiOiJkZW5pcyIsImV4cCI6MTY4MjgwMDE2OSwidXNlcklkIjoiMjUxMjgwIiwiaWF0IjoxNTQ5Nzk5NTY5LCJlbWFpbCI6ImVtYWlsQGRvbWFpbi5jb20ueiIsImp0aSI6IjljNDUxMWM1LWMxNjUtNGExYi04OTllLWI2NWFkMGUwMmI1NSJ9.BCF6xW3aQfHDDFbgGvvOKzvwEXVLWGf-TgF5JrtM9Tg",
+    "httpCode": 403,
+    "message": "You are not allowed to perform this action!"
+  },
+  {
+    "jwtToken": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL3RvcGNvZGVyLWRldi5hdXRoMC5jb20vIiwic3ViIjoiZW5qdzE4MTBlRHozWFR3U08yUm4yWTljUVRyc3BuM0JAY2xpZW50cyIsImF1ZCI6Imh0dHBzOi8vbTJtLnRvcGNvZGVyLWRldi5jb20vIiwiaWF0IjoxNTUwOTA2Mzg4LCJleHAiOjE2ODA5OTI3ODgsImF6cCI6ImVuancxODEwZUR6M1hUd1NPMlJuMlk5Y1FUcnNwbjNCIiwic2NvcGUiOiJyZWFkOnJlc291cmNlcyIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyJ9.1EdekIx1jU2lDSIXlMFCPmXkzLWQ_ZvxPuutQWuTKu0",
+    "httpCode": 403,
+    "message": "You are not allowed to perform this action!"
+  },
+  {
+    "httpCode": 401,
+    "message": "No token provided."
+  }
+]
\ No newline at end of file
diff --git a/test/postman/testData/resource-role/update-resource-role-by-admin.json b/test/postman/testData/resource-role/update-resource-role-by-admin.json
new file mode 100644
index 0000000..6b6f274
--- /dev/null
+++ b/test/postman/testData/resource-role/update-resource-role-by-admin.json
@@ -0,0 +1,48 @@
+[
+  {
+    "name": "UPDATE_CO-PILOT-admin",
+    "fullReadAccess": true,
+    "fullWriteAccess": true,
+    "isActive": true,
+    "selfObtainable": false,
+    "httpCode": 200
+  },
+  {
+    "name": "UPDATE_OBSERVER-admin",
+    "fullReadAccess": true,
+    "fullWriteAccess": true,
+    "isActive": false,
+    "selfObtainable": false,
+    "httpCode": 200
+  },
+  {
+    "name": "UPDATE_SUBMITTER-admin",
+    "fullReadAccess": true,
+    "fullWriteAccess": true,
+    "isActive": true,
+    "selfObtainable": true,
+    "httpCode": 200
+  },
+  {
+    "name": "UPDATE_REVIEWER-admin",
+    "fullReadAccess": false,
+    "fullWriteAccess": false,
+    "isActive": true,
+    "selfObtainable": false,
+    "httpCode": 200
+  },
+  {
+    "name": "UPDATE_REVIEWER-admin1",
+    "isActive": true,
+    "selfObtainable": false,
+    "httpCode": 400
+  },
+  {
+    "name": "SUBMITTER",
+    "fullReadAccess": true,
+    "fullWriteAccess": false,
+    "isActive": true,
+    "selfObtainable": false,
+    "httpCode": 409
+  }
+]
\ No newline at end of file
diff --git a/test/postman/testData/resource-role/update-resource-role-by-m2m.json b/test/postman/testData/resource-role/update-resource-role-by-m2m.json
new file mode 100644
index 0000000..3d1196f
--- /dev/null
+++ b/test/postman/testData/resource-role/update-resource-role-by-m2m.json
@@ -0,0 +1,48 @@
+[
+  {
+    "name": "UPDATE_CO-PILOT-m2m",
+    "fullReadAccess": true,
+    "fullWriteAccess": true,
+    "isActive": true,
+    "selfObtainable": false,
+    "httpCode": 200
+  },
+  {
+    "name": "UPDATE_OBSERVER-m2m",
+    "fullReadAccess": true,
+    "fullWriteAccess": true,
+    "isActive": false,
+    "selfObtainable": false,
+    "httpCode": 200
+  },
+  {
+    "name": "UPDATE_SUBMITTER-m2m",
+    "fullReadAccess": true,
+    "fullWriteAccess": true,
+    "isActive": true,
+    "selfObtainable": true,
+    "httpCode": 200
+  },
+  {
+    "name": "UPDATE_REVIEWER-m2m",
+    "fullReadAccess": false,
+    "fullWriteAccess": false,
+    "isActive": true,
+    "selfObtainable": false,
+    "httpCode": 200
+  },
+  {
+    "name": "UPDATE_REVIEWER-m2m1",
+    "isActive": true,
+    "selfObtainable": false,
+    "httpCode": 400
+  },
+  {
+    "name": "SUBMITTER",
+    "fullReadAccess": true,
+    "fullWriteAccess": false,
+    "isActive": true,
+    "selfObtainable": false,
+    "httpCode": 409
+  }
+]
\ No newline at end of file
diff --git a/test/postman/testData/resource-role/update-resource-role-with-invalid-tokens.json b/test/postman/testData/resource-role/update-resource-role-with-invalid-tokens.json
new file mode 100644
index 0000000..e5d6d1e
--- /dev/null
+++ b/test/postman/testData/resource-role/update-resource-role-with-invalid-tokens.json
@@ -0,0 +1,26 @@
+[
+  {
+    "jwtToken": "Bearer invalid",
+    "httpCode": 401,
+    "message": "Invalid Token."
+  },
+  {
+    "jwtToken": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJUb3Bjb2RlciBVc2VyIiwiQ29ubmVjdCBTdXBwb3J0IiwiYWRtaW5pc3RyYXRvciIsInRlc3RSb2xlIiwiYWFhIiwidG9ueV90ZXN0XzEiLCJDb25uZWN0IE1hbmFnZXIiLCJDb25uZWN0IEFkbWluIiwiY29waWxvdCIsIkNvbm5lY3QgQ29waWxvdCBNYW5hZ2VyIl0sImlzcyI6Imh0dHBzOi8vYXBpLnRvcGNvZGVyLWRldi5jb20iLCJoYW5kbGUiOiJUb255SiIsImV4cCI6MTU1MTA2MzIxMSwidXNlcklkIjoiODU0Nzg5OSIsImlhdCI6MTU1MTA1MzIxMSwiZW1haWwiOiJ0amVmdHMrZml4QHRvcGNvZGVyLmNvbSIsImp0aSI6ImY5NGQxZTI2LTNkMGUtNDZjYS04MTE1LTg3NTQ1NDRhMDhmMSJ9.97-pjuSGGqDAqK2FG2yi_3nmzB7ZMXQwtG0bi8_PlKk",
+    "httpCode": 401,
+    "message": "Failed to authenticate token."
+  },
+  {
+    "jwtToken": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJUb3Bjb2RlciBVc2VyIl0sImlzcyI6Imh0dHBzOi8vYXBpLnRvcGNvZGVyLWRldi5jb20iLCJoYW5kbGUiOiJkZW5pcyIsImV4cCI6MTY4MjgwMDE2OSwidXNlcklkIjoiMjUxMjgwIiwiaWF0IjoxNTQ5Nzk5NTY5LCJlbWFpbCI6ImVtYWlsQGRvbWFpbi5jb20ueiIsImp0aSI6IjljNDUxMWM1LWMxNjUtNGExYi04OTllLWI2NWFkMGUwMmI1NSJ9.BCF6xW3aQfHDDFbgGvvOKzvwEXVLWGf-TgF5JrtM9Tg",
+    "httpCode": 403,
+    "message": "You are not allowed to perform this action!"
+  },
+  {
+    "jwtToken": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL3RvcGNvZGVyLWRldi5hdXRoMC5jb20vIiwic3ViIjoiZW5qdzE4MTBlRHozWFR3U08yUm4yWTljUVRyc3BuM0JAY2xpZW50cyIsImF1ZCI6Imh0dHBzOi8vbTJtLnRvcGNvZGVyLWRldi5jb20vIiwiaWF0IjoxNTUwOTA2Mzg4LCJleHAiOjE2ODA5OTI3ODgsImF6cCI6ImVuancxODEwZUR6M1hUd1NPMlJuMlk5Y1FUcnNwbjNCIiwic2NvcGUiOiJyZWFkOnJlc291cmNlcyIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyJ9.1EdekIx1jU2lDSIXlMFCPmXkzLWQ_ZvxPuutQWuTKu0",
+    "httpCode": 403,
+    "message": "You are not allowed to perform this action!"
+  },
+  {
+    "httpCode": 401,
+    "message": "No token provided."
+  }
+]
\ No newline at end of file
diff --git a/test/postman/testData/timeline-template/create-timeline-template-by-admin.json b/test/postman/testData/timeline-template/create-timeline-template-by-admin.json
new file mode 100644
index 0000000..21bdb3f
--- /dev/null
+++ b/test/postman/testData/timeline-template/create-timeline-template-by-admin.json
@@ -0,0 +1,14 @@
+[
+    {
+        "name": "first timeline",
+        "description": "first timeline",
+        "isActive": true,
+        "defaultDuration":100
+    },
+    {
+        "name": "second timeline",
+        "description": "second timeline",
+        "isActive": true,
+        "defaultDuration": 200
+    }
+]
diff --git a/test/postman/testData/timeline-template/create-timeline-template-by-error-field.json b/test/postman/testData/timeline-template/create-timeline-template-by-error-field.json
new file mode 100644
index 0000000..dc837ab
--- /dev/null
+++ b/test/postman/testData/timeline-template/create-timeline-template-by-error-field.json
@@ -0,0 +1,11 @@
+[
+    {
+        "description": "second phase",
+        "name": "first timeline",
+        "description": "second timeline",
+        "isActive": true,
+        "defaultDuration": 200,
+        "httpCode": 409,
+        "message": "TimelineTemplate with name: first timeline already exist"
+    }
+]
diff --git a/test/postman/testData/timeline-template/create-timeline-template-by-invalid-token.json b/test/postman/testData/timeline-template/create-timeline-template-by-invalid-token.json
new file mode 100644
index 0000000..d5f9888
--- /dev/null
+++ b/test/postman/testData/timeline-template/create-timeline-template-by-invalid-token.json
@@ -0,0 +1,22 @@
+[
+  {
+    "jwtToken": "",
+    "httpCode": 401,
+    "message": "No token provided."
+  },
+  {
+    "jwtToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJjb3BpbG90IiwiQ29ubmVjdCBTdXBwb3J0Il0sImlzcyI6Imh0dHBzOi8vYXBpLnRvcGNvZGVyLWRldi5jb20iLCJoYW5kbGUiOiJHaG9zdGFyIiwiZXhwIjoxNTQ5ODAwMDc3LCJ1c2VySWQiOiIxNTE3NDMiLCJpYXQiOjE1NDk3OTk0NzcsImVtYWlsIjoiZW1haWxAZG9tYWluLmNvbS56IiwianRpIjoiMTJjMWMxMGItOTNlZi00NTMxLTgzMDUtYmE2NjVmYzRlMWI0In0.2n8k9pb16sE7LOLF_7mjAvEVKgggzS-wS3_8n2-R4RU",
+    "httpCode": 401,
+    "message": "Failed to authenticate token."
+  },
+  {
+    "jwtToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJBZG1pbmlzdHJhdG9yIl0sImlzcyI6Imh0dHBzOi8vYXBpLnRvcGNvZGVyLmNvbSIsImhhbmRsZSI6IlRvbnlKIiwiZXhwIjo1NTUzMDE5OTI1OSwidXNlcklkIjoiNDA0MzMyODgiLCJpYXQiOjE1MzAxOTg2NTksImVtYWlsIjoiYWRtaW5AdG9wY29kZXIuY29tIiwianRpIjoiYzNhYzYwOGEtNTZiZS00NWQwLThmNmEtMzFmZTk0Yjk1NjFjIn0.ePREgnJrBixP4URf1dd8FHISN2_6eRM5gjCReS0ZMK4",
+    "httpCode": 401,
+    "message": "Failed to authenticate token."
+  },
+  {
+    "jwtToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL3RvcGNvZGVyLWRldi5hdXRoMC5jb20vIiwic3ViIjoiZW5qdzE4MTBlRHozWFR3U08yUm4yWTljUVRyc3BuM0JAY2xpZW50cyIsImF1ZCI6Imh0dHBzOi8vbTJtLnRvcGNvZGVyLWRldi5jb20vIiwiaWF0IjoxNTUwOTA2Mzg4LCJleHAiOjE4ODA5OTI3ODgsImF6cCI6ImVuancxODEwZUR6M1hUd1NPMlJuMlk5Y1FUcnNwbjNCIiwiaXNNYWNoaW5lIjp0cnVlLCJzY29wZSI6InJlYWQ6Y2hhbGxlbmdlcyByZWFkOmNoYWxsZW5nZV90eXBlcyByZWFkOmNoYWxsZW5nZV9zZXR0aW5ncyByZWFkOmNoYWxsZW5nZV9hdWRpdF9sb2dzIHJlYWQ6Y2hhbGxlbmdlX3BoYXNlcyByZWFkOnRpbWVsaW5lX3RlbXBsYXRlcyByZWFkOmNoYWxsZW5nZV9hdHRhY2htZW50cyByZWFkOmNoYWxsZW5nZV90eXBlX3RpbWVsaW5lX3RlbXBsYXRlcyIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyJ9.BFWJGFkTaMBr22MM6jniAU38hIn7C-la_mw5vT176l0",
+    "httpCode": 403,
+    "message": "You are not allowed to perform this action!"
+  }
+]
diff --git a/test/postman/testData/timeline-template/delete-timeline-template-by-invalid-token.json b/test/postman/testData/timeline-template/delete-timeline-template-by-invalid-token.json
new file mode 100644
index 0000000..d5f9888
--- /dev/null
+++ b/test/postman/testData/timeline-template/delete-timeline-template-by-invalid-token.json
@@ -0,0 +1,22 @@
+[
+  {
+    "jwtToken": "",
+    "httpCode": 401,
+    "message": "No token provided."
+  },
+  {
+    "jwtToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJjb3BpbG90IiwiQ29ubmVjdCBTdXBwb3J0Il0sImlzcyI6Imh0dHBzOi8vYXBpLnRvcGNvZGVyLWRldi5jb20iLCJoYW5kbGUiOiJHaG9zdGFyIiwiZXhwIjoxNTQ5ODAwMDc3LCJ1c2VySWQiOiIxNTE3NDMiLCJpYXQiOjE1NDk3OTk0NzcsImVtYWlsIjoiZW1haWxAZG9tYWluLmNvbS56IiwianRpIjoiMTJjMWMxMGItOTNlZi00NTMxLTgzMDUtYmE2NjVmYzRlMWI0In0.2n8k9pb16sE7LOLF_7mjAvEVKgggzS-wS3_8n2-R4RU",
+    "httpCode": 401,
+    "message": "Failed to authenticate token."
+  },
+  {
+    "jwtToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJBZG1pbmlzdHJhdG9yIl0sImlzcyI6Imh0dHBzOi8vYXBpLnRvcGNvZGVyLmNvbSIsImhhbmRsZSI6IlRvbnlKIiwiZXhwIjo1NTUzMDE5OTI1OSwidXNlcklkIjoiNDA0MzMyODgiLCJpYXQiOjE1MzAxOTg2NTksImVtYWlsIjoiYWRtaW5AdG9wY29kZXIuY29tIiwianRpIjoiYzNhYzYwOGEtNTZiZS00NWQwLThmNmEtMzFmZTk0Yjk1NjFjIn0.ePREgnJrBixP4URf1dd8FHISN2_6eRM5gjCReS0ZMK4",
+    "httpCode": 401,
+    "message": "Failed to authenticate token."
+  },
+  {
+    "jwtToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL3RvcGNvZGVyLWRldi5hdXRoMC5jb20vIiwic3ViIjoiZW5qdzE4MTBlRHozWFR3U08yUm4yWTljUVRyc3BuM0JAY2xpZW50cyIsImF1ZCI6Imh0dHBzOi8vbTJtLnRvcGNvZGVyLWRldi5jb20vIiwiaWF0IjoxNTUwOTA2Mzg4LCJleHAiOjE4ODA5OTI3ODgsImF6cCI6ImVuancxODEwZUR6M1hUd1NPMlJuMlk5Y1FUcnNwbjNCIiwiaXNNYWNoaW5lIjp0cnVlLCJzY29wZSI6InJlYWQ6Y2hhbGxlbmdlcyByZWFkOmNoYWxsZW5nZV90eXBlcyByZWFkOmNoYWxsZW5nZV9zZXR0aW5ncyByZWFkOmNoYWxsZW5nZV9hdWRpdF9sb2dzIHJlYWQ6Y2hhbGxlbmdlX3BoYXNlcyByZWFkOnRpbWVsaW5lX3RlbXBsYXRlcyByZWFkOmNoYWxsZW5nZV9hdHRhY2htZW50cyByZWFkOmNoYWxsZW5nZV90eXBlX3RpbWVsaW5lX3RlbXBsYXRlcyIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyJ9.BFWJGFkTaMBr22MM6jniAU38hIn7C-la_mw5vT176l0",
+    "httpCode": 403,
+    "message": "You are not allowed to perform this action!"
+  }
+]
diff --git a/test/postman/testData/timeline-template/fully-update-timeline-template-by-admin.json b/test/postman/testData/timeline-template/fully-update-timeline-template-by-admin.json
new file mode 100644
index 0000000..f2bde56
--- /dev/null
+++ b/test/postman/testData/timeline-template/fully-update-timeline-template-by-admin.json
@@ -0,0 +1,9 @@
+[
+    {
+        "name": "second timeline",
+        "description": "second timeline2",
+        "isActive": false,
+        "defaultDuration": 200,
+        "httpCode": 200
+    }
+]
diff --git a/test/postman/testData/timeline-template/fully-update-timeline-template-by-error-field.json b/test/postman/testData/timeline-template/fully-update-timeline-template-by-error-field.json
new file mode 100644
index 0000000..6344ac1
--- /dev/null
+++ b/test/postman/testData/timeline-template/fully-update-timeline-template-by-error-field.json
@@ -0,0 +1,12 @@
+[
+    {
+        "description": "first timeline",
+        "name": "first timeline",
+        "isActive": true,
+        "defaultDuration":100,
+        "httpCode": 409,
+        "message": "TimelineTemplate with name: first timeline already exist"
+    }
+]
+
+
diff --git a/test/postman/testData/timeline-template/fully-update-timeline-template-by-invalid-token.json b/test/postman/testData/timeline-template/fully-update-timeline-template-by-invalid-token.json
new file mode 100644
index 0000000..d5f9888
--- /dev/null
+++ b/test/postman/testData/timeline-template/fully-update-timeline-template-by-invalid-token.json
@@ -0,0 +1,22 @@
+[
+  {
+    "jwtToken": "",
+    "httpCode": 401,
+    "message": "No token provided."
+  },
+  {
+    "jwtToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJjb3BpbG90IiwiQ29ubmVjdCBTdXBwb3J0Il0sImlzcyI6Imh0dHBzOi8vYXBpLnRvcGNvZGVyLWRldi5jb20iLCJoYW5kbGUiOiJHaG9zdGFyIiwiZXhwIjoxNTQ5ODAwMDc3LCJ1c2VySWQiOiIxNTE3NDMiLCJpYXQiOjE1NDk3OTk0NzcsImVtYWlsIjoiZW1haWxAZG9tYWluLmNvbS56IiwianRpIjoiMTJjMWMxMGItOTNlZi00NTMxLTgzMDUtYmE2NjVmYzRlMWI0In0.2n8k9pb16sE7LOLF_7mjAvEVKgggzS-wS3_8n2-R4RU",
+    "httpCode": 401,
+    "message": "Failed to authenticate token."
+  },
+  {
+    "jwtToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJBZG1pbmlzdHJhdG9yIl0sImlzcyI6Imh0dHBzOi8vYXBpLnRvcGNvZGVyLmNvbSIsImhhbmRsZSI6IlRvbnlKIiwiZXhwIjo1NTUzMDE5OTI1OSwidXNlcklkIjoiNDA0MzMyODgiLCJpYXQiOjE1MzAxOTg2NTksImVtYWlsIjoiYWRtaW5AdG9wY29kZXIuY29tIiwianRpIjoiYzNhYzYwOGEtNTZiZS00NWQwLThmNmEtMzFmZTk0Yjk1NjFjIn0.ePREgnJrBixP4URf1dd8FHISN2_6eRM5gjCReS0ZMK4",
+    "httpCode": 401,
+    "message": "Failed to authenticate token."
+  },
+  {
+    "jwtToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL3RvcGNvZGVyLWRldi5hdXRoMC5jb20vIiwic3ViIjoiZW5qdzE4MTBlRHozWFR3U08yUm4yWTljUVRyc3BuM0JAY2xpZW50cyIsImF1ZCI6Imh0dHBzOi8vbTJtLnRvcGNvZGVyLWRldi5jb20vIiwiaWF0IjoxNTUwOTA2Mzg4LCJleHAiOjE4ODA5OTI3ODgsImF6cCI6ImVuancxODEwZUR6M1hUd1NPMlJuMlk5Y1FUcnNwbjNCIiwiaXNNYWNoaW5lIjp0cnVlLCJzY29wZSI6InJlYWQ6Y2hhbGxlbmdlcyByZWFkOmNoYWxsZW5nZV90eXBlcyByZWFkOmNoYWxsZW5nZV9zZXR0aW5ncyByZWFkOmNoYWxsZW5nZV9hdWRpdF9sb2dzIHJlYWQ6Y2hhbGxlbmdlX3BoYXNlcyByZWFkOnRpbWVsaW5lX3RlbXBsYXRlcyByZWFkOmNoYWxsZW5nZV9hdHRhY2htZW50cyByZWFkOmNoYWxsZW5nZV90eXBlX3RpbWVsaW5lX3RlbXBsYXRlcyIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyJ9.BFWJGFkTaMBr22MM6jniAU38hIn7C-la_mw5vT176l0",
+    "httpCode": 403,
+    "message": "You are not allowed to perform this action!"
+  }
+]
diff --git a/test/postman/testData/timeline-template/partially-update-timeline-template-by-admin.json b/test/postman/testData/timeline-template/partially-update-timeline-template-by-admin.json
new file mode 100644
index 0000000..600b6b8
--- /dev/null
+++ b/test/postman/testData/timeline-template/partially-update-timeline-template-by-admin.json
@@ -0,0 +1,10 @@
+[
+    {
+        "name": "second timeline",
+        "description": "second timeline3",
+        "isActive": false,
+        "defaultDuration": 200,
+        "httpCode": 200
+    }
+]
+
diff --git a/test/postman/testData/timeline-template/partially-update-timeline-template-by-error-field.json b/test/postman/testData/timeline-template/partially-update-timeline-template-by-error-field.json
new file mode 100644
index 0000000..2d6aa1c
--- /dev/null
+++ b/test/postman/testData/timeline-template/partially-update-timeline-template-by-error-field.json
@@ -0,0 +1,10 @@
+[
+    {
+        "description": "first timeline33",
+        "name": "first timeline",
+        "isActive": true,
+        "defaultDuration": 200,
+        "httpCode": 409,
+        "message": "TimelineTemplate with name: first timeline already exist"
+    }
+]
diff --git a/test/postman/testData/timeline-template/partially-update-timeline-template-by-invalid-token.json b/test/postman/testData/timeline-template/partially-update-timeline-template-by-invalid-token.json
new file mode 100644
index 0000000..d5f9888
--- /dev/null
+++ b/test/postman/testData/timeline-template/partially-update-timeline-template-by-invalid-token.json
@@ -0,0 +1,22 @@
+[
+  {
+    "jwtToken": "",
+    "httpCode": 401,
+    "message": "No token provided."
+  },
+  {
+    "jwtToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJjb3BpbG90IiwiQ29ubmVjdCBTdXBwb3J0Il0sImlzcyI6Imh0dHBzOi8vYXBpLnRvcGNvZGVyLWRldi5jb20iLCJoYW5kbGUiOiJHaG9zdGFyIiwiZXhwIjoxNTQ5ODAwMDc3LCJ1c2VySWQiOiIxNTE3NDMiLCJpYXQiOjE1NDk3OTk0NzcsImVtYWlsIjoiZW1haWxAZG9tYWluLmNvbS56IiwianRpIjoiMTJjMWMxMGItOTNlZi00NTMxLTgzMDUtYmE2NjVmYzRlMWI0In0.2n8k9pb16sE7LOLF_7mjAvEVKgggzS-wS3_8n2-R4RU",
+    "httpCode": 401,
+    "message": "Failed to authenticate token."
+  },
+  {
+    "jwtToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJBZG1pbmlzdHJhdG9yIl0sImlzcyI6Imh0dHBzOi8vYXBpLnRvcGNvZGVyLmNvbSIsImhhbmRsZSI6IlRvbnlKIiwiZXhwIjo1NTUzMDE5OTI1OSwidXNlcklkIjoiNDA0MzMyODgiLCJpYXQiOjE1MzAxOTg2NTksImVtYWlsIjoiYWRtaW5AdG9wY29kZXIuY29tIiwianRpIjoiYzNhYzYwOGEtNTZiZS00NWQwLThmNmEtMzFmZTk0Yjk1NjFjIn0.ePREgnJrBixP4URf1dd8FHISN2_6eRM5gjCReS0ZMK4",
+    "httpCode": 401,
+    "message": "Failed to authenticate token."
+  },
+  {
+    "jwtToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL3RvcGNvZGVyLWRldi5hdXRoMC5jb20vIiwic3ViIjoiZW5qdzE4MTBlRHozWFR3U08yUm4yWTljUVRyc3BuM0JAY2xpZW50cyIsImF1ZCI6Imh0dHBzOi8vbTJtLnRvcGNvZGVyLWRldi5jb20vIiwiaWF0IjoxNTUwOTA2Mzg4LCJleHAiOjE4ODA5OTI3ODgsImF6cCI6ImVuancxODEwZUR6M1hUd1NPMlJuMlk5Y1FUcnNwbjNCIiwiaXNNYWNoaW5lIjp0cnVlLCJzY29wZSI6InJlYWQ6Y2hhbGxlbmdlcyByZWFkOmNoYWxsZW5nZV90eXBlcyByZWFkOmNoYWxsZW5nZV9zZXR0aW5ncyByZWFkOmNoYWxsZW5nZV9hdWRpdF9sb2dzIHJlYWQ6Y2hhbGxlbmdlX3BoYXNlcyByZWFkOnRpbWVsaW5lX3RlbXBsYXRlcyByZWFkOmNoYWxsZW5nZV9hdHRhY2htZW50cyByZWFkOmNoYWxsZW5nZV90eXBlX3RpbWVsaW5lX3RlbXBsYXRlcyIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyJ9.BFWJGFkTaMBr22MM6jniAU38hIn7C-la_mw5vT176l0",
+    "httpCode": 403,
+    "message": "You are not allowed to perform this action!"
+  }
+]
-- 
2.21.1 (Apple Git-122.3)

